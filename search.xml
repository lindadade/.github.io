<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端JS算法，您看我还有机会嘛？（持续不间断更新）</title>
    <url>/lindada-blog/2020/07/08/%E5%89%8D%E7%AB%AFJS%E7%AE%97%E6%B3%95%EF%BC%8C%E6%82%A8%E7%9C%8B%E6%88%91%E8%BF%98%E6%9C%89%E6%9C%BA%E4%BC%9A%E5%98%9B%EF%BC%9F%EF%BC%88%E6%8C%81%E7%BB%AD%E4%B8%8D%E9%97%B4%E6%96%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/07/08/%E5%89%8D%E7%AB%AFJS%E7%AE%97%E6%B3%95%EF%BC%8C%E6%82%A8%E7%9C%8B%E6%88%91%E8%BF%98%E6%9C%89%E6%9C%BA%E4%BC%9A%E5%98%9B%EF%BC%9F%EF%BC%88%E6%8C%81%E7%BB%AD%E4%B8%8D%E9%97%B4%E6%96%AD%E6%9B%B4%E6%96%B0%EF%BC%89/1.png" class>  
<p>暑假到了…作为算法小渣的我来说<br>很有必要开启算法的上山之路！<br>本文章用于记录在路途中的一步一脚印<br><em>~不拍照的那种</em><br>坚持周期性更新（一天3篇Easy, 一天2篇Mid, 一天1篇Hard）<br>为了两年后毕业后面试的自己打下基础<br>奋进吧！少儿郎…  </p>
<blockquote>
<p>来源：力扣（LeetCode）- 精选 TOP 面试题<br>提示: 每一道题均有实例、解题思路、解答代码、执行结果</p>
</blockquote>
<blockquote>
<p>要是对您有所帮助启发点个小赞噢~  </p>
</blockquote>
<a id="more"></a>

<h1 id="第一天-07-08"><a href="#第一天-07-08" class="headerlink" title="第一天 - 07.08"></a>第一天 - 07.08</h1><p>前记: 今天是高考的最后一天…望考生们不负自己的努力</p>
<h2 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h2><blockquote>
<p>1.两数之和<br>2.整数反转<br>3.罗马数字转整数</p>
</blockquote>
<h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给定一个整数数组 nums 和一个目标值 target，</span><br><span class="line">请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</span><br><span class="line">你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</span><br></pre></td></tr></table></figure>

<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>

<h4 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.关键在于target-当前数组的剩余值，等于数组剩余值中的某一个<br>2.利用对象key为值, value为下标  </p>
<h4 id="解答代码"><a href="#解答代码" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> prevNums = &#123;&#125;;  <span class="comment">// 存储的对象                         </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;      </span><br><span class="line">    <span class="keyword">const</span> curNum = nums[i];   <span class="comment">// 当前数组值</span></span><br><span class="line">    <span class="keyword">const</span> targetNum = target - curNum;    <span class="comment">// 当前剩余值</span></span><br><span class="line">    <span class="keyword">const</span> targetNumIndex = prevNums[targetNum];   <span class="comment">// 在存储对象中key为当前剩余值时候 -&gt; 获取value下标值</span></span><br><span class="line">    <span class="keyword">if</span> (targetNumIndex !== <span class="literal">undefined</span>) &#123;   <span class="comment">// 当存储对象有该下标时</span></span><br><span class="line">      <span class="keyword">return</span> [targetNumIndex, i];   <span class="comment">// 返回目标下标和当前下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    prevNums[curNum] = i;   <span class="comment">// 否则存储value -&gt; 下标和key -&gt; 数值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果"><a href="#代码执行结果" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入:<br>[2,7,11,15]<br>9  </p>
<p>输出<br>[0,1]  </p>
<p>预期结果<br>[0,1]  </p>
</blockquote>
<hr>
<h3 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</span><br><span class="line">注意反转后整数可能溢出情况 -&gt; 返回0</span><br></pre></td></tr></table></figure>

<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-1"><a href="#解答思路-1" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.反转整数向左移一位同时加上原整数的最后一位 -&gt; 原整数去掉最后一位 -&gt; 至到原整数为0<br>2.注意需要将反转整数转为32位有符号整数<br>3.若溢出 -&gt; 反转整数不等于自身 -&gt; 溢出为Infinity  </p>
<h4 id="解答代码-1"><a href="#解答代码-1" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reverseNumber = <span class="number">0</span>   <span class="comment">// 反转整数为0</span></span><br><span class="line">    <span class="keyword">while</span>(x) &#123;</span><br><span class="line">        reverseNumber = reverseNumber * <span class="number">10</span> + x % <span class="number">10</span>   <span class="comment">// 反转整数向左移一位 再加上x最后一位数字</span></span><br><span class="line">        x = (x / <span class="number">10</span>) | <span class="number">0</span>    <span class="comment">// 原整数去掉最后一位数字 x | 0 -&gt; 强制转换为32位有符号整数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (reverseNumber | <span class="number">0</span>) === reverseNumber ? reverseNumber : <span class="number">0</span></span><br><span class="line">    <span class="comment">// 反转整数强制转换为32位有符号整数 -&gt; 若不等于自身 -&gt; 判断溢出 -&gt; 值为0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-1"><a href="#代码执行结果-1" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>12345  </p>
<p>输出<br>54321  </p>
<p>预期结果<br>54321  </p>
</blockquote>
<hr>
<h3 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</span><br><span class="line"></span><br><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br><span class="line">例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</span><br><span class="line"></span><br><span class="line">通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。</span><br><span class="line">数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。</span><br><span class="line">同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</span><br><span class="line"></span><br><span class="line">I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</span><br><span class="line">X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </span><br><span class="line">C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</span><br><span class="line">给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</span><br></pre></td></tr></table></figure>

<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: "IX"</span><br><span class="line">输出: 9</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: "LVIII"</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: "MCMXCIV"</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-2"><a href="#解答思路-2" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.创建一个罗马字符的对象 -&gt; 对应字符对应数值<br>2.贪心思想 -&gt; 由最大的字符往最小的字符一一转换<br>3.当前罗马字符 &lt; 右边罗马字符时 -&gt; 整数减去当前罗马字符代表的数值 反之则加<br>4.遍历整个罗马字符完成</p>
<h4 id="解答代码-2"><a href="#解答代码-2" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> roman = &#123;     <span class="comment">// 创建罗马字符对象</span></span><br><span class="line">        <span class="string">'I'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'V'</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">'X'</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">'L'</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">'C'</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">'D'</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="string">'M'</span>: <span class="number">1000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> length = s.length   <span class="comment">// 罗马字符串长度</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>    <span class="comment">// 转换整数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++ ) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentNum = roman[s[i]]    <span class="comment">// 当罗马字符对应数值</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; length - <span class="number">1</span> &amp;&amp; currentNum &lt; roman[s[i+<span class="number">1</span>]]) &#123;    <span class="comment">// 判断为倒数第二个字符串 并且当前罗马对应数值小于右边对应数值</span></span><br><span class="line">            result -= currentNum    <span class="comment">// 减去当前值</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result += currentNum    <span class="comment">// 反之加上当前值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result   <span class="comment">// 返回转换后的整数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-2"><a href="#代码执行结果-2" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>“MCMXCIV”  </p>
<p>输出<br>1994  </p>
<p>预期结果<br>1994</p>
</blockquote>
<hr>
<h1 id="第二天-07-09"><a href="#第二天-07-09" class="headerlink" title="第二天 - 07.09"></a>第二天 - 07.09</h1><p>前记: 写了好久小程序，和小妹妹出去散散步</p>
<h2 id="Mid"><a href="#Mid" class="headerlink" title="Mid"></a>Mid</h2><blockquote>
<p>1.两数相加<br>2.无重复字符的最长子串  </p>
</blockquote>
<h3 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给出两个 非空 的链表用来表示两个非负的整数。</span><br><span class="line">其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。  </span><br><span class="line">如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</span><br></pre></td></tr></table></figure>

<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-3"><a href="#解答思路-3" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.因为倒叙<br>2.链表取出l1和l2的首个数字相加 -&gt; 为sum<br>3.sum取余10 -&gt; 存入新链表中（防止为两位数）<br>4.若sum &gt;= 10 -&gt; 向下一个链表next + 1</p>
<h4 id="解答代码-3"><a href="#解答代码-3" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> ListNode(<span class="string">'head'</span>);   <span class="comment">// 表头（上方的ListNode链表方法）</span></span><br><span class="line">    <span class="keyword">let</span> temp = node;    <span class="comment">// 当前指向表头</span></span><br><span class="line">    <span class="keyword">let</span> add = <span class="number">0</span>;    <span class="comment">// 是否进一</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;    <span class="comment">// 当前总和值为</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l1 || l2)&#123;    <span class="comment">//遍历，直到最长链表的都为空</span></span><br><span class="line">        <span class="comment">// 当前l1链表值和l2链表值相加（无值时为0）且判断l1+l2 &gt; 10时 -&gt; 需要+1</span></span><br><span class="line">        sum = (l1 ? l1.val : <span class="number">0</span>) + (l2 ? l2.val : <span class="number">0</span>) + add;</span><br><span class="line">        temp.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);     <span class="comment">// 当前总和取余存入新链表中</span></span><br><span class="line">        temp = temp.next;       <span class="comment">// 指向下一链表</span></span><br><span class="line">        add = sum &gt;= <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span>;        <span class="comment">// 判断总和是否 &gt;= 10</span></span><br><span class="line">        l1 &amp;&amp; (l1 = l1.next);       <span class="comment">// l1指向下一链表</span></span><br><span class="line">        l2 &amp;&amp; (l2 = l2.next);       <span class="comment">// l2指向下一链表</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当最后一次add存在时 -&gt; 最后相加 &gt;= 10了 -&gt; 再存入新链表中</span></span><br><span class="line">    add &amp;&amp; (temp.next = <span class="keyword">new</span> ListNode(add));</span><br><span class="line">    <span class="keyword">return</span> node.next;       <span class="comment">// 返回新链表的next结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-3"><a href="#代码执行结果-3" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>[2,4,3]<br>[5,6,4]  </p>
<p>输出<br>[7,0,8]  </p>
<p>预期结果<br>[7,0,8]  </p>
</blockquote>
<hr>
<h3 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</span><br></pre></td></tr></table></figure>

<h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: "abcabcbb"</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: "bbbbb"</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: "pwwkew"</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。。</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-4"><a href="#解答思路-4" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.遍历字符串每个字符<br>2.用一个数组存储每个字符<br>3.若数组中存在当前字符 -&gt; 清除数组当前字符和前的数据<br>4.判断max取整个过程的最长长度</p>
<h4 id="解答代码-4"><a href="#解答代码-4" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [], max = <span class="number">0</span>       <span class="comment">// 存储到数组中，无重复字符的最长长度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;     <span class="comment">// 遍历每一个字符</span></span><br><span class="line">        <span class="keyword">let</span> index = arr.indexOf(s[i])       <span class="comment">// 数组中是否有当前字符</span></span><br><span class="line">        <span class="keyword">if</span>(index !== <span class="number">-1</span>) &#123;</span><br><span class="line">            arr.splice(<span class="number">0</span>, index+<span class="number">1</span>);    <span class="comment">// 若已存在 -&gt; 清除已有字符前面的</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(s.charAt(i))       <span class="comment">// 存入当前字符 -&gt; 至少长度为1</span></span><br><span class="line">        max = <span class="built_in">Math</span>.max(arr.length, max)     <span class="comment">// 判断当前数组长度与max大小</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max      <span class="comment">// 返回最长长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-4"><a href="#代码执行结果-4" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>“dvdf”  </p>
<p>输出<br>3  </p>
<p>预期结果<br>3</p>
</blockquote>
<hr>
<hr>
<h1 id="第三天-07-10"><a href="#第三天-07-10" class="headerlink" title="第三天 - 07.10"></a>第三天 - 07.10</h1><p>前记: 打了会游戏，困难题肝了快3小时，还是不太清除官方做法…</p>
<h2 id="Hard"><a href="#Hard" class="headerlink" title="Hard"></a>Hard</h2><blockquote>
<p>1.正则表达式匹配  </p>
</blockquote>
<h3 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。  </span><br><span class="line">'.' 匹配任意单个字符  </span><br><span class="line">'*' 匹配零个或多个前面的那一个元素  </span><br><span class="line">所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。  </span><br><span class="line">说明:  </span><br><span class="line">s 可能为空，且只包含从 a-z 的小写字母。  </span><br><span class="line">p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。  </span><br><span class="line">注意可不要使用JS的正则表达式呀~那这道题将毫无意义</span><br></pre></td></tr></table></figure>

<h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入:</span><br><span class="line">s = "aa"</span><br><span class="line">p = "a"</span><br><span class="line">输出: false</span><br><span class="line">解释: "a" 无法匹配 "aa" 整个字符串。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入:</span><br><span class="line">s = "ab"</span><br><span class="line">p = ".*"</span><br><span class="line">输出: true</span><br><span class="line">解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入:</span><br><span class="line">s = "aab"</span><br><span class="line">p = "c*a*b"</span><br><span class="line">输出: true</span><br><span class="line">解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。</span><br><span class="line"></span><br><span class="line">示例 4:</span><br><span class="line">输入:</span><br><span class="line">s = "mississippi"</span><br><span class="line">p = "mis*is*p*."</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-5"><a href="#解答思路-5" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.定义基础返回条件，p的长度为0时，s的长度为0则表示匹配，s的长度不为0则表示不匹配<br>2.定义匹配状态match，即为第一个字符的互相比较，如果相等或p[0]为’.’则为true<br>3.当p没有模式的时候，我们根据match的状态进行返回，如果match为false，直接返回false，如果为true，那么进行下一步的判断getIsMactch(s.slice(1), p.slice(1)<br>4.当p有模式的时候，有两种情况：一是s<em>匹配0个字符，则进行getIsMactch(s, p.slice(2))，二是s<em>匹配1个字符，递归下去，用来表示s</em>匹配多个s</em>,这样如果match为false，直接返回false，如果为true，那么进行getIsMactch(s.slice(1), p)。这两种只要一个能成立就够了<br>5.返回匹配结果</p>
<h4 id="解答代码-5"><a href="#解答代码-5" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isMatch = <span class="function"><span class="keyword">function</span> (<span class="params">s, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> getIsMactch = <span class="function">(<span class="params">s, p</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断，如果传入p的长度为0，那么，必须s的长度也为0才会返回true</span></span><br><span class="line">    <span class="keyword">if</span> (p.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> !s.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断第一个字符是否相等</span></span><br><span class="line">    <span class="keyword">let</span> match = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (s.length &gt; <span class="number">0</span> &amp;&amp; (s[<span class="number">0</span>] === p[<span class="number">0</span>] || p[<span class="number">0</span>] === <span class="string">'.'</span>)) &#123;</span><br><span class="line">      match = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p有模式的</span></span><br><span class="line">    <span class="keyword">if</span> (p.length &gt; <span class="number">1</span> &amp;&amp; p[<span class="number">1</span>] === <span class="string">"*"</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果有"*"字符，回溯字符</span></span><br><span class="line">      <span class="comment">// 第一种情况：s*匹配0个字符</span></span><br><span class="line">      <span class="comment">// 第二种情况：s*匹配1个字符，递归下去，用来表示s*匹配多个s*</span></span><br><span class="line">      <span class="keyword">return</span> getIsMactch(s, p.slice(<span class="number">2</span>)) || (match &amp;&amp; getIsMactch(s.slice(<span class="number">1</span>), p))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (match &amp;&amp; getIsMactch(s.slice(<span class="number">1</span>), p.slice(<span class="number">1</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getIsMactch(s, p)  <span class="comment">// 返回最终调用方法匹配结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 官方解答代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isMatch = <span class="function"><span class="keyword">function</span>(<span class="params">s, p</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">matches</span>(<span class="params">s, p, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) === <span class="string">'.'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s[i - <span class="number">1</span>] === p[j - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> m = s.length</span><br><span class="line">  <span class="keyword">let</span> n = p.length</span><br><span class="line">  <span class="keyword">let</span> f = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    f.push(<span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>).fill(<span class="literal">false</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">'*'</span>) &#123;</span><br><span class="line">        f[i][j] = f[i][j - <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (matches(s, p, i, j - <span class="number">1</span>)) &#123;</span><br><span class="line">          f[i][j] = f[i][j] || f[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (matches(s, p, i, j)) &#123;</span><br><span class="line">          f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f[m][n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-5"><a href="#代码执行结果-5" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>“mississippi”<br>“mis<em>is*p</em>.”  </p>
<p>输出<br>false  </p>
<p>预期结果<br>false</p>
</blockquote>
<hr>
<h1 id="第四天-07-11"><a href="#第四天-07-11" class="headerlink" title="第四天 - 07.11"></a>第四天 - 07.11</h1><p>前记: 噢吼吼吼吼吼，写了一天小程序。等会看小白船</p>
<h2 id="Easy-1"><a href="#Easy-1" class="headerlink" title="Easy"></a>Easy</h2><blockquote>
<p>1.回文数<br>2.最长公共前缀<br>3.有效的括号</p>
</blockquote>
<h3 id="两数之和-1"><a href="#两数之和-1" class="headerlink" title="两数之和"></a>两数之和</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">判断一个整数是否是回文数。  </span><br><span class="line">回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</span><br></pre></td></tr></table></figure>

<h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: 121</span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-6"><a href="#解答思路-6" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.将整数转为字符串<br>2.字符串倒置<br>3.判断字符串倒置和原整数字符串是否一致  </p>
<h4 id="解答代码-6"><a href="#解答代码-6" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reserveStr = x.toString().split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">return</span> reserveStr === x.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-6"><a href="#代码执行结果-6" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入:<br>121<br>9  </p>
<p>输出<br>true  </p>
<p>预期结果<br>true  </p>
</blockquote>
<hr>
<h3 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">编写一个函数来查找字符串数组中的最长公共前缀。  </span><br><span class="line">如果不存在公共前缀，返回空字符串 ""。</span><br></pre></td></tr></table></figure>
<h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: ["flower","flow","flight"]</span><br><span class="line">输出: "fl"</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: ["dog","racecar","car"]</span><br><span class="line">输出: ""</span><br><span class="line">解释: 输入不存在公共前缀。</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">所有输入只包含小写字母 a-z 。</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-7"><a href="#解答思路-7" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.初始化任意一个数组字符串（原理: 公共前缀小于任意一个字符串）<br>2.开始遍历和对比字符串数组 -&gt; 若公共前缀与当前不相等 -&gt; 截取之前的公共前缀<br>3.遍历完成返回公共前缀 -&gt; 若公共前缀为空字符 -&gt; 提前返回  </p>
<h4 id="解答代码-7"><a href="#解答代码-7" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(strs.length == <span class="number">0</span>)     <span class="comment">// 如果字符数组为空数组 -&gt; 返回为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">let</span> ans = strs[<span class="number">0</span>];      <span class="comment">// 初始化公共前缀第一个数组字符串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;      <span class="comment">// 遍历字符数组</span></span><br><span class="line">        <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 公共前缀小于初始化字符串长度 并且 小于当前字符串长度</span></span><br><span class="line">        <span class="keyword">for</span>(;j &lt; ans.length &amp;&amp; j &lt; strs[i].length; j++) &#123;</span><br><span class="line">            <span class="comment">// 公共前缀字符 和 当前数组字符串字符不相等时 -&gt; break</span></span><br><span class="line">            <span class="keyword">if</span>(ans[j] != strs[i][j])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 截取目前相等的公共前缀</span></span><br><span class="line">        ans = ans.substr(<span class="number">0</span>, j);</span><br><span class="line">        <span class="keyword">if</span>(ans === <span class="string">""</span>)      <span class="comment">// 若公共前缀为空 -&gt; 直接返回无需遍历</span></span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;     <span class="comment">// 遍历完成，返回公共前缀</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-7"><a href="#代码执行结果-7" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>[“flower”,”flow”,”flight”]  </p>
<p>输出<br>“fl”  </p>
<p>预期结果<br>“fl”  </p>
</blockquote>
<hr>
<h3 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给定一个只包括 '('，')'，'&#123;'，'&#125;'，'['，']' 的字符串，判断字符串是否有效。</span><br><span class="line"></span><br><span class="line">有效字符串需满足：</span><br><span class="line"></span><br><span class="line">左括号必须用相同类型的右括号闭合。</span><br><span class="line">左括号必须以正确的顺序闭合。</span><br><span class="line">注意空字符串可被认为是有效字符串。</span><br></pre></td></tr></table></figure>
<h4 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: "()[]&#123;&#125;"</span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: "(]"</span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: "([)]"</span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">示例 4:</span><br><span class="line">输入: "&#123;[]&#125;"</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-8"><a href="#解答思路-8" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.因为空字符串可被认为是有效字符串 -&gt; 利用对象的key和value只提取出括号字符<br>2.利用栈思想 -&gt; 先近后出原理 -&gt; 这里将括号字符定义为开、关两种<br>3.若 开 字符 -&gt; 存入栈中对应 闭 字符<br>4.若 闭 字符 -&gt; 取出栈顶字符 -&gt; 判断是否相等<br>5.若不相等 -&gt; 返回false / 若遍历结束后栈为空 -&gt; 返回true</p>
<h4 id="解答代码-8"><a href="#解答代码-8" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 括号字符分为 开、关 两种</span></span><br><span class="line">    <span class="keyword">const</span> brackets = &#123;       <span class="comment">// 定义括号对象 -&gt; key为开、value为闭</span></span><br><span class="line">        <span class="string">'('</span>: <span class="string">')'</span>,</span><br><span class="line">        <span class="string">'&#123;'</span>: <span class="string">'&#125;'</span>,</span><br><span class="line">        <span class="string">'['</span>: <span class="string">']'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> stack = []      <span class="comment">//定义空栈</span></span><br><span class="line">    <span class="keyword">let</span> top = <span class="literal">undefined</span>     <span class="comment">// 栈顶</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> char <span class="keyword">of</span> s) &#123;        <span class="comment">// 遍历字符</span></span><br><span class="line">        <span class="keyword">let</span> value</span><br><span class="line">        <span class="keyword">if</span>((value = brackets[char])) &#123;      <span class="comment">// 若是对象key的 开 字符 -&gt; 赋值给value</span></span><br><span class="line">            stack.push(value)       <span class="comment">// 存入栈中对应 闭 字符</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;        <span class="comment">// 若是 闭 字符</span></span><br><span class="line">            top = stack.pop()       <span class="comment">// 取出栈顶</span></span><br><span class="line">            <span class="keyword">if</span>(top !== char) &#123;      <span class="comment">// 判断是否栈顶值等于对应当前 闭 字符</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>        <span class="comment">// 若不相等 -&gt; 返回false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.length === <span class="number">0</span>       <span class="comment">// 遍历结束，栈为空 -&gt; 返回true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-8"><a href="#代码执行结果-8" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>“([)]”  </p>
<p>输出<br>false  </p>
<p>预期结果<br>false</p>
</blockquote>
<hr>
<hr>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>提前前挂一个尾言嘻嘻~<br><strong>很开心能与你们分享博客文章哦~</strong><br><a href="https://lin_daren.gitee.io/lindada-blog/2020/07/08/%E5%89%8D%E7%AB%AFJS%E7%AE%97%E6%B3%95%EF%BC%8C%E6%82%A8%E7%9C%8B%E6%88%91%E8%BF%98%E6%9C%89%E6%9C%BA%E4%BC%9A%E5%98%9B%EF%BC%9F%EF%BC%88%E6%8C%81%E7%BB%AD%E4%B8%8D%E9%97%B4%E6%96%AD%E6%9B%B4%E6%96%B0%EF%BC%89">博客原文章✨</a></p>
<hr>
<p><a href="https://gitee.com/lin_daren/lindada-blog" target="_blank" rel="noopener">博客项目✨</a>（点一下哦~）<br>花10秒钟进上边链接帮我的博客点个🌟 吧!<br>(悄悄说~ 点了🌟 的你会更加幸运de ！)  </p>
<p><strong>小屋随时欢迎你们到来噢~</strong><br><strong>也欢迎各位小确幸们的批评和指正~</strong></p>
]]></content>
  </entry>
  <entry>
    <title>从零开始初尝Three.js</title>
    <url>/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/1.gif" class>  
<p>不经意间看到了某个官网的动态效果~<br>实在是太帅啦！十分地友好<br>查了查实现该效果地技术 —— 原来是<strong>Three.js</strong><br>那就让我来从零初尝Three.js动态3D效果吧✨<br><strong>✨有大量案例和找寻源码的方法噢✨</strong></p>
<a id="more"></a>

<hr>
<blockquote>
<p>先赞后看噢~<br>你们的每一个小小的赞都会给我添加无限的动力✨</p>
</blockquote>
<hr>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>随着当今时期前端地愈来愈普及，页面实现的效果真的是越来越棒！<br>随着数字图像处理、人工智能技术的发展<br>展示给用户的视觉效果便不局限于平面的2D视觉效果<br><strong>开始注重于全方位的3D立体展示效果</strong><br><strong>力求对于商品的361度地无死角供用户认识了解</strong><br>今天~就跟着大大初尝一下优秀的三维引擎 <strong>Three.js</strong></p>
<hr>
<h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><p>Three.js是基于原生WebGL封装运行的三维引擎，在所有WebGL引擎中，Three.js是国内文资料最多、使用最广泛的三维引擎。</p>
<p>Threejs是一款WebGL三维引擎，它可以用来做什么许多许多地场景应用</p>
<p>下面我来介绍一下官方运行的经典案例吧</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="物联网3D可视化"><a href="#物联网3D可视化" class="headerlink" title="物联网3D可视化"></a>物联网3D可视化</h3><p>随着物联网的发展,工业、建筑等各个领域与物联网相关Web项目网页交互界面都会呈现出<br><strong>3D化的趋势</strong>。<br>3D的方式更为直观，当然开发成本也比较大<br>而Three.js可以将开发成本大大降低<br><a href="http://www.yanhuangxueyuan.com/3D/liangcang/index.html?_blank" target="_blank" rel="noopener">物联网粮仓3D可视化案例</a></p>
<h3 id="产品720在线预览"><a href="#产品720在线预览" class="headerlink" title="产品720在线预览"></a>产品720在线预览</h3><p>随着WebGL技术的持续推广，5G技术的持续推广，各种产品在线3D展示将会变得越来越普及<br>比如一家汽车公司的新款轿车可以在官网上在线预览<br>也许有一天一些电商平台会通过3D模型取代2D图片<br>现在你朋友推荐推荐给你一款新衣服，你会说发一张图片看看<br><strong>也许将来你会说发来一个3D模型链接看看</strong><br><a href="http://app.xuanke3d.com/apps/trayton/#/show?_blank" target="_blank" rel="noopener">沙发在线预览</a><br><a href="http://suit.xuantech.cn/?_blank" target="_blank" rel="noopener">服装在线预览</a><br><a href="https://cdn.weshape3d.com/hir001/1021/web/index.html?_blank" target="_blank" rel="noopener">洗衣机在线交互预览</a></p>
<h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><p>与webgl相关的数据可视化主要是两方面<br>一方面是海量超大数据的可视化，另一方面是与3D相关的数据可视化。<br>对于超大的海量数据而言<br>基于canvas、svg等方式进行web可视化，没有基于WebGL技术实现性能更好<br>对于3D相关的数据可视化基于WebGL技术<br><strong>借助3D引擎Threejs可以很好的实现</strong><br><a href="http://www.yanhuangxueyuan.com/3D/geojsonChina/index.html?_blank" target="_blank" rel="noopener">解析GeoJOSN数据中国GDP数据可视化</a><br><a href="https://www.echartsjs.com/examples/zh/editor.html?c=transparent-bar3d&gl=1?_blank" target="_blank" rel="noopener">3D直方图</a>  </p>
<h3 id="H5-微信小游戏"><a href="#H5-微信小游戏" class="headerlink" title="H5/微信小游戏"></a>H5/微信小游戏</h3><p>非常火的<strong>微信小游戏跳一跳</strong>就是使用Three.js引擎开发的<br>开发3D类的H5小游戏或者微信小游戏，Three.js引擎是非常好的选择噢<br>无需下载，方便传播，目前的生态非常和小游戏开发。</p>
<h3 id="科教领域"><a href="#科教领域" class="headerlink" title="科教领域"></a>科教领域</h3><p>在科教领域通过3D方式展示特定的知识相比较图像更为直观。<br><a href="http://www.rcsb.org/3d-view/2JEN/1?_blank" target="_blank" rel="noopener">科研平台-蛋白质结构可视化案例</a><br><a href="http://www.yanhuangxueyuan.com/3D/fenzi/index.html?_blank" target="_blank" rel="noopener">化学相关——分子结构可视化</a><br><a href="http://www.yanhuangxueyuan.com/3D/solarSystem/index.html?_blank" target="_blank" rel="noopener">地理天文相关——太阳系3D预览</a>   </p>
<h3 id="机械领域"><a href="#机械领域" class="headerlink" title="机械领域"></a>机械领域</h3><p>Onshape是一款机械领域的三维建模软件<br>如果熟悉Solidworks、UG等CAD软件，那么你可以把Onshape理解为云Solidworks。<br><a href="http://www.yanhuangxueyuan.com/3D/jixiezhuangpei/index.html?_blank" target="_blank" rel="noopener">机械模型在线预览demo</a>  </p>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>Three.js还有很多的精巧的应用场景噢<br>在这里就不一一列举了<br>感幸福的小伙伴可以到Three.js的官网案例看一看噢<br><a href="http://www.webgl3d.cn/Three.js/?_blank" target="_blank" rel="noopener">戳戳这里看更多噢</a></p>
<hr>
<h2 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h2><h3 id="Three-js资源"><a href="#Three-js资源" class="headerlink" title="Three.js资源"></a>Three.js资源</h3><p>首先看看Three.js的资源噢</p>
<p><a href="https://github.com/mrdoob/three.js/?_blank" target="_blank" rel="noopener">github链接</a><br><a href="https://threejs.org/?_blank" target="_blank" rel="noopener">Three.js官网</a><br><a href="http://www.yanhuangxueyuan.com/threejs/docs/index.html?_blank" target="_blank" rel="noopener">Three.js中文文档</a></p>
<h3 id="下载Three-js包"><a href="#下载Three-js包" class="headerlink" title="下载Three.js包"></a>下载Three.js包</h3><blockquote>
<p>可以直接从github中拉取master分支到本地噢</p>
</blockquote>
<p><strong>因为有几十M的大小，github下载threejs比较慢</strong><br><strong>所以作者在网盘放了一份，方便大家下载噢</strong><br><a href="http://www.yanhuangxueyuan.com/links.html?_blank" target="_blank" rel="noopener">网盘资源</a>  </p>
<hr>
<h1 id="初尝"><a href="#初尝" class="headerlink" title="初尝"></a>初尝</h1><p>首先跟着官网来熟悉一下Three.js的本地案例吧  </p>
<h2 id="本地初始化项目"><a href="#本地初始化项目" class="headerlink" title="本地初始化项目"></a>本地初始化项目</h2><h3 id="初始化目录结构"><a href="#初始化目录结构" class="headerlink" title="初始化目录结构"></a>初始化目录结构</h3><blockquote>
<p>创建ThreeJs文件夹<br>创建index.html文件<br>创建js文件夹<br>将下载的three.js包放入js文件夹中  </p>
</blockquote>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/2.png" class title="[left]"> 


<h2 id="案例一-第一个3D场景"><a href="#案例一-第一个3D场景" class="headerlink" title="案例一: 第一个3D场景"></a>案例一: 第一个3D场景</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个three.js文件_WebGL三维场景<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      overflow: hidden;</span><br><span class="line"><span class="css">      <span class="comment">/* 隐藏body窗口区域滚动条 */</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入three.js三维引擎--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;script src="http://www.yanhuangxueyuan.com/versions/threejsR92/build/three.js"&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/three/build/three.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;script src="http://www.yanhuangxueyuan.com/threejs/build/three.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /**</span><br><span class="line">     * 创建场景对象Scene</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</span></span><br><span class="line">    /**</span><br><span class="line">     * 创建网格模型</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="comment">// var geometry = new THREE.SphereGeometry(60, 40, 40); //创建一个球体几何对象</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>); <span class="comment">//创建一个立方体几何对象Geometry</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span></span><br><span class="line">      color: 0x0000ff</span><br><span class="line"><span class="actionscript">    &#125;); <span class="comment">//材质对象Material</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> mesh = <span class="keyword">new</span> THREE.Mesh(geometry, material); <span class="comment">//网格模型对象Mesh</span></span></span><br><span class="line"><span class="actionscript">    scene.add(mesh); <span class="comment">//网格模型添加到场景中</span></span></span><br><span class="line">    /**</span><br><span class="line">     * 光源设置</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="comment">//点光源</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> point = <span class="keyword">new</span> THREE.PointLight(<span class="number">0xffffff</span>);</span></span><br><span class="line"><span class="actionscript">    point.position.set(<span class="number">400</span>, <span class="number">200</span>, <span class="number">300</span>); <span class="comment">//点光源位置</span></span></span><br><span class="line"><span class="actionscript">    scene.add(point); <span class="comment">//点光源添加到场景中</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//环境光</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ambient = <span class="keyword">new</span> THREE.AmbientLight(<span class="number">0x444444</span>);</span></span><br><span class="line">    scene.add(ambient);</span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(scene)</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(scene.children)</span></span></span><br><span class="line">    /**</span><br><span class="line">     * 相机设置</span><br><span class="line">     */</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> width = <span class="built_in">window</span>.innerWidth; <span class="comment">//窗口宽度</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> height = <span class="built_in">window</span>.innerHeight; <span class="comment">//窗口高度</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> k = width / height; <span class="comment">//窗口宽高比</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> s = <span class="number">200</span>; <span class="comment">//三维场景显示范围控制系数，系数越大，显示的范围越大</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//创建相机对象</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.OrthographicCamera(-s * k, s * k, s, -s, <span class="number">1</span>, <span class="number">1000</span>);</span></span><br><span class="line"><span class="actionscript">    camera.position.set(<span class="number">200</span>, <span class="number">300</span>, <span class="number">200</span>); <span class="comment">//设置相机位置</span></span></span><br><span class="line"><span class="actionscript">    camera.lookAt(scene.position); <span class="comment">//设置相机方向(指向的场景对象)</span></span></span><br><span class="line">    /**</span><br><span class="line">     * 创建渲染器对象</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</span></span><br><span class="line"><span class="actionscript">    renderer.setSize(width, height);<span class="comment">//设置渲染区域尺寸</span></span></span><br><span class="line"><span class="actionscript">    renderer.setClearColor(<span class="number">0xb9d3ff</span>, <span class="number">1</span>); <span class="comment">//设置背景颜色</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(renderer.domElement); <span class="comment">//body元素中插入canvas对象</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//执行渲染操作   指定场景、相机作为参数</span></span></span><br><span class="line">    renderer.render(scene, camera);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果:  </p>
</blockquote>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/4.png" class title="[left]"> 
<hr>
<blockquote>
<p>整个程序的结构:  </p>
</blockquote>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/5.png" class title="[left]"> 

<h2 id="案例二-旋转动画、周期渲染"><a href="#案例二-旋转动画、周期渲染" class="headerlink" title="案例二: 旋转动画、周期渲染"></a>案例二: 旋转动画、周期渲染</h2><p>在案例一，已经做出了一个3D立方体的模型<br>在此基础上，我们尝试地把它旋转起来  </p>
<h3 id="周期渲染"><a href="#周期渲染" class="headerlink" title="周期渲染"></a>周期渲染</h3><blockquote>
<p>每执行一次渲染器对象WebGLRenderer的渲染方法.render()<br>浏览器就会渲染出一帧图像并显示在Web页面上，这就是说你按照一定的周期不停地调用渲染方法.render()就可以不停地生成新的图像覆盖原来的图像。<br>这也就是说只要一边旋转立方体，一边执行渲染方法.render()重新渲染，就可以实现立方体的旋转效果。</p>
</blockquote>
<p><strong>所以我们可以利用js中的定时器+render()来将3D立方体动起来</strong></p>
<blockquote>
<p>将代码:</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">renderer.render(scene,camera);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>替换为:si</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 渲染函数</span><br><span class="line">function render() &#123;</span><br><span class="line">    renderer.render(scene,camera);//执行渲染操作</span><br><span class="line">    mesh.rotateY(0.01);//每次绕y轴旋转0.01弧度</span><br><span class="line">&#125;</span><br><span class="line">//间隔20ms周期性调用函数fun,20ms也就是刷新频率是50FPS(1s/20ms)，每秒渲染50次</span><br><span class="line">setInterval(render,20);</span><br></pre></td></tr></table></figure>

<p>这里官方说<strong>调用渲染方法.render()进行渲染的渲染频率不能太低</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//设置调用render函数的周期为200ms，刷新频率相当于5你能明显的感受到卡顿</span><br><span class="line">setInterval("render()",200);</span><br></pre></td></tr></table></figure>

<h3 id="函数requestAnimationFrame"><a href="#函数requestAnimationFrame" class="headerlink" title="函数requestAnimationFrame()"></a>函数requestAnimationFrame()</h3><p>实际开发中，为了更好的利用浏览器渲染<br>可以使用函数requestAnimationFrame()代替setInterval()函数</p>
<blockquote>
<p>requestAnimationFrame()参数是将要被调用函数的函数名，requestAnimationFrame()调用一个函数不是立即调用而是向浏览器发起一个执行某函数的请求， 什么时候会执行由浏览器决定，一般默认保持60FPS的频率，大约每16.7ms调用一次requestAnimationFrame()方法指定的函数，60FPS是理想的情况下，如果渲染的场景比较复杂或者说硬件性能有限可能会低于这个频率。可以查看文章<a href="http://www.yanhuangxueyuan.com/HTML5/time.html?_blank" target="_blank" rel="noopener">《requestAnimationFrame()》</a>了解更多requestAnimationFrame()函数的知识。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function render() &#123;</span><br><span class="line">        renderer.render(scene,camera);//执行渲染操作</span><br><span class="line">        mesh.rotateY(0.01);//每次绕y轴旋转0.01弧度</span><br><span class="line">        requestAnimationFrame(render);//请求再次执行渲染函数render</span><br><span class="line">    &#125;</span><br><span class="line">render();</span><br></pre></td></tr></table></figure>

<h2 id="案例三-鼠标操作三维场景"><a href="#案例三-鼠标操作三维场景" class="headerlink" title="案例三: 鼠标操作三维场景"></a>案例三: 鼠标操作三维场景</h2><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function render() &#123;</span><br><span class="line">  renderer.render(scene,camera);//执行渲染操作</span><br><span class="line">&#125;</span><br><span class="line">render();</span><br><span class="line">var controls = new THREE.OrbitControls(camera,renderer.domElement);//创建控件对象</span><br><span class="line">controls.addEventListener('change', render);//监听鼠标、键盘事件</span><br></pre></td></tr></table></figure>
<blockquote>
<p>OrbitControls.js控件提供了一个构造函数THREE.OrbitControls()，把一个相机对象作为参数的时候，执行代码new THREE.OrbitControls(camera,renderer.domElement)，浏览器会自动检测鼠标键盘的变化， 并根据鼠标和键盘的变化更新相机对象的参数，比如你拖动鼠标左键，浏览器会检测到鼠标事件，把鼠标平移的距离按照一定算法转化为相机的的旋转角度，你可以联系生活中相机拍照,即使景物没有变化，你的相机拍摄角度发生了变化，自然渲染器渲染出的结果就变化了，通过定义监听事件controls.addEventListener(‘change’, render)，如果你连续操作鼠标，相机的参数不停的变化，同时会不停的调用渲染函数render()进行渲染，这样threejs就会使用相机新的位置或角度数据进行渲染。<br>执行构造函数THREE.OrbitControls()浏览器会同时干两件事，一是给浏览器定义了一个鼠标、键盘事件，自动检测鼠标键盘的变化，如果变化了就会自动更新相机的数据， 执行该构造函数同时会返回一个对象，可以给该对象添加一个监听事件，只要鼠标或键盘发生了变化，就会触发渲染函数。</p>
</blockquote>
<h3 id="场景操作"><a href="#场景操作" class="headerlink" title="场景操作"></a>场景操作</h3><ul>
<li>缩放：滚动—鼠标中键</li>
<li>旋转：拖动—鼠标左键</li>
<li>平移：拖动—鼠标右键</li>
</ul>
<h3 id="requestAnimationFrame-使用情况"><a href="#requestAnimationFrame-使用情况" class="headerlink" title="requestAnimationFrame()使用情况"></a>requestAnimationFrame()使用情况</h3><blockquote>
<p>如果threejs代码中通过requestAnimationFrame()实现渲染器渲染方法render()的周期性调用<br>当通过OrbitControls操作改变相机状态的时候<br>没必要在通过controls.addEventListener(‘change’, render)监听鼠标事件调用渲染函数<br>因为requestAnimationFrame()就会不停的调用渲染函数。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function render() &#123;</span><br><span class="line">  renderer.render(scene,camera);//执行渲染操作</span><br><span class="line">  // mesh.rotateY(0.01);//每次绕y轴旋转0.01弧度</span><br><span class="line">  requestAnimationFrame(render);//请求再次执行渲染函数render</span><br><span class="line">&#125;</span><br><span class="line">render();</span><br><span class="line">var controls = new THREE.OrbitControls(camera);//创建控件对象</span><br><span class="line">// 已经通过requestAnimationFrame(render);周期性执行render函数，没必要再通过监听鼠标事件执行render函数</span><br><span class="line">// controls.addEventListener('change', render)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果:</p>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/3.gif" class title="[left]"> 
</blockquote>
<p><strong>注意官方的冲突事项</strong></p>
<blockquote>
<p>注意开发中不要同时使用requestAnimationFrame()或controls.addEventListener(‘change’, render)调用同一个函数，这样会冲突。</p>
</blockquote>
<p><strong>本次初尝Three.js案例就到这里噢~相信感兴趣的小伙伴们对此也有一点认识啦</strong><br><strong>接下来的学习，就靠各位小伙伴们自行摸索啦！</strong></p>
<blockquote>
<p><a href="http://www.webgl3d.cn/Three.js/?_blank" target="_blank" rel="noopener">Three.js官网教程</a></p>
</blockquote>
<hr>
<h1 id="官方案例"><a href="#官方案例" class="headerlink" title="官方案例"></a>官方案例</h1><p>是不是初次尝试Three.js只”品味”了这几个案例不过瘾呀！<br>没关系！让我们一起看看官网优秀的案例<br>并且找到他们的源码吧！</p>
<blockquote>
<p><a href="http://www.webgl3d.cn/threejs/examples/?_blank" target="_blank" rel="noopener">Three.js官网优秀案例</a></p>
</blockquote>
<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><strong>我来安利当中几个特别不错的安利吧</strong></p>
<ul>
<li><p>gpgpu_birds</p>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/6.gif" class title="[left]">
</li>
<li><p>geometry_minecraft</p>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/7.gif" class title="[left]">
</li>
<li><p>effects_anaglyph</p>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/8.gif" class title="[left]">
</li>
<li><p>animation_skinning_morph</p>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/9.gif" class title="[left]">
</li>
<li><p>buffergeometry_drawrange</p>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/10.gif" class title="[left]">

</li>
</ul>
<blockquote>
<p>以上安利只是我自己觉得有趣的安利噢~<br>官网中有将近上百个案例<br><strong>还在等待什么！赶紧去体验下Three.js的绝妙效果吧~</strong></p>
</blockquote>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>到官网中发现了很多优秀的案例~<br>那该怎么获取到它的源码呢</p>
<p><strong>我整理了两种方法查询到它的源码噢</strong></p>
<ol>
<li>在官网的右下角有一个<strong>按钮</strong><blockquote>
<p>点击按钮即可进入github中的案例源码  </p>
</blockquote>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/11.png" class title="[left]">

</li>
</ol>
<hr>
<ol start="2">
<li>所有官网案例都可以在tree文件夹下找到<blockquote>
<p>tree &gt; examples &gt; [案例名].html</p>
</blockquote>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/12.png" class title="[left]">

</li>
</ol>
<p><strong>这样咱们就初次尝到了Tree.js的滋味啦</strong><br><strong>不得不说！这可真”鲜美”</strong></p>
<hr>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p><strong>很开心能与你们分享博客文章~</strong><br><a href="https://lin_daren.gitee.io/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/">博客原文章✨</a></p>
<hr>
<p><em>若有什么无意之举冒犯了您，麻烦联系我噢~</em><br>要是这篇文章对您有那么一丢丢的帮助<br><a href="https://gitee.com/lin_daren/lindada-blog" target="_blank" rel="noopener">博客项目✨</a>（点一下哦~）<br>花10秒钟进上边链接帮我的博客点个🌟 吧!<br>(悄悄说~ 点了🌟 的你会更加幸运de ！)</p>
<p><strong>小屋随时欢迎你们到来噢~</strong><br><strong>也欢迎各位小确幸们的批评和指正~</strong></p>
]]></content>
      <tags>
        <tag>Three</tag>
      </tags>
  </entry>
  <entry>
    <title>终于等到你！不蒜子-统计工具和萌萌哒-2D模型~</title>
    <url>/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>✨这里是林大大的小屋子~<br>小屋子也要统计访问量和访问的人数噢~<br>当然！还必不可缺少一位可爱的姑娘<br>来营造小屋中的浪漫气息噢✨</p>
<a id="more"></a>

<blockquote>
<p>先赞后看噢~<br>你们的每一个小小的赞都会给我添加无限的动力✨</p>
</blockquote>
<hr>
<h1 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h1><p>首先，咱们要统计小屋子的访问量和访问人数<br>那么就需要采用工具啦…<br>在此期间，本大大搜索了好多统计的工具<br>最后我还是选用了<strong>不蒜子统计</strong><br>这是为啥嘞~ 让我简单的说明一下吧</p>
<h2 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h2><blockquote>
<p>优点 </p>
<blockquote>
<p>稳定性、控制台展示多模块化数据、搜索来源、更多功能等等   </p>
</blockquote>
<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/1.png" class>
<p>缺点 </p>
<blockquote>
<p>实时更新速度慢<br>最新的百度统计的接口需要token值，获取这个token值有一定的要求</p>
<blockquote>
<p>如（1. 是企业账号直接获取 2.需访问量在500以上，访问IP也有一定要求）<br>总之对小型网站不太友好就是啦~   </p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="谷歌统计"><a href="#谷歌统计" class="headerlink" title="谷歌统计"></a>谷歌统计</h2><blockquote>
<p>优点</p>
<blockquote>
<p>不用说啦！更稳定、功能点更多、可视化等等</p>
</blockquote>
<p>缺点</p>
<blockquote>
<p>人家是国外的，咱们得翻墙！<br>有时候因网络，国内会各种延迟</p>
</blockquote>
</blockquote>
<h2 id="CNZZ"><a href="#CNZZ" class="headerlink" title="CNZZ"></a>CNZZ</h2><blockquote>
<p>优点</p>
<blockquote>
<p>统计功能、搜索来源、数据分析等等</p>
</blockquote>
<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/2.png" class>
<blockquote>
<p>安装容易！并且对小型站点友好噢</p>
</blockquote>
<p>缺点</p>
<blockquote>
<p>样式不好看 <strong>因引入方式特殊的原因</strong> 很难修改固定样式</p>
</blockquote>
<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/3.png" class>
<blockquote>
<p>并且数据格式固定，不能自定义改动<br>数据更新很慢（一般需要10~15分钟更新一次）</p>
</blockquote>
</blockquote>
<p>✨接下来就轮到我们今天的主角啦</p>
<h2 id="不蒜子"><a href="#不蒜子" class="headerlink" title="不蒜子"></a>不蒜子</h2><blockquote>
<p>优点</p>
<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/4.png" class>
<blockquote>
<p>简单方便、可以自定义化各种格式、实时更新数据<br>简单2步就可以安装好这个工具啦！</p>
</blockquote>
<p>缺点</p>
<blockquote>
<p>只有统计访问量、访问人数、阅读量等数据<br>不能可视化、搜索来源等各种智能功能</p>
</blockquote>
</blockquote>
<p><strong>话不多说让我们来安装不蒜子吧</strong></p>
<blockquote>
<p>1.在首页插入脚本</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.在需要的地方引入数据</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>这引入就是原生html标签啦~可以自由最大化地自定义样式！</strong></p>
<p>✨具体官方文章请查看<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子博客</a></p>
<hr>
<h1 id="萌萌哒"><a href="#萌萌哒" class="headerlink" title="萌萌哒"></a>萌萌哒</h1><p>小屋子里有个可爱的小姐姐是一种什么样的感受呢~<br>以前我应该晓不得…<br>现在！！我的感受是！！有点小爽…✨</p>
<p>给你们瞧瞧！</p>
<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/5.png" class>
<p><strong>也想在小屋子里偷偷藏一个小姐姐嘛~<br>来跟我简单走4步</strong></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>1.安装插件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.插入配置<br><strong>以hexo博客为例</strong></p>
<blockquote>
<p>在根目录的_config.yml配置文件中添加</p>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 萌萌哒</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw&#x2F;</span><br><span class="line">  pluginJsPath: lib&#x2F;</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  tagMode: false</span><br><span class="line">  log: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku</span><br><span class="line">  display:</span><br><span class="line">    position: left</span><br><span class="line">    width: 180</span><br><span class="line">    height: 360</span><br><span class="line">    top: -40px</span><br><span class="line">    right: 25px</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.安装模型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.创建配置文件</p>
<blockquote>
<p>1.在根目录下创建文件夹：live2d_models<br>2.在node_modules中搜索：hexo-helper-live2d插件<br>3.在里边查找到刚安装的模型：live2d-widget-model-shizuku<br>4.将live2d-widget-model-shizuku模型文件copy到 live2d_models文件夹下</p>
</blockquote>
</blockquote>
<p>不要忘记重启下博客服务噢<br><strong>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</strong><br>这样！！你也有一位可爱小姐姐啦~</p>
<hr>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>俗话说得好…<br>一根萝卜、一颗白菜各有所爱~<br>正巧你爱的是另一个它该怎么办…<br><strong>好办！！！</strong></p>
<p>以下是本大大辛辛苦苦找的噢</p>
<blockquote>
<p>1.选择模型</p>
</blockquote>
<ol>
<li>epsilon2_1<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/6.gif" class width="150" height="150"></li>
<li>Gantzert_Felixander<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/7.gif" class width="150" height="150"></li>
<li>haru<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/8.gif" class width="150" height="150"></li>
<li>miku<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/9.gif" class width="150" height="150"></li>
<li>ni-j<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/10.gif" class width="150" height="150"></li>
<li>nico<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/11.gif" class width="150" height="150"></li>
<li>nietzche<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/12.gif" class width="150" height="150"></li>
<li>nipsilon<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/13.gif" class width="150" height="150"></li>
<li>nito<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/14.gif" class width="150" height="150"></li>
<li>shizuku<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/15.gif" class width="150" height="150"></li>
<li>tsumiki<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/16.gif" class width="150" height="150"></li>
<li>wanko<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/17.gif" class width="150" height="150"></li>
<li>z16<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/18.gif" class width="150" height="150"></li>
<li>hibiki<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/19.gif" class width="150" height="150"></li>
<li>koharu<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/20.gif" class width="150" height="150"></li>
<li>haruto<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/21.gif" class width="150" height="150"></li>
<li>Unitychan<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/22.gif" class width="150" height="150"></li>
<li>tororo<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/23.gif" class width="150" height="150"></li>
<li>hijiki<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/24.gif" class width="150" height="150">

</li>
</ol>
<blockquote>
<p>2.安装新的模型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save live2d-widget-model-[选择的模型名]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.创建配置文件</p>
<blockquote>
<p>1.将新安装的模型文件：live2d-widget-model-[选择的模型名]模型文件<br>  copy到 live2d_models文件夹下<br>2.更改根目录的_config.yml配置文件中<br>  model: use: live2d-widget-model-[选择的模型名]</p>
</blockquote>
<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/26.png" class>
<blockquote>
<p>3.重启hexo服务</p>
</blockquote>
</blockquote>
<p><strong>这样我们的萌萌哒就大功告成了噢!</strong></p>
<hr>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p><strong>很开心能与你们分享博客文章哦~</strong><br><a href="https://lin_daren.gitee.io/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/">博客原文章✨</a></p>
<hr>
<p><em>若有什么无意之举冒犯了您，麻烦联系我噢~</em><br>要是这篇文章对您有那么一丢丢的帮助<br><a href="https://gitee.com/lin_daren/lindada-blog" target="_blank" rel="noopener">博客项目✨</a>（点一下哦~）<br>花10秒钟进上边链接帮我的博客点个🌟 吧!<br>(悄悄说~ 点了🌟 的你会更加幸运de ！)  </p>
<p><strong>小屋随时欢迎你们到来噢~</strong><br><strong>也欢迎各位小确幸们的批评和指正~</strong></p>
]]></content>
      <tags>
        <tag>busuanzi  hexo  live2d</tag>
      </tags>
  </entry>
  <entry>
    <title>带你入职的精美简历制作（免费获取高大上模版教程）</title>
    <url>/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/</url>
    <content><![CDATA[<p>古时候，我们见字如面！<br>到如今，手上的简历可谓见证我们以往的人生。<br>你是否还在对没有一份精美的简历而忧愁<br>是否羡慕那些大牛们高大上的简历<br>看完这一篇文章！<br>你也能打造属于自己的”完美简历”✨</p>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>先赞后看噢~<br>你们的每一个小小的赞都会给我添加无限的动力✨</p>
</blockquote>
<hr>
<p>为啥我要写这一篇文章呢<br>因为我也在打造自己的”完美简历”<br>为今后面试中呢<br>我手上这一块”敲门砖”可以更硬更强！<br>写一份简历其实不难，上网找简历需要注重哪些内容<br>跟着填充、优化自己的信息就好了<br>可是！单独且不花钱的情况下<br><strong>制作一份专属自己的完美简历</strong><br>实在是！是太难了！！<br>以下是我在制作属于自己简历时的痛点 </p>
<blockquote>
<ul>
<li>网上免费简历模版千篇一律，突不出重点</li>
<li>收费模版太太太贵了！并且些许固定化</li>
<li>找不到满意案例范本来完善自己的简历</li>
<li>排版没有经验，不知道怎么优化简历排版</li>
<li>大多的网上模版都花里胡哨，一点都不高大上  </li>
<li>随时下载PDF文件到本地</li>
<li>不知道怎么高大上地分享自己的作品集</li>
</ul>
</blockquote>
<p>为了解决这些痛点<br>我下定决心，查阅各种资料和网站<br>终于找到了一个很棒的制作精美简历的网站  </p>
<h1 id="CakereSume"><a href="#CakereSume" class="headerlink" title="CakereSume"></a>CakereSume</h1><p><em>很正经地声明: 作者不参杂任何广告因素噢（因为也不知道怎么收取广告费用啥的哈哈）</em></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://www.cakeresume.com/?_blank" target="_blank" rel="noopener">CakereSume</a><br>CakeResume是一个由台湾人开发、设计的线上履历表制作工具<br>它的介面单纯，操作上也不会太困难，只要选择布景主题<br>即可自行修改页面上显示的资讯栏位及相关内容<br>设定好你要使用的链结名称，就能轻松建置一个既正式又不会流于制式的个人履历!  </p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>CakeResume上有许多许多的优秀、精美的案例<br>我们简单来游览一下吧  </p>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/2.png" class title="[left]">
<br>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/3.png" class title="[left]">
<br>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/4.png" class title="[left]">

<p>这里有很多很多大牛们的优秀案例<br>虽然我们还没有实实在在的技能、项目经验、工作经历等等<br><em>慢慢地以后肯定会有的！</em><br>但我们也可以从第一步做起嘛 —— 模仿大牛的”<strong>老坛酸菜牛肉面</strong>“  </p>
<h1 id="制作完美简历"><a href="#制作完美简历" class="headerlink" title="制作完美简历"></a>制作完美简历</h1><h2 id="拥有一个CakeResume账号"><a href="#拥有一个CakeResume账号" class="headerlink" title="拥有一个CakeResume账号"></a>拥有一个CakeResume账号</h2><p>在制作前需要先拥有CakeResume网站的账号噢<br><strong>这个就自行解决啦</strong><br>CakeResume支持很多第三方登录账号噢  </p>
<h2 id="直接开始创建履历"><a href="#直接开始创建履历" class="headerlink" title="直接开始创建履历"></a>直接开始创建履历</h2><h3 id="创建空白履历"><a href="#创建空白履历" class="headerlink" title="创建空白履历"></a>创建空白履历</h3><img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/5.png" class title="[left]">
<blockquote>
<ol>
<li>首先点击右上角，进入 - 自己的主控台</li>
<li>选择左边框 - 我的履历 <em>（可以先完成自己的个人档案噢）</em>  </li>
<li>点击 - 直接制作履历</li>
</ol>
</blockquote>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/6.png" class title="[left]">
<p><strong>在这里就是属于我们的空白履历了</strong><br>右边栏有许多的模版框架<br>可以直接拖动模版来制作自己的履历啦！<br><em>不过也有一些需升级账户后才能使用的模版</em><br><strong>不用担心~ 看小编如何免费获取到大牛的范本吧</strong></p>
<hr>
<h3 id="参考精美履历"><a href="#参考精美履历" class="headerlink" title="参考精美履历"></a>参考精美履历</h3><p>怎么样查看参考大牛们的范本呢  </p>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/7.png" class title="[left]">
<blockquote>
<p>首先我们点击履历范本<br>其次在搜索框中搜索自己的领域或者职位</p>
</blockquote>
<br>

<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/8.png" class title="[left]">
<blockquote>
<p>在这里就可以看到很多相关的优秀简历范本<br>点击就可以查看详情了噢<br><strong>快快挑选自己满意的完美模版吧！</strong></p>
</blockquote>
<p><strong>那如何将模版免费套用自己的简历上呢！</strong><br>接着往下看</p>
<hr>
<h3 id="套用模版"><a href="#套用模版" class="headerlink" title="套用模版"></a>套用模版</h3><p>跟着我简单3步走噢~  </p>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/9.png" class title="[left]">
<blockquote>
<ol>
<li>点击上方小图标，进入作者简历主页 </li>
</ol>
</blockquote>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/10.png" class title="[left]">
<blockquote>
<ol start="2">
<li>打开谷歌开发者工具，选取自己满意的模块，copy下代码</li>
</ol>
</blockquote>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/11.png" class title="[left]">
<blockquote>
<ol start="3">
<li>点击左边工具栏 - 小图标，粘贴代码，点击OK</li>
</ol>
</blockquote>
<p><strong>我们这就得到了免费的模版噢！</strong><br><strong>喜欢哪个模块，就套用哪个模块</strong><br>✨ 惊不惊喜！满不满意！</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>最后我还想唠嗑几句啰嗦话哈哈<br>其实这离制作一份完美的简历还很远很远<br>尽管我们最终制作出了精美的简历排版<br>可简历其实就是我们过往人生的一张纸、电子纸<br>若是我们过往的人生既不丰富，又不精彩<br>空有一份精美的排版<br>岂不是有点心酸…  </p>
<blockquote>
<p>CakeResume官网其实还有很多的功能<br>这些优秀的功能，就靠你们各取所需啦<br>可别忘了！大牛们简历的内容<br>也是很值得我们今后人生目标参考和学习的噢！  </p>
</blockquote>
<p><strong>很开心能与你们分享博客文章~</strong><br><a href="https://lin_daren.gitee.io/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89">博客原文章✨</a></p>
<hr>
<p><em>若有什么无意之举冒犯了您，麻烦联系我噢~</em><br>要是这篇文章对您有那么一丢丢的帮助<br><a href="https://gitee.com/lin_daren/lindada-blog" target="_blank" rel="noopener">博客项目✨</a>（点一下哦~）<br>花10秒钟进上边链接帮我的博客点个🌟 吧!<br>(悄悄说~ 点了🌟 的你会更加幸运de ！)  </p>
<p><strong>小屋随时欢迎你们到来噢~</strong><br><strong>也欢迎各位小确幸们的批评和指正~</strong></p>
]]></content>
      <tags>
        <tag>简历  CakereSume</tag>
      </tags>
  </entry>
  <entry>
    <title>完美一步步解决hexo博客部署到gitee后样式bug</title>
    <url>/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/</url>
    <content><![CDATA[<p>✨将hexo博客部署成功到gitee上后<br>也可以根据gitee Pages服务成功线上访问博客<br>可是问题一个接着一个来了…</p>
<a id="more"></a>

<blockquote>
<p>先赞后看噢~<br>你们的每一个小小的赞都会给我添加无限的动力✨</p>
</blockquote>
<hr>
<h2 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h2><p>✨将hexo博客部署成功到gitee上后<br>也可以根据gitee Pages服务成功线上访问博客</p>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/1.png" class>

<blockquote>
<p><strong>可是！！本地的样式css和js文件在线上并没有加载出来!</strong></p>
</blockquote>
<ul>
<li><p>本地跑的hexo博客样式</p>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/3.png" class>
</li>
<li><p>gitee跑的hexo博客样式</p>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/2.png" class>
</li>
</ul>
<hr>
<h2 id="查找问题"><a href="#查找问题" class="headerlink" title="查找问题"></a>查找问题</h2><p>🌛这个问题是怎么导致的呢？？</p>
<ul>
<li><p>第一步：直觉打开开发者工具</p>
<blockquote>
<p>(Google) F12 或 检查</p>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/4.png" class>
<blockquote>
<p><strong>可以清楚得看到console中报了很多得错误——大致都为css和js文件没有加载出来</strong></p>
</blockquote>
</blockquote>
</li>
<li><p>第二步：为啥没有加载出来</p>
<blockquote>
<p>粘贴网站进行查看</p>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/5.png" class>
<blockquote>
<p><strong>完美地404了！！</strong></p>
</blockquote>
</blockquote>
</li>
<li><p>第三步：猜测</p>
<blockquote>
<p>这些文件应该在哪？</p>
<blockquote>
<p>查看网址的前缀仅仅只是自己gitee的主网</p>
<blockquote>
<p><a href="https://lin_daren.gitee.io/">https://lin_daren.gitee.io/</a> </p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ul>
<blockquote>
<p>可是文件应该都在这个博客项目中才对…</p>
<blockquote>
<p>将前缀添加自己项目地址变为</p>
<blockquote>
<p><a href="https://lin_daren.gitee.io/lindada-blog/{css或js文件}">https://lin_daren.gitee.io/lindada-blog/{css或js文件}</a></p>
</blockquote>
</blockquote>
<p>这样就成功访问到目标文件了！！</p>
</blockquote>
<p><strong>这样我们就成功找到样式仅在本地显示而不在gitee线上显示的原因了</strong></p>
<hr>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>上度娘去看如何hexo修改线上访问地址的前缀</p>
<p><em>简单来说只用两步</em></p>
<ul>
<li><p>1.修改_config.yml文件</p>
<blockquote>
<p>将 url: / </p>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/6.png" class>
<blockquote>
<p>修改为 rul: 图片上框的地址</p>
</blockquote>
<p>将 root: /</p>
<blockquote>
<p>修改为 root: /博客项目名称/</p>
</blockquote>
</blockquote>
</li>
<li><p>2.重新打包上传hexo</p>
<blockquote>
<p>hexo clean<br>hexo g<br>hexo d</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="再遇问题"><a href="#再遇问题" class="headerlink" title="再遇问题"></a>再遇问题</h2><p><strong>可是即便这样gitee上Pages也仍没有变化这是为什么呢</strong></p>
<blockquote>
<p>找啊找…找啊找…没找到一堆好朋友…掉几根头发…</p>
</blockquote>
<p><strong>原来是因为gitee的Pages服务是不会自动更新的需要手动更新</strong></p>
<blockquote>
<p>github 就没有这个烦恼 会自动进行更新</p>
</blockquote>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><blockquote>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/7.png" class>
<blockquote>
<p><strong>点击更新！完美解决🌟🌟</strong></p>
</blockquote>
</blockquote>
<hr>
<h2 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h2><p><strong>很开心自己能搭建好一个博客并且写好一篇博客文章哦~</strong><br><a href="https://lin_daren.gitee.io/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/">博客原文章✨</a></p>
<hr>
<p><em>若有什么无意之举冒犯了您，麻烦联系我噢~</em><br>要是这篇文章对您有那么一丢丢的帮助<br><a href="https://gitee.com/lin_daren/lindada-blog" target="_blank" rel="noopener">博客项目✨</a>（点一下哦~）<br>花10秒钟进上边链接帮我的博客点个🌟 吧!<br>(悄悄说~ 点了🌟 的你会更加幸运de ！)  </p>
<p><strong>小屋随时欢迎你们到来噢~</strong><br><strong>也欢迎各位小确幸们的批评和指正~</strong></p>
]]></content>
      <tags>
        <tag>block  hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>小屋的第一份惊喜</title>
    <url>/lindada-blog/2020/06/12/%E5%B0%8F%E5%B1%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E4%BB%BD%E6%83%8A%E5%96%9C/</url>
    <content><![CDATA[<p>写了好多hexo中的标签🌰<br>滴滴滴滴~</p>
<a id="more"></a>
<h1 id="将hexo博客常用的格式🌰放入呀"><a href="#将hexo博客常用的格式🌰放入呀" class="headerlink" title="将hexo博客常用的格式🌰放入呀~"></a>将hexo博客常用的格式🌰放入呀~</h1><hr>
<h2 id="报块～～"><a href="#报块～～" class="headerlink" title="报块～～"></a>报块～～</h2><h3 id="1-在帖子中添加引号，并带有可选的作者，来源和标题信息"><a href="#1-在帖子中添加引号，并带有可选的作者，来源和标题信息" class="headerlink" title="1.在帖子中添加引号，并带有可选的作者，来源和标题信息"></a>1.在帖子中添加引号，并带有可选的作者，来源和标题信息</h3><blockquote><p>content</p>
<footer><strong>[author[</strong><cite>source]] [link] [source_link_title]</cite></footer></blockquote>

<h3 id="2-没有参数。普通的blockquote"><a href="#2-没有参数。普通的blockquote" class="headerlink" title="2.没有参数。普通的blockquote"></a>2.没有参数。普通的blockquote</h3><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>

<h3 id="3-从书中引用"><a href="#3-从书中引用" class="headerlink" title="3.从书中引用"></a>3.从书中引用</h3><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>

<h3 id="4-语法突出显示功能"><a href="#4-语法突出显示功能" class="headerlink" title="4.语法突出显示功能"></a>4.语法突出显示功能</h3><p>{％blockquote @DevDocs <a href="https://twitter.com/devdocs/status/356095192085962752％}" target="_blank" rel="noopener">https://twitter.com/devdocs/status/356095192085962752％}</a><br>新功能：DevDocs现在带有语法高亮功能。<a href="http://devdocs.io" target="_blank" rel="noopener">http://devdocs.io</a><br>{％endblockquote％}</p>
<h3 id="5-引用网络上的文章"><a href="#5-引用网络上的文章" class="headerlink" title="5.引用网络上的文章"></a>5.引用网络上的文章</h3><p>{％blockquote塞斯·戈丁（Seth Godin）<a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html欢迎来到岛内营销％}" target="_blank" rel="noopener">http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html欢迎来到岛内营销％}</a><br>每次互动都是宝贵的，也是一次欢愉的机会。<br>{％endblockquote％}</p>
<hr>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="1-普通代码块"><a href="#1-普通代码块" class="headerlink" title="1.普通代码块"></a>1.普通代码块</h3><p>{％codeblock％}<br>alert（’Hello World！’）;<br>{％endcodeblock％}</p>
<h3 id="2-指定语言如objc"><a href="#2-指定语言如objc" class="headerlink" title="2.指定语言如objc"></a>2.指定语言如objc</h3><p>{％codeblock lang：objc％}<br>[矩形setX：10 y：10宽度：20高度：20]；<br>{％endcodeblock％}</p>
<h3 id="3-在代码块中添加标题"><a href="#3-在代码块中添加标题" class="headerlink" title="3.在代码块中添加标题"></a>3.在代码块中添加标题</h3><p>{％codeblock Array.map％}<br>array.map（callback [，thisArg]）<br>{％endcodeblock％}</p>
<h3 id="4-添加标题和URL"><a href="#4-添加标题和URL" class="headerlink" title="4.添加标题和URL"></a>4.添加标题和URL</h3><p>{％codeblock _.compact <a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">http://underscorejs.org/#compact</a> Underscore.js％}<br>_.compact（[0，1，false，2，``，3]）;<br>=&gt; [1、2、3]<br>{％endcodeblock％}</p>
<h2 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h2><p>这与使用代码块相同，但是使用三个反引号来分隔该块。<br><code>[语言] [标题] [URL] [链接文本]代码段</code></p>
<hr>
<h2 id="拉报价"><a href="#拉报价" class="headerlink" title="拉报价"></a>拉报价</h2><p>{％pullquote [class]％}<br>内容<br>{％endpullquote％}</p>
<hr>
<h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><iframe scrolling="no" width="[width]" height="[height]" src="https://jsfiddle.net/shorttag/embedded/[tabs]/[skin]" frameborder="0" loading="lazy" allowfullscreen></iframe>
<hr>
<h2 id="要旨"><a href="#要旨" class="headerlink" title="要旨"></a>要旨</h2><p>嵌入要点代码段：</p>
<script src="//gist.github.com/gist_id.js?file=[filename]"></script>
<hr>
<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>嵌入iframe：</p>
<iframe src="url" width="[width]" height="[height]" frameborder="0" loading="lazy" allowfullscreen></iframe>
<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>插入具有指定尺寸的图像。</p>
<img src="/lindada-blog/path/to/image" class="[class names]" title="[width] [height] " alt="title text">
<hr>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>插入具有target=”_blank”属性的链接。</p>
<a href title target>text url [external] [title]</a>
<hr>
<h2 id="包含代码"><a href="#包含代码" class="headerlink" title="包含代码~"></a>包含代码<del>~</del></h2><p>在source/downloads/code文件夹中插入代码段。可以通过code_dir配置中的选项指定文件夹位置。</p>


<h3 id="嵌入test-js的全部内容"><a href="#嵌入test-js的全部内容" class="headerlink" title="嵌入test.js的全部内容"></a>嵌入test.js的全部内容</h3><p>{％include_code lang：javascript test.js％}</p>
<h3 id="仅嵌入第3行"><a href="#仅嵌入第3行" class="headerlink" title="仅嵌入第3行"></a>仅嵌入第3行</h3><p>{％include_code lang：javascript from：3 to：3 test.js％}</p>
<h3 id="嵌入第5至8行"><a href="#嵌入第5至8行" class="headerlink" title="嵌入第5至8行"></a>嵌入第5至8行</h3><p>{％include_code lang：javascript from：5 to：8 test.js％}</p>
<h3 id="将第5行嵌入到文件末尾"><a href="#将第5行嵌入到文件末尾" class="headerlink" title="将第5行嵌入到文件末尾"></a>将第5行嵌入到文件末尾</h3><p>{％include_code lang：javascript from：5 test.js％}</p>
<h3 id="嵌入第1至8行"><a href="#嵌入第1至8行" class="headerlink" title="嵌入第1至8行"></a>嵌入第1至8行</h3><h2 id="％include-code-lang：javascript-to：8-test-js％"><a href="#％include-code-lang：javascript-to：8-test-js％" class="headerlink" title="{％include_code lang：javascript to：8 test.js％}"></a>{％include_code lang：javascript to：8 test.js％}</h2><h2 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube"></a>YouTube</h2><p>插入YouTube视频。<br>{％youtube video_id％}</p>
<hr>
<h2 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h2><p>插入自适应或指定大小的Vimeo视频。<br>{％vimeo video_id [宽度] [高度]％}</p>
<hr>
<h2 id="包括帖子"><a href="#包括帖子" class="headerlink" title="包括帖子"></a>包括帖子</h2><p>包括指向其他​​帖子的链接。<br>{％post_path文件名％}<br>{％post_link文件名[标题] [转义]％}</p>
<h3 id="转义标题"><a href="#转义标题" class="headerlink" title="转义标题"></a>转义标题</h3><p>{％post_link hexo-4-released’如何在标题中使用<b>标记’％}</b></p>
<h3 id="不要逃脱标题"><a href="#不要逃脱标题" class="headerlink" title="不要逃脱标题"></a>不要逃脱标题</h3><h2 id="％post-link-hexo-4-released’粗体-lt-b-gt-自定义标题’false％"><a href="#％post-link-hexo-4-released’粗体-lt-b-gt-自定义标题’false％" class="headerlink" title="{％post_link hexo-4-released’粗体&lt;/ b&gt;自定义标题’false％}"></a>{％post_link hexo-4-released’<b>粗体&lt;/ b&gt;自定义标题’false％}</b></h2><h2 id="包括资产"><a href="#包括资产" class="headerlink" title="包括资产"></a>包括资产</h2><p>{％asset_path文件名％}<br>{％asset_img文件名[标题]％}<br>{％asset_link文件名[标题] [转义]％}</p>
<hr>
<h2 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h2><p>如果某些内容导致帖子中的处理问题，请使用raw标记将其包裹起来，以避免呈现错误。<br>{％原始％}的<br>含量<br>{％endraw％}</p>
<hr>
<h2 id="摘录后"><a href="#摘录后" class="headerlink" title="摘录后"></a>摘录后</h2><p>使用<!-- more -->标签前面的文字作为帖子的摘录。如果已指定，则最重要的excerpt:值将优先。<br>Lorem ipsum dolor坐镇，奉献自若，sius do eiusmod tempor incididunt ut Labore et dolore magna aliqua。<br>&lt;！-更多-&gt;<br>尽量减少使用veniam，不要进行任何锻炼，而要获得commodo的结果。Duis aute irure dolor in reprehenderit in volttable velit esse cillum dolore eu fugiat nulla pariatur。不擅长于圣人的情节，应在负责任的犯罪活动中动手</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
