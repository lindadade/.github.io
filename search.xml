<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>20200806记字节跳动首次实习面试</title>
    <url>/lindada-blog/2020/08/06/20200806%E8%AE%B0%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%A6%96%E6%AC%A1%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/08/06/20200806%E8%AE%B0%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%A6%96%E6%AC%A1%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/3.png" class>  

<h1 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h1><p>自暑假以来，不明而来的焦虑感，总想做点什么，便在做完实验室项目后开始规划自己实习之路<br>在期间一直很喜欢字节跳动这个氛围，便一直朝着方向努力<br>每天刷刷算法题，系统规划知识点，再看看学习视频扩展一下  </p>
<p>在一个星期前忍不住投了一个实习的简历，昨天就加上hr的微信<br>然后今天下午5点半就开始面试（天呐阿巴阿巴阿巴第一次面试超级紧张的好吧！）<br>这两个刷了很多面经和整理自己做过项目的经历（还设计了个人介绍反复反复练呀）  </p>
<p><strong>然后面试就开始了</strong></p>
<a id="more"></a>

<h1 id="网络基础-游览器"><a href="#网络基础-游览器" class="headerlink" title="网络基础/游览器"></a>网络基础/游览器</h1><blockquote>
<ol>
<li>IOS模型</li>
<li>IP传输在哪层</li>
<li>TCP在哪层</li>
<li>HTTP在哪层</li>
<li>UDP和TCP的区别</li>
<li>HTTP的状态码</li>
<li>304请求服务器如何知道本地已缓存</li>
<li>哈希值放在哪</li>
<li>存储方式的区别（Cookie、Session Storage、Local Storage）</li>
</ol>
</blockquote>
<p>大概记得这一些</p>
<h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><blockquote>
<ol>
<li>js基础类型</li>
<li>判断数组和对象的类型</li>
<li>Object.prototype.toString.call()中的参数</li>
<li>你知道的数组的方法</li>
<li>a = [1, 2, 3] a.splice(1, 1, 2)返回的内容</li>
<li>flat的原生方法</li>
</ol>
</blockquote>
<h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1><blockquote>
<ol>
<li>box-sizing的值和代表的意思</li>
<li>三栏布局</li>
<li>让第三栏自适应</li>
</ol>
</blockquote>
<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><blockquote>
<ol>
<li>vue-router的mode值</li>
<li>vue双向绑定原理</li>
<li>Object.defineProperty有什么值</li>
</ol>
</blockquote>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><blockquote>
<ol>
<li>博客中使用的萌萌哒插件有没有看过源码</li>
<li>它是怎么跟着鼠标移动</li>
<li>两个链表有相同的一个节点，找出该节点</li>
<li>反问</li>
</ol>
</blockquote>
<h1 id="题解巩固"><a href="#题解巩固" class="headerlink" title="题解巩固"></a>题解巩固</h1><h2 id="网络基础-游览器-1"><a href="#网络基础-游览器-1" class="headerlink" title="网络基础/游览器"></a>网络基础/游览器</h2><h3 id="一-IOS模型"><a href="#一-IOS模型" class="headerlink" title="一.IOS模型"></a>一.IOS模型</h3><p>IOS七层模型（很熟的好不啦！）</p>
<blockquote>
<ol>
<li>物理层</li>
<li>数据链路层</li>
<li>网络层</li>
<li>传输层</li>
<li>会话层</li>
<li>表示层</li>
<li>应用层</li>
</ol>
</blockquote>
<p>然后我在第五层拉垮了，突然脑子空白为什么呢！！为什么就紧张了呢！是因为小姐姐的颜嘛！！没道理阿…我平时不吃这一套<br><strong>第五层第六层要注意了</strong></p>
<h3 id="二-IP传输在哪层"><a href="#二-IP传输在哪层" class="headerlink" title="二.IP传输在哪层"></a>二.IP传输在哪层</h3><blockquote>
<p>网络层</p>
</blockquote>
<p>我说了数据链路层，对不起计算机网络老师，我忘了</p>
<h3 id="三-TCP在哪层"><a href="#三-TCP在哪层" class="headerlink" title="三.TCP在哪层"></a>三.TCP在哪层</h3><blockquote>
<p>传输层</p>
</blockquote>
<h3 id="四-HTTP在哪层"><a href="#四-HTTP在哪层" class="headerlink" title="四.HTTP在哪层"></a>四.HTTP在哪层</h3><blockquote>
<p>应用层</p>
</blockquote>
<h3 id="五-UDP和TCP的区别"><a href="#五-UDP和TCP的区别" class="headerlink" title="五.UDP和TCP的区别"></a>五.UDP和TCP的区别</h3><blockquote>
<ol>
<li>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接</li>
<li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付</li>
<li>TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的，UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）</li>
<li>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信</li>
<li>TCP首部开销20字节;UDP的首部开销小，只有8个字节</li>
<li>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</li>
</ol>
</blockquote>
<p>我记得我曾经在哪看过，可是面试时就是忘了，查了一下又有印象了，自己有点糟糕</p>
<h3 id="六-HTTP的状态码"><a href="#六-HTTP的状态码" class="headerlink" title="六.HTTP的状态码"></a>六.HTTP的状态码</h3><p>点这里这里！！<a href="https://juejin.im/post/6855536658482692109?_blank" target="_blank" rel="noopener">记录常见的Http状态码</a></p>
<h3 id="七-304请求服务器如何知道本地已缓存"><a href="#七-304请求服务器如何知道本地已缓存" class="headerlink" title="七.304请求服务器如何知道本地已缓存"></a>七.304请求服务器如何知道本地已缓存</h3><p>浏览器缓存分为强缓存和协商缓存</p>
<h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><p>服务端第一次响应请求时，告知浏览器还存在本地，设定时间，时间之内还获取该资源就从本地获取。</p>
<h5 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h5><blockquote>
<p>简单地说，该字段用于控制浏览器在什么情况下直接使用本地缓存而不向服务器发送请求。一般具有以下值：<br>public: 所有内容都将被缓存<br>private: 内容只缓存到似有缓存中<br>no-cache: 所有内容都不会被缓存<br>no-store: 所有内容都不会被缓存到缓存或者internet临时文件中<br>must-revalidation/proxy-revalidation: 如果缓存的内容失效，请求必须发送到服务器/代理以进行重新验证<br>max-age=xxx( xxx is numeric ): 缓存的内容将在 xxx 秒后失效, 这个选项只在HTTP 1.1可用, 并如果和Last-Modified一起使用时, 优先级较高<br>其中最常用的属性便是 max-age, 这个字段很简单，就是浏览器在资源成功请求后的制定时间内，都将直接调用本地缓存和不会向服务器去请求数据。</p>
</blockquote>
<h5 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h5><blockquote>
<p>Expires 头部字段提供一个日期和时间，在该日期前的所有对该资源的请求都会直接使用浏览器缓存而不用向服务器请求（注意：cache-control max-age 和 s-maxage 将覆盖 Expires 头部。）<br>Expires 字段接收以下格式的值：“Expires: Sun, 08 Nov 2009 03:37:26 GMT”。<br>但是使用Expires存在服务器端时间和浏览器时间不一致的问题。</p>
</blockquote>
<p><strong>Cache-Control优先级大于Expires</strong></p>
<h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><blockquote>
<p>文件最后修改时间，服务器判断资源是否更新，未更新返回304表示not modified，浏览器从缓存加载。<br>LastModified：资源最后更新时间，随服务器返回。<br>if-modified-Since请求首部字段，通过比较两个时间判断资源是否修改。没有修改则协商缓存。</p>
</blockquote>
<p>流程：  </p>
<blockquote>
<ol>
<li><p>浏览器第一次请求资源，服务器响应，返回资源，响应头加Last-Modified。  </p>
</li>
<li><p>浏览器再次请求资源，在请求头加上if modified since，该值为上次Last-Modified的值  </p>
</li>
<li><p>服务器接受请求，将if modified since值和资源最后修改值做对比，若一致则返回304，协商缓存。</p>
</li>
</ol>
</blockquote>
<p>Etag周期性重写资源，但资源没变化，加注释等无关紧要信息。<br>用Etag区分两个资源是否一致，随response返回和请求头的if-none-match相比较，判断资源在两次请求中是否修改，未修改则协商缓存。</p>
<h3 id="八-哈希值放在哪"><a href="#八-哈希值放在哪" class="headerlink" title="八.哈希值放在哪"></a>八.哈希值放在哪</h3><p>因为上一个问题我答利用哈希值来判断是否需要读取缓存</p>
<blockquote>
<p>放在服务器中</p>
</blockquote>
<h3 id="九-存储方式的区别（Cookie、Session-Storage、Local-Storage）"><a href="#九-存储方式的区别（Cookie、Session-Storage、Local-Storage）" class="headerlink" title="九.存储方式的区别（Cookie、Session Storage、Local Storage）"></a>九.存储方式的区别（Cookie、Session Storage、Local Storage）</h3><h4 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h4><blockquote>
<p>都是保存在浏览器端、且同源的</p>
</blockquote>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><blockquote>
<ol>
<li><p>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下</p>
</li>
<li><p>存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大 </p>
</li>
<li><p>数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭 </p>
</li>
<li><p>作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的 </p>
</li>
<li><p>web Storage支持事件通知机制，可以将数据更新的通知发送给监听者 </p>
</li>
<li><p>web Storage的api接口使用更方便</p>
</li>
</ol>
</blockquote>
<h2 id="js-1"><a href="#js-1" class="headerlink" title="js"></a>js</h2><h3 id="一-js基础类型"><a href="#一-js基础类型" class="headerlink" title="一.js基础类型"></a>一.js基础类型</h3><p>点这里这里！！<a href="https://juejin.im/post/6854573210676133901?_blank" target="_blank" rel="noopener">ES6全面复习（二）隐形的技能</a></p>
<h3 id="二-判断数组和对象的类型"><a href="#二-判断数组和对象的类型" class="headerlink" title="二.判断数组和对象的类型"></a>二.判断数组和对象的类型</h3><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'大大'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'name'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### constructor</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'大大'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'name'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.constructor === <span class="built_in">Array</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.constructor === <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call"></a>Object.prototype.toString.call</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'大大'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'name'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">'[object Array]'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Object]'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>优先使用: Object.prototype.toString.call &gt; instanceof &gt; constructor</p>
<h3 id="三-Object-prototype-toString-call-中的参数"><a href="#三-Object-prototype-toString-call-中的参数" class="headerlink" title="三.Object.prototype.toString.call()中的参数"></a>三.Object.prototype.toString.call()中的参数</h3><blockquote>
<p>需要判断的参数变量</p>
</blockquote>
<p>我记得昨天我才刚理过这个方法，结果我还是忘了阿阿阿阿阿 </p>
<h3 id="四-常见数组的方法"><a href="#四-常见数组的方法" class="headerlink" title="四.常见数组的方法"></a>四.常见数组的方法</h3><p>参考了该文章 <a href="https://blog.csdn.net/U_Are_My_Halo/article/details/89321683?_blank" target="_blank" rel="noopener">数组的常用方法大全</a></p>
<h4 id="数组的增删操作（原数组不受影响）"><a href="#数组的增删操作（原数组不受影响）" class="headerlink" title="数组的增删操作（原数组不受影响）"></a>数组的增删操作（原数组不受影响）</h4><blockquote>
<p>1.join</p>
<blockquote>
<p>该方法可以将数组里的元素,通过指定的分隔符,以字符串的形式连接起来。<br>   返回值:返回一个新的字符串</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将数组用 - 符号连接起来</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> str = arr.join(<span class="string">'-'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str)  <span class="comment">//str = 1-2-3-4-5;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.split</p>
<blockquote>
<p>该方法是用过指定的分隔符,将字符串分割成数组。<br>   返回值:返回一个新的数组</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'wqz-ttj'</span>;</span><br><span class="line"><span class="keyword">let</span> arr = str.split(<span class="string">'-'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// arr=['wqz','ttj'];</span></span><br></pre></td></tr></table></figure>

<h4 id="数组的增删操作（原数组受影响）"><a href="#数组的增删操作（原数组受影响）" class="headerlink" title="数组的增删操作（原数组受影响）"></a>数组的增删操作（原数组受影响）</h4><blockquote>
<p>3.push</p>
<blockquote>
<p>该方法可以在数组的最后面,添加一个或者多个元素<br>   结构: arr.push(值)<br>   返回值:返回的是添加元素后数组的长度.</p>
</blockquote>
<p>4.pop</p>
<blockquote>
<p>该方法可以在数组的最后面,删除一个元素<br>   结构: arr.pop(值)<br>   返回值:返回的是刚才删除的元素.</p>
</blockquote>
<p>5.unshift</p>
<blockquote>
<p>该方法可以在数组的最前面,添加一个或者几个元素<br>   结构: arr.unshift(值)<br>   返回值: 返回的是添加元素后数组的长度</p>
</blockquote>
<p>6.shift</p>
<blockquote>
<p>该方法可以在数组的最前面,添加一个元素<br>   结构: arr.shift(值)<br>   返回值: 返回的是刚才删除的元素.</p>
</blockquote>
</blockquote>
<h4 id="数组的翻转和排序-改变数组"><a href="#数组的翻转和排序-改变数组" class="headerlink" title="数组的翻转和排序(改变数组)"></a>数组的翻转和排序(改变数组)</h4><blockquote>
<p>7.reverse 翻转数组</p>
<blockquote>
<p>结构:arr.reserse()  </p>
</blockquote>
<p>8.sort</p>
<blockquote>
<p>该方法可以对数组进行排序.</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">23</span>,<span class="number">122</span>,<span class="number">34</span>];</span><br><span class="line"><span class="comment">//没有参数:时按照首字符的先后排序</span></span><br><span class="line">arr.sort()<span class="comment">//arr=[1,122,2,23,3,34,4,5];</span></span><br><span class="line"><span class="comment">//有参数</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a-b;<span class="comment">//从小到大排序</span></span><br><span class="line">	<span class="keyword">return</span> b-a;<span class="comment">//从大到小排序</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="数组的拼接与截取-原数组不受影响"><a href="#数组的拼接与截取-原数组不受影响" class="headerlink" title="数组的拼接与截取(原数组不受影响)"></a>数组的拼接与截取(原数组不受影响)</h4><blockquote>
<p>9.concat</p>
<blockquote>
<p>该方法可以把两个数组里的元素拼接成一个新的数组<br>   返回值: 返回拼接后的新数组</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr = arr1.concat(arr2);  <span class="comment">//arr = [1,2,3,4,5,6];</span></span><br><span class="line">arr1.push(arr2);  <span class="comment">//arr1 = [1,2,3,[4,5,6]];</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>10.slice</p>
<blockquote>
<p>该方法可以从数组中截取指定的字段,返回出来<br>   返回值:返回截取出来的字段,放到新的数组中,不改变原数组  </p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构1:arr.slice(start,end) ;从start下标开始截取,一直到end结束,不包括end</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.slice(<span class="number">0</span>,<span class="number">3</span>)   <span class="comment">//newArr = [0,1,2];    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构2:arr.slice(start) ;从start下标开始截取,一直到最后</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.slice(<span class="number">2</span>)<span class="comment">//newArr = [2，3，4，5，6，7];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构3:arr.slice( ) ;全部截取</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.slice(<span class="number">2</span>)<span class="comment">//newArr = [0,1,2,3,4,5,6,7];</span></span><br></pre></td></tr></table></figure>

<h4 id="删除或增加元素-任意在任何位置-直接改变原数组-没有返回值"><a href="#删除或增加元素-任意在任何位置-直接改变原数组-没有返回值" class="headerlink" title="删除或增加元素(任意在任何位置,直接改变原数组,没有返回值)"></a>删除或增加元素(任意在任何位置,直接改变原数组,没有返回值)</h4><blockquote>
<p>11.splice</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构1: arr.splice(start,deletedCount) 纯删除</span></span><br><span class="line"><span class="comment">// 从start下标开始,删除几个</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">arr1.splice(<span class="number">2</span>, <span class="number">1</span>);  <span class="comment">//arr = [1,2,7,8];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构2: arr.splice(start,deletedCount,item) 替换</span></span><br><span class="line"><span class="comment">// 从start下标开始,删除几个,并在该位置添加item</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">arr2.splice(<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>);  <span class="comment">//arr = [1,2,4,7,8];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构3: arr.splice(start,0,item) 纯添加</span></span><br><span class="line"><span class="comment">// 从start下标开始,删除0个,并在该位置添加item,start开始全部往后移动</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">arr3.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);  <span class="comment">//arr = [1,2,3,4,5,6,7,8];</span></span><br></pre></td></tr></table></figure>

<h4 id="查找元素在数组中出现的位置"><a href="#查找元素在数组中出现的位置" class="headerlink" title="查找元素在数组中出现的位置"></a>查找元素在数组中出现的位置</h4><blockquote>
<p>12.indexOf</p>
<blockquote>
<p>该方法用来查找元素在数组中第一次出现的位置<br>   结构: arr.indexOf(元素)</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用来判断元素是否存在于数组中!</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> ele = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (arr.indexOf(ele) === <span class="number">-1</span>)&#123; <span class="comment">//说明元素不存在!!</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'元素不存在!'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'元素存在!'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// '元素存在!'</span></span><br></pre></td></tr></table></figure>

<h4 id="ES5新增的遍历数组方法"><a href="#ES5新增的遍历数组方法" class="headerlink" title="ES5新增的遍历数组方法"></a>ES5新增的遍历数组方法</h4><blockquote>
<p>1.forEach()</p>
<blockquote>
<p>该方法等同于for循环,没有返回值<br>item: 数组中的每一项;<br>index:item 对应的下标索引值<br>arr: 就是调用该方法的数组本身</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.forEach(<span class="function">(<span class="params">item,index,arr</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.map()</p>
<blockquote>
<p>映射,该方法使用和forEach大致相同,但是该方法有返回值,返回一个新数组,新数组的长度和原数组长度相等<br>item: 数组中的每一项;<br>index:item 对应的下标索引值<br>arr: 就是调用该方法的数组本身</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">32</span>,<span class="number">54</span>,<span class="number">6</span>,<span class="number">543</span>];</span><br><span class="line"><span class="keyword">let</span> res = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> item*<span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// res = [2, 64, 108, 12, 1084]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.filter()</p>
<blockquote>
<p>有返回值, 过滤出符合条件的元素<br>过滤出布尔类型为true的项</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> res3 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res3);  <span class="comment">// [2, 4, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">0</span>, <span class="string">""</span>, <span class="literal">false</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> res4 = arr2.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res4);  <span class="comment">// [1, 3, 4]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.some</p>
<blockquote>
<p>判断数组中有没有符合条件的项(只要有,就返回true),如果一个都没有,才返回false  </p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr3 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"zs"</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">done</span>: <span class="string">"notYet"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"ls"</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"ww"</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> res5 = arr3.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.done;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res5);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>5.every</p>
<blockquote>
<p>判断数组中所有的项是否满足要求,如果全都满足,才返回true,否则返回false    </p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr3 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"zs"</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">done</span>: <span class="string">"notYet"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"ls"</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"ww"</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> res6 = arr3.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.done;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res6);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>6.find</p>
<blockquote>
<p>找到符合条件的项,并且返回第一项   </p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr4 = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">"ls"</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"zs"</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">"ww"</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> res7 = arr4.find(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.done;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res7);  <span class="comment">// [&#123; id: 1, name: "zs", done: true &#125;]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>7.findIndex</p>
<blockquote>
<p>找到符合条件的项的下标,并且返回第一个  </p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr4 = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">"ls"</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"zs"</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">"ww"</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> res8 = arr4.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.done;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res8);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>8.reduce</p>
<blockquote>
<p>挺重要的方法！！</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  1.求和计算</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] ;</span><br><span class="line"><span class="keyword">let</span> new1 = arr1.reduce(<span class="function">(<span class="params">pre,next,index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> pre+next ;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(new1);  <span class="comment">// 15</span></span><br><span class="line"><span class="comment">//​ 第一次：pre–&gt;1 next–&gt;2 index–&gt;1</span></span><br><span class="line"><span class="comment">// pre+next=1+2=3</span></span><br><span class="line"><span class="comment">// 第二次：pre–&gt;3 next–&gt;3 index–&gt;2</span></span><br><span class="line"><span class="comment">// pre+next=3+3=6</span></span><br><span class="line"><span class="comment">// 第三次：pre–&gt;6 next–&gt;4 index–&gt;3</span></span><br><span class="line"><span class="comment">// pre+next=6+4=10</span></span><br><span class="line"><span class="comment">// 第四次：pre–&gt;10 next–&gt;5 index–&gt;4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.扁平化数组(拼接数组) -&gt; 等效第二个参数为1的flat方法</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>]] ;</span><br><span class="line"><span class="keyword">let</span> new2 = arr2.reduce(<span class="function">(<span class="params">pre,next,index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> pre.concat(next);	<span class="comment">//前数组拼接后数组 .concat()</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(new2);  <span class="comment">// [1,2,3,4,5,6,7]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.对象数组叠加计算</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [</span><br><span class="line">  &#123;<span class="attr">price</span>:<span class="number">10</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">price</span>:<span class="number">15</span>,<span class="attr">count</span>:<span class="number">2</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">price</span>:<span class="number">10</span>,<span class="attr">count</span>:<span class="number">3</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> new3 = arr3.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,next,index</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> pre + next.price * next.count;</span><br><span class="line">&#125;,<span class="number">0</span>)	<span class="comment">//在原数组第一项添加为0，不改变原数组，则可不操作第一项</span></span><br><span class="line"><span class="built_in">console</span>.log(new3);  <span class="comment">// 70</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.计算数组中每个元素出现的次数</span></span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Tiff'</span>, <span class="string">'Bruce'</span>, <span class="string">'Alice'</span>];</span><br><span class="line"><span class="keyword">let</span> countedNames = names.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">allNames, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (name <span class="keyword">in</span> allNames) &#123;</span><br><span class="line">    allNames[name]++;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    allNames[name] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> allNames;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(countedNames);  <span class="comment">// &#123; Alice: 2, Bob: 1, Tiff: 1, Bruce: 1 &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="五-a-1-2-3-a-splice-1-1-2-返回的内容"><a href="#五-a-1-2-3-a-splice-1-1-2-返回的内容" class="headerlink" title="五.a = [1, 2, 3] a.splice(1, 1, 2)返回的内容"></a>五.a = [1, 2, 3] a.splice(1, 1, 2)返回的内容</h3><blockquote>
<p>[1, 2]</p>
</blockquote>
<p>由于忘了第三个参数是替换参数…唉</p>
<h3 id="六-flat的原生方法"><a href="#六-flat的原生方法" class="headerlink" title="六.flat的原生方法"></a>六.flat的原生方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [[<span class="number">0</span>,[<span class="number">19</span>,<span class="number">42</span>,<span class="number">3</span>],<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,[[<span class="number">9</span>,<span class="number">5</span>],<span class="number">10</span>,<span class="number">12</span>],<span class="number">6</span>],<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype._flat = <span class="function"><span class="keyword">function</span>(<span class="params">num = <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(<span class="keyword">this</span>))&#123;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; num;i++)&#123;</span><br><span class="line">            _this = [].concat(..._this);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> _this;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arr._flat(<span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<p>我写的很简陋</p>
<h2 id="css-1"><a href="#css-1" class="headerlink" title="css"></a>css</h2><h3 id="一-box-sizing的值和代表的意思"><a href="#一-box-sizing的值和代表的意思" class="headerlink" title="一.box-sizing的值和代表的意思"></a>一.box-sizing的值和代表的意思</h3><blockquote>
<p>两个值  </p>
<ol>
<li>content-box</li>
<li>border-box</li>
</ol>
</blockquote>
<p><strong>主要就是width和height的不同</strong></p>
<h4 id="content-box"><a href="#content-box" class="headerlink" title="content-box"></a>content-box</h4><p>W3C盒子模型</p>
<img src="/lindada-blog/2020/08/06/20200806%E8%AE%B0%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%A6%96%E6%AC%A1%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/1.png" class>  

<h4 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a>border-box</h4><p>IE盒子模型</p>
<img src="/lindada-blog/2020/08/06/20200806%E8%AE%B0%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%A6%96%E6%AC%A1%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/2.png" class> 

<h3 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h3><p>我是在这里学习的<br><a href="https://juejin.im/post/6844903881772630024#heading-11?_blank" target="_blank" rel="noopener">面试之道之 CSS 布局</a></p>
<h3 id="让第三栏自适应"><a href="#让第三栏自适应" class="headerlink" title="让第三栏自适应"></a>让第三栏自适应</h3><p>这个我不太清楚 我答的是vh<br>help～ 小伙伴们可以跟我说一说</p>
<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><h3 id="一-vue-router的mode值"><a href="#一-vue-router的mode值" class="headerlink" title="一.vue-router的mode值"></a>一.vue-router的mode值</h3><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><blockquote>
<ol>
<li>url地址中带有#</li>
<li>不能随意的修改path地址</li>
<li>在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。</li>
</ol>
</blockquote>
<h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><blockquote>
<ol>
<li>页面刷新重新请求接口</li>
<li>可以随意修改path地址，可以进入404</li>
</ol>
</blockquote>
<p>vue-router的mode值我之前看过相关的文章，结果忘了<br>面试官还很友好的提示我页面跳转后url会在哪个地方<br>默认的明显在#后边 -&gt; 对应mode值就是hash了<br>哎…年少易忘事</p>
<h3 id="二-vue双向绑定原理"><a href="#二-vue双向绑定原理" class="headerlink" title="二.vue双向绑定原理"></a>二.vue双向绑定原理</h3><p>可以看看这里<br><a href="https://juejin.im/post/6844903601416978439?_blank" target="_blank" rel="noopener">面试官: 实现双向绑定Proxy比defineproperty优劣如何?</a></p>
<p>我要好好学习下这篇文章</p>
<h3 id="三-Object-defineProperty有什么值"><a href="#三-Object-defineProperty有什么值" class="headerlink" title="三.Object.defineProperty有什么值"></a>三.Object.defineProperty有什么值</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty?_blank" target="_blank" rel="noopener">MDN文章</a></p>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><h3 id="一-博客中使用的萌萌哒插件有没有看过源码"><a href="#一-博客中使用的萌萌哒插件有没有看过源码" class="headerlink" title="一.博客中使用的萌萌哒插件有没有看过源码"></a>一.博客中使用的萌萌哒插件有没有看过源码</h3><p><a href="https://github.com/xiazeyu/live2d-widget-models?_blank" target="_blank" rel="noopener">live2d-widget源码</a></p>
<h3 id="二-它是怎么跟着鼠标移动"><a href="#二-它是怎么跟着鼠标移动" class="headerlink" title="二.它是怎么跟着鼠标移动"></a>二.它是怎么跟着鼠标移动</h3><p>这个我也不知道难受了，查找好久都找不着，估计还得看源码<br>我感觉是Canvas + 动画</p>
<h3 id="三-两个链表有相同的一个节点，找出该节点"><a href="#三-两个链表有相同的一个节点，找出该节点" class="headerlink" title="三.两个链表有相同的一个节点，找出该节点"></a>三.两个链表有相同的一个节点，找出该节点</h3><blockquote>
<p>我自己的思路是：</p>
<ol>
<li>遍历第一个链表，设置一个特殊值  </li>
<li>遍历第二个链表，当找到这个特殊值时 -&gt; 返回该节点<br>感觉不太行</li>
</ol>
</blockquote>
<p><strong>从leetcode找到类似的题目</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双指针每个都判断一遍</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="function"><span class="keyword">function</span>(<span class="params">headA, headB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node1 = headA, node2 = headB;</span><br><span class="line">    <span class="keyword">while</span>(node1 != node2) &#123;</span><br><span class="line">        node1 = node1 !== <span class="literal">null</span> ? node1.next : headB;</span><br><span class="line">        node2 = node2 !== <span class="literal">null</span> ? node2.next : headA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="四-反问"><a href="#四-反问" class="headerlink" title="四.反问"></a>四.反问</h3><p>弱弱地问了两个问题</p>
<h4 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h4><p>1.字节跳动的产品都是以APP为主，假如我去实习的话具体体现的工作在哪儿？</p>
<h4 id="A1"><a href="#A1" class="headerlink" title="A1"></a>A1</h4><blockquote>
<ol>
<li>在平时的业务中也会有Web前端的相关业务开发的</li>
<li>APP中的页面也是基于html前端开发的</li>
<li>还会做一些后端相关的业务开发</li>
</ol>
</blockquote>
<h4 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h4><p>2.转正机会，该如何转正呢，会不会有什么流程？</p>
<h4 id="A2"><a href="#A2" class="headerlink" title="A2"></a>A2</h4><blockquote>
<p>转正好像没有特殊的形式，是一种自然而然的结果<br>当你成长了，经历了，有一定能力和担当足以面对业务时<br>你自然也就获得转正的机会了</p>
</blockquote>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>总体感觉不得不说字节跳动的面试官人儿<strong>很Nice</strong><br>!important -&gt; 面试官是一个很好看的小姐姐（天呐，更想去字节了！说不定可以找命中归宿）<br>而且很温柔，很有耐心~就是那种你说啥都会给你反馈的（简称让你安心一下）<br>在面试过程一开始不紧张（毕竟在校我也是干部）<br>后面答不上来就开始紧张了，心里想完蛋了完蛋了完蛋了</p>
<p>首次实习面试估计以凉经告终<br>有点小失望…对自己的小失望<br>很多题目自己都学习过，看过相关文章，可惜没答上来</p>
<p>不管了~ 希望自己耐得住寂寞，<strong>下次还投字节实习</strong><br>给总结未来两点方向</p>
<blockquote>
<ol>
<li><p>字节很重视基础知识 -&gt; 要下功夫</p>
</li>
<li><p>根据简历来进行考察的 -&gt; 所以简历要自己好好再琢磨琢磨</p>
</li>
<li><p>很多常见的面试题都是根据你回答的内容进行下一问 -&gt; 所以很多问题学习还得深入学习</p>
</li>
</ol>
</blockquote>
<p>加油~ ✨<br>好累…</p>
]]></content>
      <tags>
        <tag>面试小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-webpack小白拯救之路从0开始（上）</title>
    <url>/lindada-blog/2020/12/29/2021-webpack%E5%B0%8F%E7%99%BD%E6%8B%AF%E6%95%91%E4%B9%8B%E8%B7%AF%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/12/29/2021-webpack%E5%B0%8F%E7%99%BD%E6%8B%AF%E6%95%91%E4%B9%8B%E8%B7%AF%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%8A%EF%BC%89/1.png" class>  

<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">在暑假期间自己跟随教程学习webpack，一边学习一边记录学习笔记<strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">从0开始的webpack</strong>希望这一系列的文章可以让小伙伴们温故而知新噢~✨</p>

<a id="more"></a>

<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;"><strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">首先学习的是webpack基本使用</strong></p>
<h1 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 24px; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center top; background-repeat: no-repeat; background-size: 95px; line-height: 95px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 20px; color: rgb(60, 112, 198); border-bottom: 2px solid #3C7076;">webpack简介</span><span class="suffix"></span></h1>
<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)。<br>
在 webpack 看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。<br>
它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。</p>
<h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">前端资源构建工具</span><span class="suffix"></span></h2>
<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">简单来说就是将前端一系列编译处理小工具操作整合为构建工具</p>
<h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">静态模块打包器</span><span class="suffix"></span></h2>
<blockquote data-tool="mdnice编辑器" style="font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;">
<ol style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: decimal;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">webpack会从入口文件开始打包</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">记录依赖形成依赖关系树状图</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">根据依赖关系树状图引进依赖资源</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">形成一个个chunk(代码块)</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">各项处理（编译等）== 打包</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">处理好的资源文件输出出去 == bundle</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">统称为静态模块打包器</section></li></ol>
</blockquote>
<h1 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 24px; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center top; background-repeat: no-repeat; background-size: 95px; line-height: 95px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 20px; color: rgb(60, 112, 198); border-bottom: 2px solid #3C7076;">webpack五个核心概念</span><span class="suffix"></span></h1>
<h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">Entry</span><span class="suffix"></span></h2>
<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">入口(Entry)指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p>
<h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">Output</span><span class="suffix"></span></h2>
<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">输出(Output)指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p>
<h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">Loader</span><span class="suffix"></span></h2>
<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">Loader 让 webpack 能够去处理那些非JavaScript文件 (webpack 自身只理解JavaScript)<br>
—— 将非JS文件编译为webpack能看懂的</p>
<h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">Plugins</span><span class="suffix"></span></h2>
<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩， 一直到重新定义环境中的变量等。</p>
<h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">Mode</span><span class="suffix"></span></h2>
<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">模式(Mode)指示 webpack 使用相应模式的配置。</p>
<h1 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 24px; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center top; background-repeat: no-repeat; background-size: 95px; line-height: 95px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 20px; color: rgb(60, 112, 198); border-bottom: 2px solid #3C7076;">webpack的初体验</span><span class="suffix"></span></h1>
<blockquote data-tool="mdnice编辑器" style="font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;">
<p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">目录结构：<br>
— webpack的初体验<br>
— — build  -&gt; webpack打包后目录<br>
— — — build.js  -&gt; 打包后的文件<br>
— — src  -&gt; 源代码目录<br>
— — — index.js  -&gt; 入口起点文件<br>
— — — index.css  -&gt; 测试css文件<br>
— — — data.json  -&gt; 测试json文件能否被处理
— package的配置文件</p>
</blockquote>
<h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">初始化步骤</span><span class="suffix"></span></h2>
<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">npm init —— 初始化 package.json<br>
npm i webpack webpack-cli -G —— 全局安装webpack和脚手架<br>
npm i webpack webpack-cli -D —— 项目开发依赖安装webpack和脚手架</p>
<blockquote data-tool="mdnice编辑器" style="font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;">
<p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">若全局安装后 webpack 命令无效<br>
需要<strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">node版本&lt;8.10.0</strong>重新全局安装</p>
</blockquote>
<h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">文件代码</span><span class="suffix"></span></h2>
<h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://my-wechat.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">index.js文件</span><span class="suffix" style="display: none;"></span></h3>
<pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://my-wechat.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #f8f8f8; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #333; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #f8f8f8; border-radius: 5px;"><span class="hljs-comment" style="color: #998; font-style: italic; line-height: 26px;">/*<br>&nbsp;&nbsp;index.js:&nbsp;webpack入口起点文件<br><br>&nbsp;&nbsp;1.&nbsp;运行指令：<br>&nbsp;&nbsp;&nbsp;&nbsp;开发环境：webpack&nbsp;./src/index.js&nbsp;-o&nbsp;./build/built.js&nbsp;--mode=development<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webpack会以&nbsp;./src/index.js&nbsp;为入口文件开始打包，打包后输出到&nbsp;./build/built.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;整体打包环境，是开发环境<br>&nbsp;&nbsp;&nbsp;&nbsp;打包成功后输出的值:<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Hash值&nbsp;-&gt;&nbsp;该文件唯一Hash值（唯一ID）<br><br>&nbsp;&nbsp;&nbsp;&nbsp;生产环境：webpack&nbsp;./src/index.js&nbsp;-o&nbsp;./build/built.js&nbsp;--mode=production<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webpack会以&nbsp;./src/index.js&nbsp;为入口文件开始打包，打包后输出到&nbsp;./build/built.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;整体打包环境，是生产环境<br><br>*/</span><br><span class="hljs-comment" style="color: #998; font-style: italic; line-height: 26px;">//&nbsp;import&nbsp;'./index.css';</span><br><br><span class="hljs-comment" style="color: #998; font-style: italic; line-height: 26px;">//&nbsp;import&nbsp;data&nbsp;from&nbsp;'./data.json';</span><br><span class="hljs-comment" style="color: #998; font-style: italic; line-height: 26px;">//&nbsp;console.log(data);</span><br><br><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #333; font-weight: bold; line-height: 26px;">function</span>&nbsp;<span class="hljs-title" style="color: #900; font-weight: bold; line-height: 26px;">add</span>(<span class="hljs-params" style="line-height: 26px;">x,&nbsp;y</span>)&nbsp;</span>{<br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #333; font-weight: bold; line-height: 26px;">return</span>&nbsp;x&nbsp;+&nbsp;y;<br>}<br><br><span class="hljs-built_in" style="color: #0086b3; line-height: 26px;">console</span>.log(add(<span class="hljs-number" style="color: #008080; line-height: 26px;">1</span>,&nbsp;<span class="hljs-number" style="color: #008080; line-height: 26px;">2</span>));<br><br></code></pre>
<h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://my-wechat.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">index.css文件</span><span class="suffix" style="display: none;"></span></h3>
<pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://my-wechat.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #f8f8f8; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #333; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #f8f8f8; border-radius: 5px;"><span class="hljs-selector-tag" style="color: #333; font-weight: bold; line-height: 26px;">html</span>,<br><span class="hljs-selector-tag" style="color: #333; font-weight: bold; line-height: 26px;">body</span>&nbsp;{<br>&nbsp;&nbsp;<span class="hljs-attribute" style="color: #000080; font-weight: normal; line-height: 26px;">height</span>:&nbsp;<span class="hljs-number" style="color: #008080; line-height: 26px;">100%</span>;<br>&nbsp;&nbsp;<span class="hljs-attribute" style="color: #000080; font-weight: normal; line-height: 26px;">background-color</span>:&nbsp;pink;<br>}<br></code></pre>
<h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://my-wechat.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">data.json文件</span><span class="suffix" style="display: none;"></span></h3>
<pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://my-wechat.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #f8f8f8; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #333; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #f8f8f8; border-radius: 5px;">{<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #d14; line-height: 26px;">"name"</span>:&nbsp;<span class="hljs-string" style="color: #d14; line-height: 26px;">"jack"</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #d14; line-height: 26px;">"age"</span>:&nbsp;<span class="hljs-number" style="color: #008080; line-height: 26px;">18</span><br>}<br></code></pre>
<h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">编译打包应用</span><span class="suffix"></span></h2>
<h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://my-wechat.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">运行指令</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">开发环境指令：</p>
<blockquote data-tool="mdnice编辑器" style="font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;">
<p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">webpack src/js/index.js -o build/js/built.js --mode=development</p>
</blockquote>
<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">功能：</p>
<blockquote data-tool="mdnice编辑器" style="font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;">
<p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成 浏览器能识别的语法。</p>
</blockquote>
<h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://my-wechat.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">生产环境指令：</span><span class="suffix" style="display: none;"></span></h3>
<blockquote data-tool="mdnice编辑器" style="font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;">
<p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">webpack src/js/index.js -o build/js/built.js --mode=production</p>
</blockquote>
<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">功能：</p>
<blockquote data-tool="mdnice编辑器" style="font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;">
<p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">在开发配置功能上多一个功能，压缩代码。</p>
</blockquote>
<h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://my-wechat.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">结论</span><span class="suffix"></span></h2>
<ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><ol style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: decimal;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">webpack 能够编译打包 js 和 json 文件。</section></li></ol>
</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><ol start="2" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: decimal;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">能将 es6 的模块化语法转换成浏览器能识别的语法。</section></li></ol>
</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><ol start="3" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: decimal;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">能压缩代码。</section></li></ol>
</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><ol start="4" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: decimal;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">不能编译打包 css、img 等文件。</section></li></ol>
</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><ol start="5" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: decimal;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">不能将 js 的 es6 基本语法转化为 es5 以下语法。</section></li></ol>
</section></li></ul>

<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前边写了webpack基本使用，简单的了解背后的事和使用这个究竟要做啥子嘛<br>这一章节，重点跟随学习了开发环境的webpack配置，以及<strong>常见的文件打包配置</strong></p>
<h1 id="打包样式资源"><a href="#打包样式资源" class="headerlink" title="打包样式资源"></a>打包样式资源</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — index.js  -&gt; 入口起点文件<br>— — — index.less<br>— webpack.config.js  -&gt; webpack配置文件</p>
</blockquote>
<p><strong>webpack.config.js —— webpack的配置文件</strong></p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指示 webpack <strong>干哪些活</strong>（当你运行 webpack 指令时，会加载里面的配置）<br>所有构建工具都是基于nodejs平台运行的~<br>模块化默认采用commonjs —— module.exports = { } 暴露</p>
<h2 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入样式资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.less'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="index-less"><a href="#index-less" class="headerlink" title="index.less"></a>index.less</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  webpack.config.js  webpack的配置文件</span></span><br><span class="line"><span class="comment">    作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    所有构建工具都是基于nodejs平台运行的~模块化默认采用commonjs。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// resolve用来拼接绝对路径的方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// webpack配置</span></span><br><span class="line">  <span class="comment">// 入口起点</span></span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    filename: <span class="string">'built.js'</span>,</span><br><span class="line">    <span class="comment">// 输出路径</span></span><br><span class="line">    <span class="comment">// __dirname nodejs的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// loader的配置</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// 详细loader配置</span></span><br><span class="line">      <span class="comment">// 不同文件必须配置不同loader处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 匹配哪些文件</span></span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 使用哪些loader进行处理</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// use数组中loader执行顺序：从右到左，从下到上 依次执行</span></span><br><span class="line">          <span class="comment">// 创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="comment">// 将css文件变成commonjs模块加载js中，里面内容是样式字符串</span></span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          <span class="comment">// 将less文件编译成css文件</span></span><br><span class="line">          <span class="comment">// 需要下载 less-loader和less</span></span><br><span class="line">          <span class="string">'less-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// plugins的配置</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 详细plugins的配置</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  mode: <span class="string">'development'</span>, <span class="comment">// 开发模式</span></span><br><span class="line">  <span class="comment">// mode: 'production'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="打包html资源"><a href="#打包html资源" class="headerlink" title="打包html资源"></a>打包html资源</h1><h2 id="目录-1"><a href="#目录-1" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — index.html<br>— — — index.js  -&gt; 入口起点文件<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-1"><a href="#代码文件-1" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>hello html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js-1"><a href="#index-js-1" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-1"><a href="#webpack-config-js-1" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  loader: 1. 下载   2. 使用（配置loader）</span></span><br><span class="line"><span class="comment">  plugins: 1. 下载  2. 引入  3. 使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// plugins的配置</span></span><br><span class="line">    <span class="comment">// html-webpack-plugin</span></span><br><span class="line">    <span class="comment">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">    <span class="comment">// 需求：需要有结构的HTML文件</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 复制 './src/index.html' 文件，并自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="打包图片资源"><a href="#打包图片资源" class="headerlink" title="打包图片资源"></a>打包图片资源</h1><h2 id="目录-2"><a href="#目录-2" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — index.html<br>— — — index.js  -&gt; 入口起点文件<br>— — — index.less<br>— — — 三张图片 -&gt; 图片资源<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-2"><a href="#代码文件-2" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-html-1"><a href="#index-html-1" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./angular.jpg"</span> <span class="attr">alt</span>=<span class="string">"angular"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js-2"><a href="#index-js-2" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./index.less'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="index-less-1"><a href="#index-less-1" class="headerlink" title="index.less"></a>index.less</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box1</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">'./vue.jpg'</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box2</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">'./react.png'</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box3</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">'./angular.jpg'</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-2"><a href="#webpack-config-js-2" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="comment">// 要使用多个loader处理用use</span></span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 问题：默认处理不了html中img图片</span></span><br><span class="line">        <span class="comment">// 处理图片资源</span></span><br><span class="line">        test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">        <span class="comment">// 使用一个loader</span></span><br><span class="line">        <span class="comment">// 下载 url-loader file-loader</span></span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// 图片大小小于8kb，就会被base64处理</span></span><br><span class="line">          <span class="comment">// 优点: 减少请求数量（减轻服务器压力）</span></span><br><span class="line">          <span class="comment">// 缺点：图片体积会更大（文件请求速度更慢）</span></span><br><span class="line">          limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">          <span class="comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs</span></span><br><span class="line">          <span class="comment">// 解析时会出问题：[object Module]</span></span><br><span class="line">          <span class="comment">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span></span><br><span class="line">          esModule: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">// 给图片进行重命名</span></span><br><span class="line">          <span class="comment">// [hash:10]取图片的hash的前10位</span></span><br><span class="line">          <span class="comment">// [ext]取文件原来扩展名</span></span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        <span class="comment">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span></span><br><span class="line">        loader: <span class="string">'html-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>图片文件需要自行简单替换噢</strong></p>
<h1 id="打包其他资源"><a href="#打包其他资源" class="headerlink" title="打包其他资源"></a>打包其他资源</h1><blockquote>
<p>其他资源 -&gt; 不需要做任何处理直接调用输出的资源（如: 字体）<br>如引入阿里云字体 -&gt; <a href="https://www.iconfont.cn/webfont?spm=a313x.7781068.0.d81ec59f2#!/webfont/index" target="_blank" rel="noopener">https://www.iconfont.cn/webfont?spm=a313x.7781068.0.d81ec59f2#!/webfont/index</a></p>
</blockquote>
<h2 id="目录-3"><a href="#目录-3" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — index.html<br>— — — index.js  -&gt; 入口起点文件  </p>
<ul>
<li><ul>
<li><ul>
<li>iconfont.css  </li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>iconfont.eot  </li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>iconfont.svg  </li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>iconfont.ttf  </li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>iconfont.woff<br>— webpack.config.js  -&gt; webpack配置文件  </li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="代码文件-3"><a href="#代码文件-3" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-html-2"><a href="#index-html-2" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test2"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test3"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test1"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js-3"><a href="#index-js-3" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 iconfont 样式文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./iconfont.css'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-3"><a href="#webpack-config-js-3" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="comment">// 要使用多个loader处理用use</span></span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 问题：默认处理不了html中img图片</span></span><br><span class="line">        <span class="comment">// 处理图片资源</span></span><br><span class="line">        test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">        <span class="comment">// 使用一个loader</span></span><br><span class="line">        <span class="comment">// 下载 url-loader file-loader</span></span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// 图片大小小于8kb，就会被base64处理</span></span><br><span class="line">          <span class="comment">// 优点: 减少请求数量（减轻服务器压力）</span></span><br><span class="line">          <span class="comment">// 缺点：图片体积会更大（文件请求速度更慢）</span></span><br><span class="line">          limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">          <span class="comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs</span></span><br><span class="line">          <span class="comment">// 解析时会出问题：[object Module]</span></span><br><span class="line">          <span class="comment">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span></span><br><span class="line">          esModule: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">// 给图片进行重命名</span></span><br><span class="line">          <span class="comment">// [hash:10]取图片的hash的前10位</span></span><br><span class="line">          <span class="comment">// [ext]取文件原来扩展名</span></span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        <span class="comment">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span></span><br><span class="line">        loader: <span class="string">'html-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;<span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 打包其他资源(除了html/js/css资源以外的资源)</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 排除css/js/html资源</span></span><br><span class="line">        exclude: <span class="regexp">/\.(css|js|html|less)$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>其他文件资源可以在阿里云字体库中下载噢~或百度简单获取</strong></p>
<h1 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h1><blockquote>
<p>将打包文件来进行开发环境下的自动化编译，自动打开等等操作来提升开发效率<br>目录文件与打包其他资源基本相同<strong>更改webpack.config.js</strong></p>
</blockquote>
<h2 id="代码文件-4"><a href="#代码文件-4" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-4"><a href="#webpack-config-js-4" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 打包其他资源(除了html/js/css资源以外的资源)</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 排除css/js/html资源</span></span><br><span class="line">        exclude: <span class="regexp">/\.(css|js|html|less)$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开发服务器 devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器~~）</span></span><br><span class="line">  <span class="comment">// 特点：只会在内存中编译打包，不会有任何输出</span></span><br><span class="line">  <span class="comment">// 启动devServer指令为：npx webpack-dev-server</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="comment">// 项目构建后路径</span></span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    open: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="开发环境划分目录"><a href="#开发环境划分目录" class="headerlink" title="开发环境划分目录"></a>开发环境划分目录</h1><blockquote>
<p>将不同类型类型的文件打包整合到不同的文件夹中，提升可读性和可维护性</p>
</blockquote>
<h2 id="目录-4"><a href="#目录-4" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src -&gt; 源代码目录<br>— — — css -&gt; css文件夹<br>— — — — index.less<br>— — — imgs -&gt; 图片文件夹<br>— — — — 三张图片<br>— — — js<br>— — — — index.js<br>— — — media<br>— — — —  其他文件<br>— — — index.html<br>— webpack.config.js  -&gt; webpack配置文件</p>
</blockquote>
<h2 id="代码文件-5"><a href="#代码文件-5" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-less-2"><a href="#index-less-2" class="headerlink" title="index.less"></a>index.less</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">'../imgs/angular.jpg'</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-js-4"><a href="#index-js-4" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../css/iconfont.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../css/index.less'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<h3 id="index-html-3"><a href="#index-html-3" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>开发环境配置<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>开发环境配置<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test2"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test3"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test1"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/vue.jpg"</span> <span class="attr">alt</span>=<span class="string">"vue"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/react.png"</span> <span class="attr">alt</span>=<span class="string">"react"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-5"><a href="#webpack-config-js-5" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  开发环境配置：能让代码运行</span></span><br><span class="line"><span class="comment">    运行项目指令：</span></span><br><span class="line"><span class="comment">      webpack 会将打包结果输出出去</span></span><br><span class="line"><span class="comment">      npx webpack-dev-server 只会在内存中编译打包，没有输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理less资源</span></span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理css资源</span></span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理图片资源</span></span><br><span class="line">        test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">          <span class="comment">// 关闭es6模块化</span></span><br><span class="line">          esModule: <span class="literal">false</span>,</span><br><span class="line">          outputPath: <span class="string">'imgs'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理html中img资源</span></span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        loader: <span class="string">'html-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理其他资源</span></span><br><span class="line">        exclude: <span class="regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">          outputPath: <span class="string">'media'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// plugins的配置</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    open: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>整合前边不同类型的文件资源~</strong></p>
<h1 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h1><p>开发环境 - 能让代码本地调试运行的环境 - 自动化操作（打开、刷新、关闭等）<br>如 - 将ES6等不兼容语法编译成bundle让游览器识别、识别各个文件格式等等</p>
<p>生成环境 - 让代码优化上线 - 更快、平稳、安全<br>如 1.压缩 2.兼容 3.分割不同类型文件等等<br>这一章节，重点跟随学习了生产环境的webpack配置</p>
<h1 id="提取css成单独文件"><a href="#提取css成单独文件" class="headerlink" title="提取css成单独文件"></a>提取css成单独文件</h1><h2 id="目录-5"><a href="#目录-5" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — — css<br>— — — — — a.css<br>— — — — — b.css<br>— — — — js<br>— — — — — index.js<br>— — — — index.html<br>— webpack.config.js  -&gt; webpack配置文件</p>
</blockquote>
<h2 id="代码文件-6"><a href="#代码文件-6" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="a-css"><a href="#a-css" class="headerlink" title="a.css"></a>a.css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 引入样式资源</span><br><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="b-css"><a href="#b-css" class="headerlink" title="b.css"></a>b.css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-js-5"><a href="#index-js-5" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'../css/a.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../css/b.css'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="index-html-4"><a href="#index-html-4" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-6"><a href="#webpack-config-js-6" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 创建style标签，将样式放入</span></span><br><span class="line">          <span class="comment">// 'style-loader', </span></span><br><span class="line">          <span class="comment">// 这个loader取代style-loader。作用：提取js中的css成单独文件</span></span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="comment">// 将css文件整合到js文件中</span></span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      <span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line">      filename: <span class="string">'css/built.css'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="css兼容性处理"><a href="#css兼容性处理" class="headerlink" title="css兼容性处理"></a>css兼容性处理</h1><h2 id="目录-6"><a href="#目录-6" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — — css<br>— — — — — a.css<br>— — — — — b.css<br>— — — — js<br>— — — — — index.js<br>— — — — index.html<br>— webpack.config.js  -&gt; webpack配置文件</p>
</blockquote>
<h2 id="代码文件-7"><a href="#代码文件-7" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-7"><a href="#webpack-config-js-7" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置nodejs环境变量</span></span><br><span class="line"><span class="comment">// process.env.NODE_ENV = 'development';</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            css兼容性处理：postcss --&gt; postcss-loader postcss-preset-env</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            帮postcss找到package.json中browserslist里面的配置，通过配置加载指定的css兼容性样式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            "browserslist": &#123;</span></span><br><span class="line"><span class="comment">              // 开发环境 --&gt; 设置node环境变量：process.env.NODE_ENV = development</span></span><br><span class="line"><span class="comment">              "development": [</span></span><br><span class="line"><span class="comment">                "last 1 chrome version",</span></span><br><span class="line"><span class="comment">                "last 1 firefox version",</span></span><br><span class="line"><span class="comment">                "last 1 safari version"</span></span><br><span class="line"><span class="comment">              ],</span></span><br><span class="line"><span class="comment">              // 生产环境：默认是看生产环境</span></span><br><span class="line"><span class="comment">              "production": [</span></span><br><span class="line"><span class="comment">                "&gt;0.2%",</span></span><br><span class="line"><span class="comment">                "not dead",</span></span><br><span class="line"><span class="comment">                "not op_mini all"</span></span><br><span class="line"><span class="comment">              ]</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          <span class="comment">// 使用loader的默认配置</span></span><br><span class="line">          <span class="comment">// 'postcss-loader',</span></span><br><span class="line">          <span class="comment">// 修改loader的配置</span></span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              ident: <span class="string">'postcss'</span>,</span><br><span class="line">              plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                <span class="comment">// postcss的插件</span></span><br><span class="line">                <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/built.css'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>其余文件与上一章一致</strong></p>
<h1 id="压缩css"><a href="#压缩css" class="headerlink" title="压缩css"></a>压缩css</h1><h2 id="目录-7"><a href="#目录-7" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — — css<br>— — — — — a.css<br>— — — — — b.css<br>— — — — js<br>— — — — — index.js<br>— — — — index.html<br>— webpack.config.js  -&gt; webpack配置文件</p>
</blockquote>
<h2 id="代码文件-8"><a href="#代码文件-8" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-8"><a href="#webpack-config-js-8" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置nodejs环境变量</span></span><br><span class="line"><span class="comment">// process.env.NODE_ENV = 'development';</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              ident: <span class="string">'postcss'</span>,</span><br><span class="line">              plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                <span class="comment">// postcss的插件</span></span><br><span class="line">                <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/built.css'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 压缩css</span></span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin()</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>其余文件与上一章一致</strong></p>
<h1 id="js语法检查"><a href="#js语法检查" class="headerlink" title="js语法检查"></a>js语法检查</h1><h2 id="目录-8"><a href="#目录-8" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — js<br>— — — — index.html<br>— — — index.html<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-9"><a href="#代码文件-9" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-html-5"><a href="#index-html-5" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js-6"><a href="#index-js-6" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下一行eslint所有规则都失效（下一行不进行eslint检查）</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-9"><a href="#webpack-config-js-9" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        语法检查： eslint-loader  eslint</span></span><br><span class="line"><span class="comment">          注意：只检查自己写的源代码，第三方的库是不用检查的</span></span><br><span class="line"><span class="comment">          设置检查规则：</span></span><br><span class="line"><span class="comment">            package.json中eslintConfig中设置~</span></span><br><span class="line"><span class="comment">              "eslintConfig": &#123;</span></span><br><span class="line"><span class="comment">                "extends": "airbnb-base"</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            airbnb --&gt; eslint-config-airbnb-base  eslint-plugin-import eslint</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// 自动修复eslint的错误</span></span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="js兼容性处理"><a href="#js兼容性处理" class="headerlink" title="js兼容性处理"></a>js兼容性处理</h1><h2 id="目录-9"><a href="#目录-9" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — js<br>— — — — index.html<br>— — — index.html<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-10"><a href="#代码文件-10" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-html-6"><a href="#index-html-6" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js-7"><a href="#index-js-7" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import '@babel/polyfill';</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'定时器执行完了~'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(promise);</span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js-10"><a href="#webpack-config-js-10" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        js兼容性处理：babel-loader @babel/core </span></span><br><span class="line"><span class="comment">          1. 基本js兼容性处理 --&gt; @babel/preset-env</span></span><br><span class="line"><span class="comment">            问题：只能转换基本语法，如promise高级语法不能转换</span></span><br><span class="line"><span class="comment">          2. 全部js兼容性处理 --&gt; @babel/polyfill  </span></span><br><span class="line"><span class="comment">            问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~</span></span><br><span class="line"><span class="comment">          3. 需要做兼容性处理的就做：按需加载  --&gt; core-js</span></span><br><span class="line"><span class="comment">      */</span>  </span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="comment">// 按需加载</span></span><br><span class="line">                useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                <span class="comment">// 指定core-js版本</span></span><br><span class="line">                corejs: &#123;</span><br><span class="line">                  version: <span class="number">3</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 指定兼容性做到哪个版本浏览器</span></span><br><span class="line">                targets: &#123;</span><br><span class="line">                  chrome: <span class="string">'60'</span>,</span><br><span class="line">                  firefox: <span class="string">'60'</span>,</span><br><span class="line">                  ie: <span class="string">'9'</span>,</span><br><span class="line">                  safari: <span class="string">'10'</span>,</span><br><span class="line">                  edge: <span class="string">'17'</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="js语法检查-1"><a href="#js语法检查-1" class="headerlink" title="js语法检查"></a>js语法检查</h1><h2 id="目录-10"><a href="#目录-10" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — js<br>— — — — index.html<br>— — — index.html<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-11"><a href="#代码文件-11" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-html-7"><a href="#index-html-7" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js-8"><a href="#index-js-8" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下一行eslint所有规则都失效（下一行不进行eslint检查）</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-11"><a href="#webpack-config-js-11" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        语法检查： eslint-loader  eslint</span></span><br><span class="line"><span class="comment">          注意：只检查自己写的源代码，第三方的库是不用检查的</span></span><br><span class="line"><span class="comment">          设置检查规则：</span></span><br><span class="line"><span class="comment">            package.json中eslintConfig中设置~</span></span><br><span class="line"><span class="comment">              "eslintConfig": &#123;</span></span><br><span class="line"><span class="comment">                "extends": "airbnb-base"</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            airbnb --&gt; eslint-config-airbnb-base  eslint-plugin-import eslint</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// 自动修复eslint的错误</span></span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="js压缩"><a href="#js压缩" class="headerlink" title="js压缩"></a>js压缩</h1><h2 id="目录-11"><a href="#目录-11" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — js<br>— — — — index.html<br>— — — index.html<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-12"><a href="#代码文件-12" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-12"><a href="#webpack-config-js-12" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 生产环境下会自动压缩js代码</span></span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>其余文件与上一章一致</strong></p>
<h1 id="html压缩"><a href="#html压缩" class="headerlink" title="html压缩"></a>html压缩</h1><h2 id="目录-12"><a href="#目录-12" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — js<br>— — — — index.html<br>— — — index.html<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-13"><a href="#代码文件-13" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-13"><a href="#webpack-config-js-13" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      <span class="comment">// 压缩html代码</span></span><br><span class="line">      minify: &#123;</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>其余文件与上一章一致</strong></p>
<h1 id="js压缩-1"><a href="#js压缩-1" class="headerlink" title="js压缩"></a>js压缩</h1><h2 id="目录-13"><a href="#目录-13" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — js<br>— — — — index.html<br>— — — index.html<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-14"><a href="#代码文件-14" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-14"><a href="#webpack-config-js-14" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 生产环境下会自动压缩js代码</span></span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>其余文件与上一章一致</strong></p>
<h1 id="生产环境配置"><a href="#生产环境配置" class="headerlink" title="生产环境配置"></a>生产环境配置</h1><h2 id="目录-14"><a href="#目录-14" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-15"><a href="#代码文件-15" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-15"><a href="#webpack-config-js-15" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="string">'css-loader'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 还需要在package.json中定义browserslist</span></span><br><span class="line">    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: <span class="string">'postcss'</span>,</span><br><span class="line">      plugins: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [...commonCssLoader]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        正常来讲，一个文件只能被一个loader处理。</span></span><br><span class="line"><span class="comment">        当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span></span><br><span class="line"><span class="comment">          先执行eslint 在执行babel</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 在package.json中eslintConfig --&gt; airbnb</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                corejs: &#123;<span class="attr">version</span>: <span class="number">3</span>&#125;,</span><br><span class="line">                targets: &#123;</span><br><span class="line">                  chrome: <span class="string">'60'</span>,</span><br><span class="line">                  firefox: <span class="string">'50'</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">          outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">          esModule: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        loader: <span class="string">'html-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          outputPath: <span class="string">'media'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/built.css'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><blockquote>
<p>这里稍微复习回忆了一下生产环境的webpack配置，以及常见文件打包配置  </p>
</blockquote>
<h1 id="参考学习教程"><a href="#参考学习教程" class="headerlink" title="参考学习教程"></a>参考学习教程</h1><blockquote>
<p>Webpack4.2 -2020年</p>
</blockquote>
]]></content>
      <tags>
        <tag>webpack小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>2021寒假实习简历完善记录</title>
    <url>/lindada-blog/2021/01/18/2021%E5%AF%92%E5%81%87%E5%AE%9E%E4%B9%A0%E7%AE%80%E5%8E%86%E5%AE%8C%E5%96%84%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>因为寒假了，在大三上学期期间也一直在学习和做实验室的项目，寒假目标是读完第四版的红宝书，以及获取到一次大厂的实习经验，哪怕多几次面试经验也不错唷！<br>所以自己关注了超多实习招聘的公众号以及牛客上的各种内推还有各种大型招聘网站。<br>在期间遇到了几位真的人很好的哥哥姐姐，以此机会询问学习了目前我的实习简历该怎么进一步的修改。<br>以上，写下这篇文章作为实习简历经验记录，也可共勉哪些和我一般找实习迷茫的小可爱们呀～</p>
<a id="more"></a>

<h1 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h1><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><h3 id="内容参考点（必要）"><a href="#内容参考点（必要）" class="headerlink" title="内容参考点（必要）"></a>内容参考点（必要）</h3><blockquote>
<ul>
<li>姓名</li>
<li>职位</li>
<li>地址</li>
<li>联系方式（邮箱+电话）</li>
</ul>
</blockquote>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="内容参考点"><a href="#内容参考点" class="headerlink" title="内容参考点"></a>内容参考点</h3><blockquote>
<ul>
<li>项目熟悉度 &gt; 项目难度</li>
<li>主要解决问题</li>
<li>主要难点（突出）</li>
</ul>
</blockquote>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<ul>
<li>最好挂上链接（截图也就不需要了）</li>
<li>不在于数量，在于难点，与自己扮演角色，所遇到的问题，技术难点</li>
<li>不仅限于前端难点技术，有趣问题，有难点也可以</li>
<li>如果有个人网站！大佬们是会看的！！</li>
<li>项目需登录的（贴上账号密码）</li>
</ul>
</blockquote>
<h2 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h2><blockquote>
<p>各部分总体来看 <strong>项目 &gt; 任职经历 &gt; 荣誉 &gt; 个人性格 &gt; 掌握技能</strong><br>若是学校比较普通 <strong>那咱就弱化，不写也没关系</strong><br>篇幅 <strong>控制在一页，中间部分项目经历较好</strong></p>
</blockquote>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>以上就是近期我收到的改善建议，确实让我收获不少<br>（不说了立马完善！）<br>偷偷许愿一个好实习（有机会的大佬也希望不吝带带小弟呜呜呜～）<br><em>以上超感谢给予我意见的大大们！（手动笔芯❤️ ）</em></p>
]]></content>
      <tags>
        <tag>面试小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6全面复习（一）赋值解构</title>
    <url>/lindada-blog/2020/07/18/ES6%E5%85%A8%E9%9D%A2%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E8%B5%8B%E5%80%BC%E8%A7%A3%E6%9E%84/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/07/18/ES6%E5%85%A8%E9%9D%A2%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E8%B5%8B%E5%80%BC%E8%A7%A3%E6%9E%84/1.png" class>  
<p>开启ES6全面复习之旅<br>记录自己觉得有用且易遗忘的知识点  </p>
<p><strong>赋值解构</strong>  </p>
<blockquote>
<p>新的变量赋值方式<br>优美且简洁的代码<br>保护内容，只可读</p>
</blockquote>
<a id="more"></a>

<h1 id="赋值解构"><a href="#赋值解构" class="headerlink" title="赋值解构"></a>赋值解构</h1><h2 id="字符串解构"><a href="#字符串解构" class="headerlink" title="字符串解构"></a>字符串解构</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e, f, g] = <span class="string">"lindada"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c, d, e, f, g);  <span class="comment">// =&gt; l i n d a d a</span></span><br></pre></td></tr></table></figure>

<h2 id="数值解构"><a href="#数值解构" class="headerlink" title="数值解构"></a>数值解构</h2><blockquote>
<p>可以解构数值原型Number中的内容</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">toString</span>: s &#125; = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s);    <span class="comment">// [Function: toString]</span></span><br><span class="line"><span class="built_in">console</span>.log(s === <span class="built_in">Number</span>.prototype.toString);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="布尔解构"><a href="#布尔解构" class="headerlink" title="布尔解构"></a>布尔解构</h2><blockquote>
<p>可以解构布尔值原型Boolean中的内容</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">toString</span>: b &#125; = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);    <span class="comment">// [Function: toString]</span></span><br><span class="line"><span class="built_in">console</span>.log(b === <span class="built_in">Boolean</span>.prototype.toString);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="函数参数解构"><a href="#函数参数解构" class="headerlink" title="函数参数解构"></a>函数参数解构</h2><h3 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Func([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params">[x1, x2, x3]</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(x1, x2, x3)   <span class="comment">// 1 2 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象参数"><a href="#对象参数" class="headerlink" title="对象参数"></a>对象参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Func(&#123;</span><br><span class="line">	name: <span class="string">'大大'</span>,</span><br><span class="line">	age: <span class="number">20</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params">&#123;name, age&#125;</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(name, age)   <span class="comment">// 大大 20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c);    <span class="comment">// 0 1 2</span></span><br></pre></td></tr></table></figure>

<h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [x, y = <span class="number">2</span>] = [<span class="number">1</span>]    <span class="comment">// 默认赋值均为1</span></span><br><span class="line"><span class="built_in">console</span>.log(x, y)   <span class="comment">// 1 2</span></span><br></pre></td></tr></table></figure>

<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><h3 id="形式-1"><a href="#形式-1" class="headerlink" title="形式"></a>形式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;name, age&#125; = &#123; <span class="attr">name</span>: <span class="string">'大大'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(name, age);    <span class="comment">// 大大 20</span></span><br></pre></td></tr></table></figure>

<h3 id="默认-1"><a href="#默认-1" class="headerlink" title="默认"></a>默认</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;name, age, dream = <span class="string">'happy'</span>&#125; = &#123; <span class="attr">name</span>: <span class="string">'大大'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(name, age, dream);    <span class="comment">// 大大 20 happy</span></span><br></pre></td></tr></table></figure>

<h3 id="改名"><a href="#改名" class="headerlink" title="改名"></a>改名</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, <span class="attr">age</span>: years &#125; = &#123; <span class="attr">name</span>: <span class="string">'大大'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(name, years);    <span class="comment">// 大大 20</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="无解构变量"><a href="#无解构变量" class="headerlink" title="无解构变量"></a>无解构变量</h3><blockquote>
<p>例如对象解构</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;name, age, dream&#125; = &#123; <span class="attr">name</span>: <span class="string">'大大'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(name, age, dream)   <span class="comment">// 大大 20 undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="undefined-和-null"><a href="#undefined-和-null" class="headerlink" title="undefined 和 null"></a>undefined 和 null</h3><blockquote>
<p>无法转为对象 -&gt; 无法进行解构<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [ u1 ] = <span class="literal">undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(u1)    <span class="comment">// TypeError: undefined is not iterable</span></span><br><span class="line"><span class="keyword">const</span> &#123; u2 &#125; = <span class="literal">undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(u2)    <span class="comment">// TypeError: Cannot destructure property 'u2' of 'undefined' as it is undefined.</span></span><br><span class="line"><span class="keyword">const</span> [ n1 ] = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(n1)    <span class="comment">// TypeError: null is not iterable</span></span><br><span class="line"><span class="keyword">const</span> &#123; n2 &#125; = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(n2)    <span class="comment">// TypeError: Cannot destructure property 'n2' of 'null' as it is null.</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="解构与扩展运算符"><a href="#解构与扩展运算符" class="headerlink" title="解构与扩展运算符"></a>解构与扩展运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, ...b] = <span class="string">"lindada"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a, b);  <span class="comment">// =&gt; l [ 'i', 'n', 'd', 'a', 'd', 'a' ]</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h2><h3 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值"></a>交换变量的值</h3><blockquote>
<p>代码交换变量x和y的值，简洁，易读，语义非常清晰</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line">[x, y] = [y, x];</span><br><span class="line"><span class="built_in">console</span>.log(x, y);   <span class="comment">// 2 1</span></span><br></pre></td></tr></table></figure>

<h3 id="从函数返回多个值"><a href="#从函数返回多个值" class="headerlink" title="从函数返回多个值"></a>从函数返回多个值</h3><blockquote>
<p>函数只能返回一个值，如果要返回多个值，解构取出</p>
</blockquote>
<h4 id="返回一个数组"><a href="#返回一个数组" class="headerlink" title="返回一个数组"></a>返回一个数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = example();</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c)    <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure>

<h4 id="返回一个对象"><a href="#返回一个对象" class="headerlink" title="返回一个对象"></a>返回一个对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		name: <span class="string">'大大'</span>,</span><br><span class="line">		age: <span class="number">20</span></span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = example();</span><br><span class="line"><span class="built_in">console</span>.log(name, age)    <span class="comment">// 大大 20</span></span><br></pre></td></tr></table></figure>

<h3 id="提取-JSON-数据"><a href="#提取-JSON-数据" class="headerlink" title="提取 JSON 数据"></a>提取 JSON 数据</h3><blockquote>
<p>简洁，明了地提取 JSON 对象中的数据</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> json = &#123;</span><br><span class="line">	id: <span class="number">42</span>,</span><br><span class="line">	code: <span class="number">200</span>,</span><br><span class="line">	data: &#123;</span><br><span class="line">		name: <span class="string">"大大"</span>,</span><br><span class="line">		age: <span class="number">20</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; id, code, <span class="attr">data</span>: info &#125; = json;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id, code, info);    <span class="comment">// 42 200 &#123; name: '大大', age: 20 &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="遍历-Map-结构"><a href="#遍历-Map-结构" class="headerlink" title="遍历 Map 结构"></a>遍历 Map 结构</h3><blockquote>
<p>配合变量的解构赋值，获取键名和键值非常方便。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'name'</span>, <span class="string">'大大'</span>);</span><br><span class="line">map.set(<span class="string">'age'</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// name is 大大</span></span><br><span class="line"><span class="comment">// age is 20</span></span><br></pre></td></tr></table></figure>

<h3 id="输入模块的指定方法"><a href="#输入模块的指定方法" class="headerlink" title="输入模块的指定方法"></a>输入模块的指定方法</h3><blockquote>
<p>加载模块时，指定输入哪些方法。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; method1, method2, method3 &#125; = <span class="keyword">import</span>(xxx.js)</span><br></pre></td></tr></table></figure>

<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><blockquote>
<p>ES6全面复习（一）赋值解构<br>参考 JowayYoung 大佬的文章 - <a href="https://juejin.im/post/5d9bf530518825427b27639d#heading-4?_blank" target="_blank" rel="noopener">1.5万字概括ES6全部特性(已更新ES2020)</a></p>
</blockquote>
<p>最后想说  </p>
<ul>
<li>记录下自己复习的点点滴滴  </li>
<li>要是本文章(笔记)有任何需要修改或注意的地方，麻烦联系我噢！小编卑微整改 </li>
</ul>
<p><a href="https://lin_daren.gitee.io/lindada-blog/2020/07/18/ES6%E5%85%A8%E9%9D%A2%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E8%B5%8B%E5%80%BC%E8%A7%A3%E6%9E%84/?_blank">博客原文✨</a></p>
]]></content>
      <tags>
        <tag>ES6小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-webpack小白拯救之路从0开始（下）</title>
    <url>/lindada-blog/2020/12/29/2021-webpack%E5%B0%8F%E7%99%BD%E6%8B%AF%E6%95%91%E4%B9%8B%E8%B7%AF%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/12/29/2021-webpack%E5%B0%8F%E7%99%BD%E6%8B%AF%E6%95%91%E4%B9%8B%E8%B7%AF%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%8B%EF%BC%89/1.png" class>  

<p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">在暑假期间自己跟随教程学习webpack，一边学习一边记录学习笔记<strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">从0开始的webpack</strong>希望这一系列的文章可以让小伙伴们温故而知新噢~✨</p>

<a id="more"></a>

<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>阿巴阿巴阿巴！这个就是来进一步优化环境配置的文章！ </p>
<h1 id="章节"><a href="#章节" class="headerlink" title="章节"></a>章节</h1><p>跟随教程一共分为6个章节呢！</p>
<ul>
<li><a href="https://juejin.im/post/6866767076380377096" target="_blank" rel="noopener">1.webpack基本使用</a></li>
<li><a href="https://juejin.im/post/6867316557123420173" target="_blank" rel="noopener">2.webpack开发环境配置</a></li>
<li><a href="https://juejin.im/post/6867881388364791815/" target="_blank" rel="noopener">3.webpack生产环境配置</a></li>
<li><a href="https://juejin.im/post/6868295689143582727/" target="_blank" rel="noopener">4.webpack优化环境配置</a></li>
<li><a href="https://juejin.im/post/6869385307503591437" target="_blank" rel="noopener">5.webpack配置详解</a></li>
<li><a href="https://juejin.im/post/6871513215499501581/" target="_blank" rel="noopener">6.webpack5初认识</a></li>
</ul>
<p>关于webpack性能优化有如下几个方面  </p>
<h1 id="webpack性能优化"><a href="#webpack性能优化" class="headerlink" title="webpack性能优化"></a>webpack性能优化</h1><h2 id="开发环境性能优化"><a href="#开发环境性能优化" class="headerlink" title="开发环境性能优化"></a>开发环境性能优化</h2><ul>
<li>优化打包构建速度<ul>
<li>HMR</li>
</ul>
</li>
<li>优化代码调试<ul>
<li>source-map</li>
</ul>
</li>
</ul>
<h2 id="生产环境性能优化"><a href="#生产环境性能优化" class="headerlink" title="生产环境性能优化"></a>生产环境性能优化</h2><ul>
<li>优化打包构建速度<ul>
<li>oneOf</li>
<li>babel缓存</li>
<li>多进程打包</li>
<li>externals</li>
<li>dll</li>
</ul>
</li>
<li>优化代码运行的性能<ul>
<li>缓存(hash-chunkhash-contenthash)</li>
<li>tree shaking</li>
<li>code split</li>
<li>懒加载/预加载</li>
<li>pwa</li>
</ul>
</li>
</ul>
<h1 id="HMR"><a href="#HMR" class="headerlink" title="HMR"></a>HMR</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src -&gt; 源代码目录<br>— — — css -&gt; css文件夹<br>— — — — iconfont.css<br>— — — — index.less<br>— — — imgs -&gt; 图片文件夹<br>— — — — 三张图片<br>— — — js<br>— — — — index.js<br>— — — media<br>— — — —  其他文件<br>— — — index.html<br>— webpack.config.js  -&gt; webpack配置文件</p>
</blockquote>
<h2 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-less"><a href="#index-less" class="headerlink" title="index.less"></a>index.less</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">'../imgs/angular.jpg'</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> print <span class="keyword">from</span> <span class="string">'./print'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../css/iconfont.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../css/index.less'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'index.js文件被加载了~'</span>);</span><br><span class="line"></span><br><span class="line">print();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="comment">// 一旦 module.hot 为true，说明开启了HMR功能。 --&gt; 让HMR功能代码生效</span></span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./print.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 方法会监听 print.js 文件的变化，一旦发生变化，其他模块不会重新打包构建。</span></span><br><span class="line">    <span class="comment">// 会执行后面的回调函数</span></span><br><span class="line">    print();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="print-js"><a href="#print-js" class="headerlink" title="print.js"></a>print.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'print.js被加载了~'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="string">'hello print'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> print;</span><br></pre></td></tr></table></figure>

<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>开发环境配置<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>开发环境配置<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test2"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test3"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test1"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/vue.jpg"</span> <span class="attr">alt</span>=<span class="string">"vue"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/react.png"</span> <span class="attr">alt</span>=<span class="string">"react"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  HMR: hot module replacement 热模块替换 / 模块热替换</span></span><br><span class="line"><span class="comment">    作用：一个模块发生变化，只会重新打包这一个模块（而不是打包所有模块） </span></span><br><span class="line"><span class="comment">      极大提升构建速度</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">      样式文件：可以使用HMR功能：因为style-loader内部实现了~</span></span><br><span class="line"><span class="comment">      js文件：默认不能使用HMR功能 --&gt; 需要修改js代码，添加支持HMR功能的代码</span></span><br><span class="line"><span class="comment">        注意：HMR功能对js的处理，只能处理非入口js文件的其他文件。</span></span><br><span class="line"><span class="comment">      html文件: 默认不能使用HMR功能.同时会导致问题：html文件不能热更新了~ （不用做HMR功能）</span></span><br><span class="line"><span class="comment">        解决：修改entry入口，将html文件引入</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: [<span class="string">'./src/js/index.js'</span>, <span class="string">'./src/index.html'</span>],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理less资源</span></span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理css资源</span></span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理图片资源</span></span><br><span class="line">        test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">          <span class="comment">// 关闭es6模块化</span></span><br><span class="line">          esModule: <span class="literal">false</span>,</span><br><span class="line">          outputPath: <span class="string">'imgs'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理html中img资源</span></span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        loader: <span class="string">'html-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理其他资源</span></span><br><span class="line">        exclude: <span class="regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">          outputPath: <span class="string">'media'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// plugins的配置</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 开启HMR功能</span></span><br><span class="line">    <span class="comment">// 当修改了webpack配置，新配置要想生效，必须重新webpack服务</span></span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其他文件资源可以通过<a href="https://www.iconfont.cn/webfont?spm=a313x.7781068.0.d81ec59f2#!/webfont/index" target="_blank" rel="noopener">阿里云字体</a>下载哦</p>
</blockquote>
<h1 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h1><h2 id="目录-1"><a href="#目录-1" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src -&gt; 源代码目录<br>— — css -&gt; css文件夹<br>— — — iconfont.css<br>— — — index.less<br>— — imgs -&gt; 图片文件夹<br>— — — 三张图片<br>— — js<br>— — — index.js<br>— — media<br>— — —  其他文件<br>— — index.html<br>— webpack.config.js  -&gt; webpack配置文件</p>
</blockquote>
<h2 id="代码文件-1"><a href="#代码文件-1" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-1"><a href="#webpack-config-js-1" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: [<span class="string">'./src/js/index.js'</span>, <span class="string">'./src/index.html'</span>],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理less资源</span></span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理css资源</span></span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理图片资源</span></span><br><span class="line">        test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">          <span class="comment">// 关闭es6模块化</span></span><br><span class="line">          esModule: <span class="literal">false</span>,</span><br><span class="line">          outputPath: <span class="string">'imgs'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理html中img资源</span></span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        loader: <span class="string">'html-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理其他资源</span></span><br><span class="line">        exclude: <span class="regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">          outputPath: <span class="string">'media'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// plugins的配置</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'eval-source-map'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  source-map: 一种 提供源代码到构建后代码映射 技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    source-map：外部</span></span><br><span class="line"><span class="comment">      错误代码准确信息 和 源代码的错误位置</span></span><br><span class="line"><span class="comment">    inline-source-map：内联</span></span><br><span class="line"><span class="comment">      只生成一个内联source-map</span></span><br><span class="line"><span class="comment">      错误代码准确信息 和 源代码的错误位置</span></span><br><span class="line"><span class="comment">    hidden-source-map：外部</span></span><br><span class="line"><span class="comment">      错误代码错误原因，但是没有错误位置</span></span><br><span class="line"><span class="comment">      不能追踪源代码错误，只能提示到构建后代码的错误位置</span></span><br><span class="line"><span class="comment">    eval-source-map：内联</span></span><br><span class="line"><span class="comment">      每一个文件都生成对应的source-map，都在eval</span></span><br><span class="line"><span class="comment">      错误代码准确信息 和 源代码的错误位置</span></span><br><span class="line"><span class="comment">    nosources-source-map：外部</span></span><br><span class="line"><span class="comment">      错误代码准确信息, 但是没有任何源代码信息</span></span><br><span class="line"><span class="comment">    cheap-source-map：外部</span></span><br><span class="line"><span class="comment">      错误代码准确信息 和 源代码的错误位置 </span></span><br><span class="line"><span class="comment">      只能精确的行</span></span><br><span class="line"><span class="comment">    cheap-module-source-map：外部</span></span><br><span class="line"><span class="comment">      错误代码准确信息 和 源代码的错误位置 </span></span><br><span class="line"><span class="comment">      module会将loader的source map加入</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    内联 和 外部的区别：1. 外部生成了文件，内联没有 2. 内联构建速度更快</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    开发环境：速度快，调试更友好</span></span><br><span class="line"><span class="comment">      速度快(eval&gt;inline&gt;cheap&gt;...)</span></span><br><span class="line"><span class="comment">        eval-cheap-souce-map</span></span><br><span class="line"><span class="comment">        eval-source-map</span></span><br><span class="line"><span class="comment">      调试更友好  </span></span><br><span class="line"><span class="comment">        souce-map</span></span><br><span class="line"><span class="comment">        cheap-module-souce-map</span></span><br><span class="line"><span class="comment">        cheap-souce-map</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      --&gt; eval-source-map  / eval-cheap-module-souce-map</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    生产环境：源代码要不要隐藏? 调试要不要更友好</span></span><br><span class="line"><span class="comment">      内联会让代码体积变大，所以在生产环境不用内联</span></span><br><span class="line"><span class="comment">      nosources-source-map 全部隐藏</span></span><br><span class="line"><span class="comment">      hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      --&gt; source-map / cheap-module-souce-map</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><strong>其余文件与上一章一致</strong></p>
<h1 id="oneOf"><a href="#oneOf" class="headerlink" title="oneOf"></a>oneOf</h1><h2 id="目录-2"><a href="#目录-2" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— webpack.config.js  -&gt; webpack配置文件</p>
</blockquote>
<h2 id="代码文件-2"><a href="#代码文件-2" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-2"><a href="#webpack-config-js-2" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="string">'css-loader'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 还需要在package.json中定义browserslist</span></span><br><span class="line">    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: <span class="string">'postcss'</span>,</span><br><span class="line">      plugins: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 在package.json中eslintConfig --&gt; airbnb</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 以下loader只会匹配一个</span></span><br><span class="line">        <span class="comment">// 注意：不能有两个配置处理同一种类型文件</span></span><br><span class="line">        oneOf: [</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [...commonCssLoader]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            正常来讲，一个文件只能被一个loader处理。</span></span><br><span class="line"><span class="comment">            当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span></span><br><span class="line"><span class="comment">              先执行eslint 在执行babel</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              presets: [</span><br><span class="line">                [</span><br><span class="line">                  <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                  &#123;</span><br><span class="line">                    useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                    corejs: &#123;<span class="attr">version</span>: <span class="number">3</span>&#125;,</span><br><span class="line">                    targets: &#123;</span><br><span class="line">                      chrome: <span class="string">'60'</span>,</span><br><span class="line">                      firefox: <span class="string">'50'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">              name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">              outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">              esModule: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">            loader: <span class="string">'html-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              outputPath: <span class="string">'media'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/built.css'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="目录-3"><a href="#目录-3" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src  -&gt; 源代码目录<br>— — css<br>— — — index.css<br>— — js<br>— — — index.js<br>— — index.html<br>— server.js  -&gt; 简单的服务器文件<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-3"><a href="#代码文件-3" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-css"><a href="#index-css" class="headerlink" title="index.css"></a>index.css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="index-html-1"><a href="#index-html-1" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello cache<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js-1"><a href="#index-js-1" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'../css/index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + c, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<h3 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  服务器代码</span></span><br><span class="line"><span class="comment">  启动服务器指令：</span></span><br><span class="line"><span class="comment">    npm i nodemon -g</span></span><br><span class="line"><span class="comment">    nodemon server.js</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    node server.js</span></span><br><span class="line"><span class="comment">  访问服务器地址：</span></span><br><span class="line"><span class="comment">    http://localhost:3000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// express.static向外暴露静态资源</span></span><br><span class="line"><span class="comment">// maxAge 资源缓存的最大时间，单位ms</span></span><br><span class="line">app.use(express.static(<span class="string">'build'</span>, &#123; <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">3600</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-3"><a href="#webpack-config-js-3" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  缓存：</span></span><br><span class="line"><span class="comment">    babel缓存</span></span><br><span class="line"><span class="comment">      cacheDirectory: true</span></span><br><span class="line"><span class="comment">      --&gt; 让第二次打包构建速度更快</span></span><br><span class="line"><span class="comment">    文件资源缓存</span></span><br><span class="line"><span class="comment">      hash: 每次wepack构建时会生成一个唯一的hash值。</span></span><br><span class="line"><span class="comment">        问题: 因为js和css同时使用一个hash值。</span></span><br><span class="line"><span class="comment">          如果重新打包，会导致所有缓存失效。（可能我却只改动一个文件）</span></span><br><span class="line"><span class="comment">      chunkhash：根据chunk生成的hash值。如果打包来源于同一个chunk，那么hash值就一样</span></span><br><span class="line"><span class="comment">        问题: js和css的hash值还是一样的</span></span><br><span class="line"><span class="comment">          因为css是在js中被引入的，所以同属于一个chunk</span></span><br><span class="line"><span class="comment">      contenthash: 根据文件的内容生成hash值。不同文件hash值一定不一样    </span></span><br><span class="line"><span class="comment">      --&gt; 让代码上线运行缓存更好使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="string">'css-loader'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 还需要在package.json中定义browserslist</span></span><br><span class="line">    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: <span class="string">'postcss'</span>,</span><br><span class="line">      plugins: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 在package.json中eslintConfig --&gt; airbnb</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 以下loader只会匹配一个</span></span><br><span class="line">        <span class="comment">// 注意：不能有两个配置处理同一种类型文件</span></span><br><span class="line">        oneOf: [</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [...commonCssLoader]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            正常来讲，一个文件只能被一个loader处理。</span></span><br><span class="line"><span class="comment">            当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span></span><br><span class="line"><span class="comment">              先执行eslint 在执行babel</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              presets: [</span><br><span class="line">                [</span><br><span class="line">                  <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                  &#123;</span><br><span class="line">                    useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                    corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">                    targets: &#123;</span><br><span class="line">                      chrome: <span class="string">'60'</span>,</span><br><span class="line">                      firefox: <span class="string">'50'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              ],</span><br><span class="line">              <span class="comment">// 开启babel缓存</span></span><br><span class="line">              <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">              cacheDirectory: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">              name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">              outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">              esModule: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">            loader: <span class="string">'html-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              outputPath: <span class="string">'media'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/built.[contenthash:10].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  devtool: <span class="string">'source-map'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="js兼容性处理"><a href="#js兼容性处理" class="headerlink" title="js兼容性处理"></a>js兼容性处理</h1><h2 id="目录-4"><a href="#目录-4" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— — src  -&gt; 源代码目录<br>— — — js<br>— — — — index.html<br>— — — index.html<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-4"><a href="#代码文件-4" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-html-2"><a href="#index-html-2" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js-2"><a href="#index-js-2" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import '@babel/polyfill';</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'定时器执行完了~'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(promise);</span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js-4"><a href="#webpack-config-js-4" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        js兼容性处理：babel-loader @babel/core </span></span><br><span class="line"><span class="comment">          1. 基本js兼容性处理 --&gt; @babel/preset-env</span></span><br><span class="line"><span class="comment">            问题：只能转换基本语法，如promise高级语法不能转换</span></span><br><span class="line"><span class="comment">          2. 全部js兼容性处理 --&gt; @babel/polyfill  </span></span><br><span class="line"><span class="comment">            问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~</span></span><br><span class="line"><span class="comment">          3. 需要做兼容性处理的就做：按需加载  --&gt; core-js</span></span><br><span class="line"><span class="comment">      */</span>  </span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="comment">// 按需加载</span></span><br><span class="line">                useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                <span class="comment">// 指定core-js版本</span></span><br><span class="line">                corejs: &#123;</span><br><span class="line">                  version: <span class="number">3</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 指定兼容性做到哪个版本浏览器</span></span><br><span class="line">                targets: &#123;</span><br><span class="line">                  chrome: <span class="string">'60'</span>,</span><br><span class="line">                  firefox: <span class="string">'60'</span>,</span><br><span class="line">                  ie: <span class="string">'9'</span>,</span><br><span class="line">                  safari: <span class="string">'10'</span>,</span><br><span class="line">                  edge: <span class="string">'17'</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree shaking"></a>tree shaking</h1><h2 id="目录-5"><a href="#目录-5" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src  -&gt; 源代码目录<br>— — css<br>— — — index.css<br>— — js<br>— — — index.js<br>— — — test.js<br>— — index.html<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-5"><a href="#代码文件-5" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-css-1"><a href="#index-css-1" class="headerlink" title="index.css"></a>index.css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-html-3"><a href="#index-html-3" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js-3"><a href="#index-js-3" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mul &#125; <span class="keyword">from</span> <span class="string">'./test'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../css/index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + c, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<h3 id="test-js"><a href="#test-js" class="headerlink" title="test.js"></a>test.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-html-4"><a href="#index-html-4" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello cache<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-5"><a href="#webpack-config-js-5" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  tree shaking：去除无用代码</span></span><br><span class="line"><span class="comment">    前提：1. 必须使用ES6模块化  2. 开启production环境</span></span><br><span class="line"><span class="comment">    作用: 减少代码体积</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    在package.json中配置 </span></span><br><span class="line"><span class="comment">      "sideEffects": false 所有代码都没有副作用（都可以进行tree shaking）</span></span><br><span class="line"><span class="comment">        问题：可能会把css / @babel/polyfill （副作用）文件干掉</span></span><br><span class="line"><span class="comment">      "sideEffects": ["*.css", "*.less"]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="string">'css-loader'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 还需要在package.json中定义browserslist</span></span><br><span class="line">    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: <span class="string">'postcss'</span>,</span><br><span class="line">      plugins: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 在package.json中eslintConfig --&gt; airbnb</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 以下loader只会匹配一个</span></span><br><span class="line">        <span class="comment">// 注意：不能有两个配置处理同一种类型文件</span></span><br><span class="line">        oneOf: [</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [...commonCssLoader]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            正常来讲，一个文件只能被一个loader处理。</span></span><br><span class="line"><span class="comment">            当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span></span><br><span class="line"><span class="comment">              先执行eslint 在执行babel</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              presets: [</span><br><span class="line">                [</span><br><span class="line">                  <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                  &#123;</span><br><span class="line">                    useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                    corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">                    targets: &#123;</span><br><span class="line">                      chrome: <span class="string">'60'</span>,</span><br><span class="line">                      firefox: <span class="string">'50'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              ],</span><br><span class="line">              <span class="comment">// 开启babel缓存</span></span><br><span class="line">              <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">              cacheDirectory: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">              name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">              outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">              esModule: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">            loader: <span class="string">'html-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              outputPath: <span class="string">'media'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/built.[contenthash:10].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  devtool: <span class="string">'source-map'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="lazy-loading"><a href="#lazy-loading" class="headerlink" title="lazy loading"></a>lazy loading</h1><h2 id="目录-6"><a href="#目录-6" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src  -&gt; 源代码目录<br>— — js<br>— — — index.js<br>— — — test.js<br>— — index.html<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-6"><a href="#代码文件-6" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-js-4"><a href="#index-js-4" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'index.js文件被加载了~'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// import &#123; mul &#125; from './test';</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 懒加载~：当文件需要使用时才加载~</span></span><br><span class="line">  <span class="comment">// 预加载 prefetch：会在使用之前，提前加载js文件 </span></span><br><span class="line">  <span class="comment">// 正常加载可以认为是并行加载（同一时间加载多个文件）  </span></span><br><span class="line">  <span class="comment">// 预加载 prefetch：等其他资源加载完毕，浏览器空闲了，再偷偷加载资源</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'test', webpackPrefetch: true */</span><span class="string">'./test'</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="test-js-1"><a href="#test-js-1" class="headerlink" title="test.js"></a>test.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'test.js文件被加载了~'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-html-5"><a href="#index-html-5" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello lazy loading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="代码文件-7"><a href="#代码文件-7" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-6"><a href="#webpack-config-js-6" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 单入口</span></span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'all'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="pwa"><a href="#pwa" class="headerlink" title="pwa"></a>pwa</h1><h2 id="目录-7"><a href="#目录-7" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src  -&gt; 源代码目录<br>— — css<br>— — — index.css<br>— — js<br>— — — index.js<br>— — — test.js<br>— — index.html<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-8"><a href="#代码文件-8" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-js-5"><a href="#index-js-5" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-js-6"><a href="#index-js-6" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mul &#125; <span class="keyword">from</span> <span class="string">'./test'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../css/index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + c, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1. eslint不认识 window、navigator全局变量</span></span><br><span class="line"><span class="comment">    解决：需要修改package.json中eslintConfig配置</span></span><br><span class="line"><span class="comment">      "env": &#123;</span></span><br><span class="line"><span class="comment">        "browser": true // 支持浏览器端全局变量</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">   2. sw代码必须运行在服务器上</span></span><br><span class="line"><span class="comment">      --&gt; nodejs</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line"><span class="comment">        npm i serve -g</span></span><br><span class="line"><span class="comment">        serve -s build 启动服务器，将build目录下所有资源作为静态资源暴露出去</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 注册serviceWorker</span></span><br><span class="line"><span class="comment">// 处理兼容性问题</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">      .register(<span class="string">'/service-worker.js'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sw注册成功了~'</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sw注册失败了~'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="test-js-2"><a href="#test-js-2" class="headerlink" title="test.js"></a>test.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-html-6"><a href="#index-html-6" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello cache<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-7"><a href="#webpack-config-js-7" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> WorkboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">'workbox-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  PWA: 渐进式网络开发应用程序(离线可访问)</span></span><br><span class="line"><span class="comment">    workbox --&gt; workbox-webpack-plugin</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="string">'css-loader'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 还需要在package.json中定义browserslist</span></span><br><span class="line">    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: <span class="string">'postcss'</span>,</span><br><span class="line">      plugins: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 在package.json中eslintConfig --&gt; airbnb</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 以下loader只会匹配一个</span></span><br><span class="line">        <span class="comment">// 注意：不能有两个配置处理同一种类型文件</span></span><br><span class="line">        oneOf: [</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [...commonCssLoader]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            正常来讲，一个文件只能被一个loader处理。</span></span><br><span class="line"><span class="comment">            当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span></span><br><span class="line"><span class="comment">              先执行eslint 在执行babel</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              presets: [</span><br><span class="line">                [</span><br><span class="line">                  <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                  &#123;</span><br><span class="line">                    useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                    corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">                    targets: &#123;</span><br><span class="line">                      chrome: <span class="string">'60'</span>,</span><br><span class="line">                      firefox: <span class="string">'50'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              ],</span><br><span class="line">              <span class="comment">// 开启babel缓存</span></span><br><span class="line">              <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">              cacheDirectory: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">              name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">              outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">              esModule: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">            loader: <span class="string">'html-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              outputPath: <span class="string">'media'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/built.[contenthash:10].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> WorkboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 帮助serviceworker快速启动</span></span><br><span class="line"><span class="comment">        2. 删除旧的 serviceworker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        生成一个 serviceworker 配置文件~</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      clientsClaim: <span class="literal">true</span>,</span><br><span class="line">      skipWaiting: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  devtool: <span class="string">'source-map'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="多进程打包"><a href="#多进程打包" class="headerlink" title="多进程打包"></a>多进程打包</h1><h2 id="目录-8"><a href="#目录-8" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src  -&gt; 源代码目录<br>— — css<br>— — — index.css<br>— — js<br>— — — index.js<br>— — — test.js<br>— — index.html<br>— webpack.config.js  -&gt; webpack配置文件   </p>
</blockquote>
<h2 id="代码文件-9"><a href="#代码文件-9" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-8"><a href="#webpack-config-js-8" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> WorkboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">'workbox-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  PWA: 渐进式网络开发应用程序(离线可访问)</span></span><br><span class="line"><span class="comment">    workbox --&gt; workbox-webpack-plugin</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="string">'css-loader'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 还需要在package.json中定义browserslist</span></span><br><span class="line">    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: <span class="string">'postcss'</span>,</span><br><span class="line">      plugins: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 在package.json中eslintConfig --&gt; airbnb</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 以下loader只会匹配一个</span></span><br><span class="line">        <span class="comment">// 注意：不能有两个配置处理同一种类型文件</span></span><br><span class="line">        oneOf: [</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [...commonCssLoader]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            正常来讲，一个文件只能被一个loader处理。</span></span><br><span class="line"><span class="comment">            当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span></span><br><span class="line"><span class="comment">              先执行eslint 在执行babel</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            use: [</span><br><span class="line">              <span class="comment">/* </span></span><br><span class="line"><span class="comment">                开启多进程打包。 </span></span><br><span class="line"><span class="comment">                进程启动大概为600ms，进程通信也有开销。</span></span><br><span class="line"><span class="comment">                只有工作消耗时间比较长，才需要多进程打包</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">              &#123;</span><br><span class="line">                loader: <span class="string">'thread-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  workers: <span class="number">2</span> <span class="comment">// 进程2个</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  presets: [</span><br><span class="line">                    [</span><br><span class="line">                      <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                      &#123;</span><br><span class="line">                        useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                        corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">                        targets: &#123;</span><br><span class="line">                          chrome: <span class="string">'60'</span>,</span><br><span class="line">                          firefox: <span class="string">'50'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                    ]</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="comment">// 开启babel缓存</span></span><br><span class="line">                  <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">                  cacheDirectory: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">              name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">              outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">              esModule: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">            loader: <span class="string">'html-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              outputPath: <span class="string">'media'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/built.[contenthash:10].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> WorkboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 帮助serviceworker快速启动</span></span><br><span class="line"><span class="comment">        2. 删除旧的 serviceworker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        生成一个 serviceworker 配置文件~</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      clientsClaim: <span class="literal">true</span>,</span><br><span class="line">      skipWaiting: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  devtool: <span class="string">'source-map'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>其余文件与上一章一致</strong></p>
<h1 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h1><h2 id="目录-9"><a href="#目录-9" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src  -&gt; 源代码目录<br>— — js<br>— — — index.js<br>— — index.html<br>— webpack.config.js  -&gt; webpack配置文件   </p>
</blockquote>
<h2 id="代码文件-10"><a href="#代码文件-10" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-js-7"><a href="#index-js-7" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($);</span><br></pre></td></tr></table></figure>

<h3 id="index-html-7"><a href="#index-html-7" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>hello html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-9"><a href="#webpack-config-js-9" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  externals: &#123;</span><br><span class="line">    <span class="comment">// 拒绝jQuery被打包进来</span></span><br><span class="line">    jquery: <span class="string">'jQuery'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="dll"><a href="#dll" class="headerlink" title="dll"></a>dll</h1><h2 id="目录-10"><a href="#目录-10" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src<br>— — index.html<br>— — index.js<br>— webpack.config.js  -&gt; webpack配置文件<br>— webpack.dll.js  -&gt; dll配置文件  </p>
</blockquote>
<h2 id="代码文件-11"><a href="#代码文件-11" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-html-8"><a href="#index-html-8" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>hello dll<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js-8"><a href="#index-js-8" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($);</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-10"><a href="#webpack-config-js-10" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 告诉webpack哪些库不参与打包，同时使用时的名称也得变~</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      manifest: resolve(__dirname, <span class="string">'dll/manifest.json'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 将某个文件打包输出去，并在html中自动引入该资源</span></span><br><span class="line">    <span class="keyword">new</span> AddAssetHtmlWebpackPlugin(&#123;</span><br><span class="line">      filepath: resolve(__dirname, <span class="string">'dll/jquery.js'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-dll-js"><a href="#webpack-dll-js" class="headerlink" title="webpack.dll.js"></a>webpack.dll.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  使用dll技术，对某些库（第三方库：jquery、react、vue...）进行单独打包</span></span><br><span class="line"><span class="comment">    当你运行 webpack 时，默认查找 webpack.config.js 配置文件</span></span><br><span class="line"><span class="comment">    需求：需要运行 webpack.dll.js 文件</span></span><br><span class="line"><span class="comment">      --&gt; webpack --config webpack.dll.js</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">// 最终打包生成的[name] --&gt; jquery</span></span><br><span class="line">    <span class="comment">// ['jquery'] --&gt; 要打包的库是jquery</span></span><br><span class="line">    jquery: [<span class="string">'jquery'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'dll'</span>),</span><br><span class="line">    library: <span class="string">'[name]_[hash]'</span> <span class="comment">// 打包的库里面向外暴露出去的内容叫什么名字</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 打包生成一个 manifest.json --&gt; 提供和jquery映射</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      name: <span class="string">'[name]_[hash]'</span>, <span class="comment">// 映射库的暴露的内容名称</span></span><br><span class="line">      path: resolve(__dirname, <span class="string">'dll/manifest.json'</span>) <span class="comment">// 输出文件路径</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h1><p>以上章节的学习已经将webpack大致地了解了一圈，接下来这一章节来学习webpack配置的详解</p>
<h1 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h1><h2 id="目录-11"><a href="#目录-11" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src -&gt; 源代码目录<br>— — add.js<br>— — count.js<br>— — index.js<br>— webpack.config.js  -&gt; webpack配置文件</p>
</blockquote>
<h2 id="代码文件-12"><a href="#代码文件-12" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="add-js"><a href="#add-js" class="headerlink" title="add.js"></a>add.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> add;</span><br></pre></td></tr></table></figure>

<h3 id="count-js"><a href="#count-js" class="headerlink" title="count.js"></a>count.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> count;</span><br></pre></td></tr></table></figure>

<h3 id="index-js-9"><a href="#index-js-9" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import add from './add';</span></span><br><span class="line"><span class="comment">// import count from './count';</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'index.js文件加载了~'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(add(1, 2));</span></span><br><span class="line"><span class="comment">// console.log(count(3, 2));</span></span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-11"><a href="#webpack-config-js-11" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  entry: 入口起点</span></span><br><span class="line"><span class="comment">    1. string --&gt; './src/index.js'</span></span><br><span class="line"><span class="comment">      单入口</span></span><br><span class="line"><span class="comment">      打包形成一个chunk。 输出一个bundle文件。</span></span><br><span class="line"><span class="comment">      此时chunk的名称默认是 main</span></span><br><span class="line"><span class="comment">    2. array  --&gt; ['./src/index.js', './src/add.js']</span></span><br><span class="line"><span class="comment">      多入口</span></span><br><span class="line"><span class="comment">      所有入口文件最终只会形成一个chunk, 输出出去只有一个bundle文件。</span></span><br><span class="line"><span class="comment">        --&gt; 只有在HMR功能中让html热更新生效~</span></span><br><span class="line"><span class="comment">    3. object</span></span><br><span class="line"><span class="comment">      多入口</span></span><br><span class="line"><span class="comment">      有几个入口文件就形成几个chunk，输出几个bundle文件</span></span><br><span class="line"><span class="comment">      此时chunk的名称是 key</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      --&gt; 特殊用法</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">          // 所有入口文件最终只会形成一个chunk, 输出出去只有一个bundle文件。</span></span><br><span class="line"><span class="comment">          index: ['./src/index.js', './src/count.js'], </span></span><br><span class="line"><span class="comment">          // 形成一个chunk，输出一个bundle文件。</span></span><br><span class="line"><span class="comment">          add: './src/add.js'</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: [<span class="string">'./src/index.js'</span>, <span class="string">'./src/count.js'</span>], </span><br><span class="line">    add: <span class="string">'./src/add.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="output"><a href="#output" class="headerlink" title="output"></a>output</h1><h2 id="目录-12"><a href="#目录-12" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src -&gt; 源代码目录<br>— — add.js<br>— — count.js<br>— — index.js<br>— webpack.config.js  -&gt; webpack配置文件</p>
</blockquote>
<h2 id="代码文件-13"><a href="#代码文件-13" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-js-10"><a href="#index-js-10" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">'./count'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'index.js文件加载了~'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./add'</span>).then(<span class="function">(<span class="params">&#123; <span class="keyword">default</span>: add &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(count(<span class="number">3</span>, <span class="number">2</span>));<span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 文件名称（指定名称+目录）</span></span><br><span class="line">    filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">    <span class="comment">// 输出文件目录（将来所有资源输出的公共目录）</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    <span class="comment">// 所有资源引入公共路径前缀 --&gt; 'imgs/a.jpg' --&gt; '/imgs/a.jpg'</span></span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'js/[name]_chunk.js'</span>, <span class="comment">// 非入口chunk的名称</span></span><br><span class="line">    <span class="comment">// library: '[name]', // 整个库向外暴露的变量名</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'window' // 变量名添加到哪个上 browser</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'global' // 变量名添加到哪个上 node</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'commonjs'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-12"><a href="#webpack-config-js-12" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 文件名称（指定名称+目录）</span></span><br><span class="line">    filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">    <span class="comment">// 输出文件目录（将来所有资源输出的公共目录）</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    <span class="comment">// 所有资源引入公共路径前缀 --&gt; 'imgs/a.jpg' --&gt; '/imgs/a.jpg'</span></span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'js/[name]_chunk.js'</span>, <span class="comment">// 非入口chunk的名称</span></span><br><span class="line">    <span class="comment">// library: '[name]', // 整个库向外暴露的变量名</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'window' // 变量名添加到哪个上 browser</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'global' // 变量名添加到哪个上 node</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'commonjs'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>其余文件与上一章一致</strong></p>
<h1 id="module"><a href="#module" class="headerlink" title="module"></a>module</h1><h2 id="目录-13"><a href="#目录-13" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src -&gt; 源代码目录<br>— — add.js<br>— — count.js<br>— — index.js<br>— webpack.config.js  -&gt; webpack配置文件</p>
</blockquote>
<h2 id="代码文件-14"><a href="#代码文件-14" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-13"><a href="#webpack-config-js-13" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 多个loader用use</span></span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="comment">// 排除node_modules下的js文件</span></span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 只检查 src 下的js文件</span></span><br><span class="line">        include: resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        <span class="comment">// 延后执行</span></span><br><span class="line">        <span class="comment">// enforce: 'post',</span></span><br><span class="line">        <span class="comment">// 单个loader用loader</span></span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 以下配置只会生效一个</span></span><br><span class="line">        oneOf: []</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h1><h2 id="目录-14"><a href="#目录-14" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src  -&gt; 源代码目录<br>— — css<br>— — — index.css<br>— — js<br>— — — index.js<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-15"><a href="#代码文件-15" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="index-css-2"><a href="#index-css-2" class="headerlink" title="index.css"></a>index.css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-js-11"><a href="#index-js-11" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'$css/index'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-14"><a href="#webpack-config-js-14" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  <span class="comment">// 解析模块的规则</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 配置解析模块路径别名: 优点简写路径 缺点路径没有提示</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      $css: resolve(__dirname, <span class="string">'src/css'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置省略文件路径的后缀名</span></span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.css'</span>],</span><br><span class="line">    <span class="comment">// 告诉 webpack 解析模块是去找哪个目录</span></span><br><span class="line">    modules: [resolve(__dirname, <span class="string">'../../node_modules'</span>), <span class="string">'node_modules'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h1><h2 id="目录-15"><a href="#目录-15" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src  -&gt; 源代码目录<br>— — css<br>— — — index.css<br>— — js<br>— — — index.js<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-16"><a href="#代码文件-16" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="webpack-config-js-15"><a href="#webpack-config-js-15" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      $css: resolve(__dirname, <span class="string">'src/css'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.css'</span>],</span><br><span class="line">    modules: [resolve(__dirname, <span class="string">'../../node_modules'</span>), <span class="string">'node_modules'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="comment">// 运行代码的目录</span></span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    <span class="comment">// 监视 contentBase 目录下的所有文件，一旦文件变化就会 reload</span></span><br><span class="line">    watchContentBase: <span class="literal">true</span>,</span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">      <span class="comment">// 忽略文件</span></span><br><span class="line">      ignored: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    port: <span class="number">5000</span>,</span><br><span class="line">    <span class="comment">// 域名</span></span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 开启HMR功能</span></span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 不要显示启动服务器日志信息</span></span><br><span class="line">    clientLogLevel: <span class="string">'none'</span>,</span><br><span class="line">    <span class="comment">// 除了一些基本启动信息以外，其他内容都不要显示</span></span><br><span class="line">    quiet: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 如果出错了，不要全屏提示~</span></span><br><span class="line">    overlay: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 服务器代理 --&gt; 解决开发环境跨域问题</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">// 一旦devServer(5000)服务器接受到 /api/xxx 的请求，就会把请求转发到另外一个服务器(3000)</span></span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">        <span class="comment">// 发送请求时，请求路径重写：将 /api/xxx --&gt; /xxx （去掉/api）</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>其余文件与上一小节一致噢</strong></p>
<h1 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h1><h2 id="目录-16"><a href="#目录-16" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>— src  -&gt; 源代码目录<br>— — js<br>— — — a.js<br>— — — index.js<br>— — index.html<br>— webpack.config.js  -&gt; webpack配置文件  </p>
</blockquote>
<h2 id="代码文件-17"><a href="#代码文件-17" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="a-js"><a href="#a-js" class="headerlink" title="a.js"></a>a.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-js-12"><a href="#index-js-12" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'a' */</span><span class="string">'./a.js'</span>).then(<span class="function">(<span class="params">&#123; add &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-16"><a href="#webpack-config-js-16" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> TerserWebpackPlugin = <span class="built_in">require</span>(<span class="string">'terser-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    chunkFilename: <span class="string">'js/[name].[contenthash:10]_chunk.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      $css: resolve(__dirname, <span class="string">'src/css'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.css'</span>],</span><br><span class="line">    modules: [resolve(__dirname, <span class="string">'../../node_modules'</span>), <span class="string">'node_modules'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'all'</span></span><br><span class="line">      <span class="comment">// 默认值，可以不写~</span></span><br><span class="line">      <span class="comment">/* minSize: 30 * 1024, // 分割的chunk最小为30kb</span></span><br><span class="line"><span class="comment">      maxSiza: 0, // 最大没有限制</span></span><br><span class="line"><span class="comment">      minChunks: 1, // 要提取的chunk最少被引用1次</span></span><br><span class="line"><span class="comment">      maxAsyncRequests: 5, // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line"><span class="comment">      maxInitialRequests: 3, // 入口js文件最大并行请求数量</span></span><br><span class="line"><span class="comment">      automaticNameDelimiter: '~', // 名称连接符</span></span><br><span class="line"><span class="comment">      name: true, // 可以使用命名规则</span></span><br><span class="line"><span class="comment">      cacheGroups: &#123;</span></span><br><span class="line"><span class="comment">        // 分割chunk的组</span></span><br><span class="line"><span class="comment">        // node_modules文件会被打包到 vendors 组的chunk中。--&gt; vendors~xxx.js</span></span><br><span class="line"><span class="comment">        // 满足上面的公共规则，如：大小超过30kb，至少被引用一次。</span></span><br><span class="line"><span class="comment">        vendors: &#123;</span></span><br><span class="line"><span class="comment">          test: /[\\/]node_modules[\\/]/,</span></span><br><span class="line"><span class="comment">          // 优先级</span></span><br><span class="line"><span class="comment">          priority: -10</span></span><br><span class="line"><span class="comment">        &#125;,</span></span><br><span class="line"><span class="comment">        default: &#123;</span></span><br><span class="line"><span class="comment">          // 要提取的chunk最少被引用2次</span></span><br><span class="line"><span class="comment">          minChunks: 2,</span></span><br><span class="line"><span class="comment">          // 优先级</span></span><br><span class="line"><span class="comment">          priority: -20,</span></span><br><span class="line"><span class="comment">          // 如果当前要打包的模块，和之前已经被提取的模块是同一个，就会复用，而不是重新打包模块</span></span><br><span class="line"><span class="comment">          reuseExistingChunk: true</span></span><br><span class="line"><span class="comment">        &#125; </span></span><br><span class="line"><span class="comment">      &#125;*/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 将当前模块的记录其他模块的hash单独打包为一个文件 runtime</span></span><br><span class="line">    <span class="comment">// 解决：修改a文件导致b文件的contenthash变化</span></span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">      name: <span class="function"><span class="params">entrypoint</span> =&gt;</span> <span class="string">`runtime-<span class="subst">$&#123;entrypoint.name&#125;</span>`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="comment">// 配置生产环境的压缩方案：js和css</span></span><br><span class="line">      <span class="keyword">new</span> TerserWebpackPlugin(&#123;</span><br><span class="line">        <span class="comment">// 开启缓存</span></span><br><span class="line">        cache: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 开启多进程打包</span></span><br><span class="line">        parallel: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 启动source-map</span></span><br><span class="line">        sourceMap: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="背景-2"><a href="#背景-2" class="headerlink" title="背景"></a>背景</h1><p>以上章节的学习已经将webpack大致地了解了一圈,这节初步认识一下webpack5（我也没有实践用过~ 当作积累知识点吧！）</p>
<h1 id="webpack5"><a href="#webpack5" class="headerlink" title="webpack5"></a>webpack5</h1><p>此版本重点关注以下内容:</p>
<ul>
<li>通过持久缓存提高构建性能.</li>
<li>使用更好的算法和默认值来改善长期缓存.</li>
<li>通过更好的树摇和代码生成来改善捆绑包大小.</li>
<li>清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.</li>
<li>通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</li>
</ul>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li>npm i webpack@next webpack-cli -D</li>
</ul>
<h2 id="自动删除-Node-js-Polyfills"><a href="#自动删除-Node-js-Polyfills" class="headerlink" title="自动删除 Node.js Polyfills"></a>自动删除 Node.js Polyfills</h2><p>早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途现在主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块的 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用。</p>
<p>尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的。</p>
<p>webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块。</p>
<p>迁移：</p>
<ul>
<li>尽可能尝试使用与前端兼容的模块。</li>
<li>可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标。</li>
</ul>
<h2 id="Chunk-和模块-ID"><a href="#Chunk-和模块-ID" class="headerlink" title="Chunk 和模块 ID"></a>Chunk 和模块 ID</h2><p>添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能。</p>
<p><code>chunkIds: &quot;deterministic&quot;, moduleIds: &quot;deterministic&quot;</code></p>
<h2 id="Chunk-ID"><a href="#Chunk-ID" class="headerlink" title="Chunk ID"></a>Chunk ID</h2><p>你可以不用使用 <code>import(/* webpackChunkName: &quot;name&quot; */ &quot;module&quot;)</code> 在开发环境来为 chunk 命名，生产环境还是有必要的</p>
<p>webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2)命名了</p>
<h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h2><ol>
<li>webpack 现在能够处理对嵌套模块的 tree shaking</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inner.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">'./inner'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; inner &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.inner.a);</span><br></pre></td></tr></table></figure>

<p>在生产环境中, inner 模块暴露的 <code>b</code> 会被删除</p>
<ol start="2">
<li>webpack 现在能够多个模块之前的关系</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; something &#125; <span class="keyword">from</span> <span class="string">'./something'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usingSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> usingSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当设置了<code>&quot;sideEffects&quot;: false</code>时，一旦发现<code>test</code>方法没有使用，不但删除<code>test</code>，还会删除<code>&quot;./something&quot;</code></p>
<ol start="3">
<li>webpack 现在能处理对 Commonjs 的 tree shaking</li>
</ol>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>webpack 4 默认只能输出 ES5 代码</p>
<p>webpack 5 开始新增一个属性 output.ecmaVersion, 可以生成 ES5 和 ES6 / ES2015 代码.</p>
<p>如：<code>output.ecmaVersion: 2015</code></p>
<h2 id="SplitChunk"><a href="#SplitChunk" class="headerlink" title="SplitChunk"></a>SplitChunk</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack4</span></span><br><span class="line">minSize: <span class="number">30000</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack5</span></span><br><span class="line">minSize: &#123;</span><br><span class="line">  javascript: <span class="number">30000</span>,</span><br><span class="line">  style: <span class="number">50000</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置缓存</span></span><br><span class="line">cache: &#123;</span><br><span class="line">  <span class="comment">// 磁盘存储</span></span><br><span class="line">  type: <span class="string">"filesystem"</span>,</span><br><span class="line">  buildDependencies: &#123;</span><br><span class="line">    <span class="comment">// 当配置修改时，缓存失效</span></span><br><span class="line">    config: [__filename]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缓存将存储到 <code>node_modules/.cache/webpack</code></p>
<h2 id="监视输出文件"><a href="#监视输出文件" class="headerlink" title="监视输出文件"></a>监视输出文件</h2><p>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时会只更新修改的文件。</p>
<p>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件。</p>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><ul>
<li><code>entry: &quot;./src/index.js</code></li>
<li><code>output.path: path.resolve(__dirname, &quot;dist&quot;)</code></li>
<li><code>output.filename: &quot;[name].js&quot;</code></li>
</ul>
<h2 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h2><p><a href="https://github.com/webpack/changelog-v5" target="_blank" rel="noopener">webpack-github</a></p>
<p>希望积累总结的知识点对看官有所帮助</p>
<h1 id="参考学习教程"><a href="#参考学习教程" class="headerlink" title="参考学习教程"></a>参考学习教程</h1><blockquote>
<p>Webpack4.2 -2020年</p>
</blockquote>
]]></content>
      <tags>
        <tag>webpack小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6全面复习（二）隐形的技能</title>
    <url>/lindada-blog/2020/07/19/ES6%E5%85%A8%E9%9D%A2%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E9%9A%90%E5%BD%A2%E7%9A%84%E6%8A%80%E8%83%BD/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/07/19/ES6%E5%85%A8%E9%9D%A2%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E9%9A%90%E5%BD%A2%E7%9A%84%E6%8A%80%E8%83%BD/1.png" class>  
<p><strong>往期复习</strong></p>
<blockquote>
<p><a href="https://juejin.im/post/5f12dd04f265da23033335e4?_blank" target="_blank" rel="noopener">ES6全面复习（一）赋值解构</a><br>记录小编认为ES6中不常见，但以后很有用的<br>宝藏新特效</p>
</blockquote>
<a id="more"></a>

<h1 id="指数操作符"><a href="#指数操作符" class="headerlink" title="指数操作符 - **"></a>指数操作符 - **</h1><blockquote>
<p>** 指数运算符与 + - * % 属于同一性质的运算操作符<br>与函数Math.pow(..)等效  </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指数操作符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>**<span class="number">8</span>);    <span class="comment">// 256</span></span><br></pre></td></tr></table></figure>


<h1 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors( )"></a>Object.getOwnPropertyDescriptors( )</h1><blockquote>
<p>获取对象的所有自身属性的描述符方法<br>所指定对象的所有自身属性的描述符，如果没有任何自身属性，则返回空对象。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">	name: <span class="string">'大大'</span>,</span><br><span class="line">	age: <span class="function"><span class="params">()</span>=&gt;</span> &#123; <span class="keyword">return</span> <span class="string">'18'</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name: &#123; value: '大大', writable: true, enumerable: true, configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   age: &#123;</span></span><br><span class="line"><span class="comment">//     value: [Function: age],</span></span><br><span class="line"><span class="comment">//     writable: true,</span></span><br><span class="line"><span class="comment">//     enumerable: true,</span></span><br><span class="line"><span class="comment">//     configurable: true</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="浅拷贝一个对象"><a href="#浅拷贝一个对象" class="headerlink" title="浅拷贝一个对象"></a>浅拷贝一个对象</h3><blockquote>
<p>Object.assign() 方法只能拷贝源对象的可枚举的自身属性，而且访问器属性会被转换成数据属性<br>利用getOwnPropertyDescriptors()函数，同时拷贝时，拷贝属性的特性们，也拷贝源对象的原型  </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">	name: <span class="string">'大大'</span>,</span><br><span class="line">	age: <span class="function"><span class="params">()</span>=&gt;</span> &#123; <span class="keyword">return</span> <span class="string">'18'</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">Object</span>.create(</span><br><span class="line">	<span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">	<span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(obj2)</span><br><span class="line"><span class="comment">// &#123; name: '大大', age: [Function: age] &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建子类"><a href="#创建子类" class="headerlink" title="创建子类"></a>创建子类</h3><blockquote>
<p>创建子类的典型方法是定义子类，将其原型设置为超类的实例，然后在该实例上定义属性<br>这么写很不优雅，特别是对于 getters 和 setter 而言。<br>可以使用Object.create()结合Object.getOwnPropertyDescriptors()来创建子类  </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">superclass</span>(<span class="params"></span>) </span>&#123;&#125;    <span class="comment">// 父类</span></span><br><span class="line">superclass.prototype = &#123;</span><br><span class="line">	<span class="comment">// 在这里定义方法和属性</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subclass</span>(<span class="params"></span>) </span>&#123;&#125;    <span class="comment">// 子类</span></span><br><span class="line">subclass.prototype = <span class="built_in">Object</span>.create(superclass.prototype, <span class="built_in">Object</span>.getOwnPropertyDescriptors(&#123;</span><br><span class="line">	<span class="comment">// 在这里定义方法和属性</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>


<h1 id="flat"><a href="#flat" class="headerlink" title="flat( )"></a>flat( )</h1><blockquote>
<p>flat()方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p>
</blockquote>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = arr.flat([depth])    <span class="comment">// 等效于 reduce + concat</span></span><br></pre></td></tr></table></figure>

<h2 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h2><h3 id="扁平化嵌套数组"><a href="#扁平化嵌套数组" class="headerlink" title="扁平化嵌套数组"></a>扁平化嵌套数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line">arr1.flat();    <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line">arr2.flat();    <span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line">arr3.flat(<span class="number">2</span>);   <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Infinity（无限大），可展开任意深度的嵌套数组</span></span><br><span class="line"><span class="comment">// 等效于 reduce + concat + isArray + recursivity</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]];</span><br><span class="line">arr4.flat(<span class="literal">Infinity</span>);   <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>

<h3 id="扁平化与数组空项"><a href="#扁平化与数组空项" class="headerlink" title="扁平化与数组空项"></a>扁平化与数组空项</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等效于 forEach + isArray + push + recursivity</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr4.flat();    <span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure>


<h1 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap( )"></a>flatMap( )</h1><blockquote>
<p>flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。</p>
</blockquote>
<h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr1.flatMap(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// return element for new_array</span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h3><blockquote>
<p>可以生成一个新数组中的元素的函数，可以传入三个参数：</p>
</blockquote>
<ul>
<li><p>currentValue</p>
<blockquote>
<p>当前正在数组中处理的元素</p>
</blockquote>
</li>
<li><p>index可选</p>
<blockquote>
<p>可选的。数组中正在处理的当前元素的索引。</p>
</blockquote>
</li>
<li><p>array可选</p>
<blockquote>
<p>可选的。被调用的 map 数组</p>
</blockquote>
</li>
</ul>
<h2 id="thisArg"><a href="#thisArg" class="headerlink" title="thisArg"></a>thisArg</h2><blockquote>
<p>可选的。执行 callback 函数时 使用的this 值。</p>
</blockquote>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><blockquote>
<p>一个新的数组，其中每个元素都是回调函数的结果，并且结构深度 depth 值为1。</p>
</blockquote>
<h2 id="map-和-flatMap-的比较"><a href="#map-和-flatMap-的比较" class="headerlink" title="map 和 flatMap 的比较"></a>map 和 flatMap 的比较</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">"it's Sunny in"</span>, <span class="string">""</span>, <span class="string">"California"</span>];</span><br><span class="line"></span><br><span class="line">arr1.map(<span class="function"><span class="params">x</span> =&gt;</span> x.split(<span class="string">" "</span>));</span><br><span class="line"><span class="comment">// [["it's","Sunny","in"],[""],["California"]]</span></span><br><span class="line"></span><br><span class="line">arr1.flatMap(<span class="function"><span class="params">x</span> =&gt;</span> x.split(<span class="string">" "</span>));</span><br><span class="line"><span class="comment">// ["it's","Sunny","in", "", "California"]</span></span><br></pre></td></tr></table></figure>


<h1 id="trimStart"><a href="#trimStart" class="headerlink" title="trimStart( )"></a>trimStart( )</h1><blockquote>
<p>trimStart() 方法从字符串的开头删除空格。<br>trimLeft() 是此方法的别名。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">'   Hello world!   '</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeting);    <span class="comment">// "   Hello world!   "</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeting.trimStart());    <span class="comment">// "Hello world!   ";</span></span><br></pre></td></tr></table></figure>


<h1 id="trimEnd"><a href="#trimEnd" class="headerlink" title="trimEnd( )"></a>trimEnd( )</h1><blockquote>
<p>trimEnd() 方法从一个字符串的末端移除空白字符。<br>trimRight() 是这个方法的别名。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">'   Hello world!   '</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeting);    <span class="comment">// "   Hello world!   ";</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeting.trimEnd());    <span class="comment">// "   Hello world!";</span></span><br></pre></td></tr></table></figure>


<h1 id="trim"><a href="#trim" class="headerlink" title="trim( )"></a>trim( )</h1><blockquote>
<p>trim() 方法会从一个字符串的两端删除空白字符。<br>在这个上下文中的空白字符是所有的空白字符<br>(space, tab, no-break space 等)<br>以及所有行终止符字符（如 LF，CR等）。  </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">'   Hello world!   '</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeting);    <span class="comment">// "   Hello world!   ";</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeting.trim());   <span class="comment">// "Hello world!";</span></span><br></pre></td></tr></table></figure>


<h1 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries( )"></a>Object.fromEntries( )</h1><blockquote>
<p>Object.fromEntries() 方法把键值对列表转换为一个对象。</p>
</blockquote>
<h2 id="Map-转化为-Object"><a href="#Map-转化为-Object" class="headerlink" title="Map 转化为 Object"></a>Map 转化为 Object</h2><blockquote>
<p>通过 Object.fromEntries， 可以将 Map 转换为 Object:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([ [<span class="string">'name'</span>, <span class="string">'大大'</span>], [<span class="string">'age'</span>, <span class="number">20</span>] ]);</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.fromEntries(map);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; name: '大大', age: 20 &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-转化为-Object"><a href="#Array-转化为-Object" class="headerlink" title="Array 转化为 Object"></a>Array 转化为 Object</h2><blockquote>
<p>通过 Object.fromEntries， 可以将 Array 转换为 Object:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [ [<span class="string">'0'</span>, <span class="string">'大大'</span>], [<span class="string">'1'</span>, <span class="string">'20'</span>], [<span class="string">'2'</span>, <span class="string">'前端'</span>] ];</span><br><span class="line"><span class="keyword">const</span> obj2= <span class="built_in">Object</span>.fromEntries(arr);</span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// &#123; '0': '大大', '1': '20', '2': '前端' &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="对象转换"><a href="#对象转换" class="headerlink" title="对象转换"></a>对象转换</h2><blockquote>
<p>Object.fromEntries 是与 Object.entries() 相反的方法<br>用数组处理函数 -&gt; 可以像下面这样转换对象：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object2 = <span class="built_in">Object</span>.fromEntries(</span><br><span class="line">  <span class="built_in">Object</span>.entries(object1)</span><br><span class="line">  .map(<span class="function">(<span class="params">[ key, val ]</span>) =&gt;</span> [ key, val * <span class="number">2</span> ])</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object2);</span><br><span class="line"><span class="comment">// &#123; a: 2, b: 4, c: 6 &#125;</span></span><br></pre></td></tr></table></figure>


<h1 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h1><h2 id="原先"><a href="#原先" class="headerlink" title="原先"></a>原先</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;&#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如今"><a href="#如今" class="headerlink" title="如今"></a>如今</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;&#125; <span class="keyword">catch</span> &#123;&#125;</span><br></pre></td></tr></table></figure>


<h1 id="基本数据类型发展"><a href="#基本数据类型发展" class="headerlink" title="基本数据类型发展"></a>基本数据类型发展</h1><h2 id="ES6及之前-5种"><a href="#ES6及之前-5种" class="headerlink" title="ES6及之前(5种)"></a>ES6及之前(5种)</h2><blockquote>
<p>String、Number、Boolean、Null、Undefined</p>
</blockquote>
<h2 id="ES6之后ES10之前-6种"><a href="#ES6之后ES10之前-6种" class="headerlink" title="ES6之后ES10之前(6种)"></a>ES6之后ES10之前(6种)</h2><blockquote>
<p>String、Number、Boolean、Null、Undefined、Symbol</p>
</blockquote>
<h2 id="ES10之后-7种"><a href="#ES10之后-7种" class="headerlink" title="ES10之后(7种)"></a>ES10之后(7种)</h2><blockquote>
<p>String、Number、Boolean、Null、Undefined、Symbol、BigInt</p>
</blockquote>
<hr>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><blockquote>
<p><a href="https://juejin.im/post/5f12dd04f265da23033335e4?_blank" target="_blank" rel="noopener">ES6全面复习（一）赋值解构</a><br><a href="https://juejin.im/post/5f13e25b5188252e415f6a21?_blank" target="_blank" rel="noopener">ES6全面复习（二）隐形的技能</a><br>参考 上沅兮 大佬的文章 - <a href="https://juejin.im/post/5ca2e1935188254416288eb2?_blank" target="_blank" rel="noopener">ES6、ES7、ES8、ES9、ES10新特性一览</a><br>查询 <a href="https://developer.mozilla.org/zh-CN/?_blank" target="_blank" rel="noopener">MDN</a> 官网资料</p>
</blockquote>
<p>最后想说  </p>
<ul>
<li>记录下自己复习的点点滴滴  </li>
<li>要是本文章(笔记)有任何需要修改或注意的地方，麻烦联系我噢！小编卑微整改 </li>
</ul>
<p><a href="https://lin_daren.gitee.io/lindada-blog/2020/07/19/ES6%E5%85%A8%E9%9D%A2%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E9%9A%90%E5%BD%A2%E7%9A%84%E6%8A%80%E8%83%BD/?_blank">博客原文✨</a></p>
]]></content>
      <tags>
        <tag>ES6小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>三步让Google游览器在YouTube畅通无阻</title>
    <url>/lindada-blog/2021/02/05/%E4%B8%89%E6%AD%A5%E8%AE%A9google%E6%B8%B8%E8%A7%88%E5%99%A8%E5%9C%A8yutube%E7%95%85%E9%80%9A%E6%97%A0%E9%98%BB/</url>
    <content><![CDATA[<img src="/lindada-blog/2021/02/05/%E4%B8%89%E6%AD%A5%E8%AE%A9google%E6%B8%B8%E8%A7%88%E5%99%A8%E5%9C%A8yutube%E7%95%85%E9%80%9A%E6%97%A0%E9%98%BB/1.png" class>  

<p>三步让Google游览器在YouTube畅通无阻</p>
<a id="more"></a>

<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><img src="/lindada-blog/2021/02/05/%E4%B8%89%E6%AD%A5%E8%AE%A9google%E6%B8%B8%E8%A7%88%E5%99%A8%E5%9C%A8yutube%E7%95%85%E9%80%9A%E6%97%A0%E9%98%BB/1.gif" class>  
<p><strong>打开Chrome网上应用商店</strong></p>
<blockquote>
<p>若俺浏览器无法打开Chrome网上应用商店<br>以下三步儿</p>
<ul>
<li>进入我fork的<a href="https://github.com/lindadade/google-access-helper" target="_blank" rel="noopener">谷歌访问助手</a>下载至本地</li>
<li>解压 <strong>google-access-helper-xx</strong> 文件</li>
<li>谷歌浏览器中加载已解压的扩展程序</li>
<li>再次打开Chrome网上应用商店</li>
</ul>
</blockquote>
<h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><img src="/lindada-blog/2021/02/05/%E4%B8%89%E6%AD%A5%E8%AE%A9google%E6%B8%B8%E8%A7%88%E5%99%A8%E5%9C%A8yutube%E7%95%85%E9%80%9A%E6%97%A0%E9%98%BB/2.gif" class>  
<p>添加 <strong>Astar VPN</strong> 插件</p>
<h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><img src="/lindada-blog/2021/02/05/%E4%B8%89%E6%AD%A5%E8%AE%A9google%E6%B8%B8%E8%A7%88%E5%99%A8%E5%9C%A8yutube%E7%95%85%E9%80%9A%E6%97%A0%E9%98%BB/3.gif" class>  
<p>开启 <strong>Astar VPN</strong> 并畅通无阻儿</p>
<blockquote>
<p>开启后不仅可访问YouTube还可连接<strong>谷歌旗下的产品</strong>噢</p>
<ul>
<li>YouTube</li>
<li>谷歌搜索</li>
<li>Gmail</li>
<li>谷歌地图</li>
<li>谷歌翻译</li>
<li>Blogger等等</li>
</ul>
<p><strong>别忘了不需要时，关闭连接呀</strong></p>
</blockquote>
]]></content>
      <tags>
        <tag>日常小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>从0开始的TypeScript基础大全</title>
    <url>/lindada-blog/2020/07/22/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84TypeScript%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/07/22/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84TypeScript%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/1.png" class>  

<p><strong>往期复习</strong></p>
<blockquote>
<p><a href="https://juejin.im/post/5f12dd04f265da23033335e4?_blank" target="_blank" rel="noopener">ES6全面复习（一）赋值解构</a><br><a href="https://juejin.im/post/5f13e25b5188252e415f6a21?_blank" target="_blank" rel="noopener">ES6全面复习（二）隐形的技能</a>  </p>
</blockquote>
<p>记录从零开始的TypeScript基础<br>简要概括在学习过程中的<strong>重点难点</strong><br>作为今后复习的文章 ✨</p>
<a id="more"></a>

<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>typeScript的使用<br>框架vue3、angular等将会逐步应用<br>代码库redux、mobx等</p>
<p>准备需<br>安装nodeJS  </p>
<p>typeScript是由微软公司开发维护  </p>
<p><a href="https://www.tslang.cn/docs/home.html?_blank" target="_blank" rel="noopener">typescript中文文档</a></p>
<hr>
<h1 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h1><p>typeScript -&gt; javaScript的超集</p>
<hr>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><blockquote>
<p>1.面向对象（prototype、Function、Object）<br>    // Class interface<br>2.类型检查（静态类型、强类型）<br>    // typeScript 编译成 javaScript时便检查（提前避免bug）<br>3.参数自带文档内容<br>4.IDE或者是编译工具的良好支持（自动完成提示）</p>
</blockquote>
<hr>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>TypeScript = JavaScript + type + (some other stuff) 其他特性</p>
<p>创建typeScript-demo文件 -&gt; index.ts文件</p>
<p>全局安装typeScript</p>
<blockquote>
<p>npm install typescript -g</p>
</blockquote>
<p>编译typeScript代码文件</p>
<blockquote>
<p>tsc index.ts -&gt; 产生编译后的index.js文件 </p>
</blockquote>
<hr>
<h1 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h1><p>类型定义</p>
<blockquote>
<p>定义变量: [数据类型]</p>
</blockquote>
<p>自动编译模式</p>
<blockquote>
<p>tsc -w index.ts -&gt; 会自动编译代码</p>
</blockquote>
<hr>
<h1 id="var-let-const"><a href="#var-let-const" class="headerlink" title="var let const"></a>var let const</h1><blockquote>
<p>var -&gt; 函数级的作用域 -&gt; 导致全局污染<br>let -&gt;  块级的作用域 -&gt; 不会导致全局污染 (变量)<br>const -&gt;  块级的作用域 -&gt; 需要赋常量值 (常量)</p>
</blockquote>
<h2 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h2><p>var 可以重复定义变量 -&gt; 会覆盖<br>    // 不能重复定义不一样的类型变量<br>let 、const 不能重复定义变量<br>    // 不能重复定义不一样的类型变量</p>
<hr>
<h1 id="array-数组"><a href="#array-数组" class="headerlink" title="array 数组"></a>array 数组</h1><h2 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h2><blockquote>
<p>let myArr: string[] -&gt; 表示数组中每个元素均为字符串<br>let myArr: Array<number> -&gt; 表示该变量为数组且每个元素均为数值型</number></p>
</blockquote>
<h2 id="继承变量类型"><a href="#继承变量类型" class="headerlink" title="继承变量类型"></a>继承变量类型</h2><p>变量赋于过类型后 -&gt; 另一变量再赋于后 -&gt; 自动获取该变量类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s: String &#x3D; &#39;123&#39;</span><br><span class="line">let s1 &#x3D; s</span><br><span class="line">&#x2F;&#x2F; s1变量类型 -&gt; String</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="tuple-元组"><a href="#tuple-元组" class="headerlink" title="tuple 元组"></a>tuple 元组</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>该集合中有多种数据类型</p>
<blockquote>
<p>let my_tuple: [string, number] -&gt; 第一位为字符串、第二位为数值型<br>    // 也不能为空、顺序不能颠倒、仅能为两个</p>
</blockquote>
<p><strong>编译出来的javaScript为数组</strong></p>
<hr>
<h1 id="function-函数"><a href="#function-函数" class="headerlink" title="function 函数"></a>function 函数</h1><h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义add函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">boolean</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> a + b </span><br><span class="line">    &#125;  </span><br><span class="line">	<span class="comment">// 所传值为相对应的数据类型、所传的个数为两个</span></span><br></pre></td></tr></table></figure>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">boolean</span></span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="function-return-value"><a href="#function-return-value" class="headerlink" title="function return value"></a>function return value</h1><p>函数指定return返回值的数据类型</p>
<blockquote>
<p>const add = (a: number, b: boolean): number =&gt; { return a + b }<br>    // 返回内容的数据类型为number，否则报错</p>
</blockquote>
<blockquote>
<p>const add = (a: number, b: boolean):void =&gt; { return a + b }<br>    // 不返回任何值（否则报错）</p>
</blockquote>
<p>优势: <strong>明返回值类型可以方便人员处理操作</strong></p>
<hr>
<h1 id="function-可选参数"><a href="#function-可选参数" class="headerlink" title="function 可选参数"></a>function 可选参数</h1><p>一般默认值、可选参数不放在第一位参数</p>
<h2 id="默认值（param-value）"><a href="#默认值（param-value）" class="headerlink" title="默认值（param = value）"></a>默认值（param = value）</h2><blockquote>
<p>const add = (a: number, b: number = 10): number =&gt; { return a + b }<br>    // 设置b默认值为10<br>    // 可只传一个参数赋予a<br>    // 传两个参数赋予a，覆盖b<br>    // 少传、多传报错  </p>
</blockquote>
<blockquote>
<p>默认值可以不加上数据类型（继承上一位参数的数据类型）<br>    // 覆盖的数据类型需要一致</p>
</blockquote>
<h2 id="可选参数（-）"><a href="#可选参数（-）" class="headerlink" title="可选参数（?）"></a>可选参数（?）</h2><blockquote>
<p>const add = (a: number, b?: number = 10): number =&gt; { return a }<br>    // b参数可选传或不传<br>    // 函数内部需要判断b传或不传的情况</p>
</blockquote>
<hr>
<h1 id="function-Rest-Rarameters"><a href="#function-Rest-Rarameters" class="headerlink" title="function Rest Rarameters"></a>function Rest Rarameters</h1><p>剩余的参数（…） -&gt; 一般为数组</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = (a: <span class="built_in">number</span>, ...num: <span class="built_in">number</span>[]): <span class="function"><span class="params">number</span> =&gt;</span> &#123; </span><br><span class="line">	<span class="keyword">return</span> num.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, num</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> total + num</span><br><span class="line">	&#125;, a)	<span class="comment">// a为初始值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sum = add(<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment">// 返回第一个参数与之后参数的总和</span></span><br><span class="line"><span class="comment">// 该…Rest Rarameters数据类似要一致</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="any-数据类型"><a href="#any-数据类型" class="headerlink" title="any 数据类型"></a>any 数据类型</h1><blockquote>
<p>let a: any -&gt; a变量为任何类型的值<br>// 可以利用typeof 来判断数据类型来处理操作</p>
</blockquote>
<blockquote>
<p>let b: any[] -&gt; b数组内元素均为any</p>
</blockquote>
<hr>
<h1 id="null、undefined-数据类型-连环类型"><a href="#null、undefined-数据类型-连环类型" class="headerlink" title="null、undefined 数据类型 | 连环类型"></a>null、undefined 数据类型 | 连环类型</h1><p><strong>ypeScript自带的判断数据类型</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">type</span> = (value: <span class="built_in">any</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`your value is number`</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> type1 = (value: <span class="built_in">any</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`your value is number`</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可传入value数据类型为string或者number</span></span><br><span class="line"><span class="keyword">const</span> typ2 = <span class="function">(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`your value is string or number`</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>null、undefined为一种数据类型<br>null、undefined -&gt; 为所有数据类型的子集 -&gt; 就是所有数据类型都可以传入null、undefined</p>
</blockquote>
<p>执行命令  </p>
<blockquote>
<p>tsc - -strictNullChecks 文件 </p>
<blockquote>
<p>null、undefined不为子集</p>
</blockquote>
</blockquote>
<hr>
<h1 id="class-类"><a href="#class-类" class="headerlink" title="class 类"></a>class 类</h1><blockquote>
<p>class（模板）new 对象<br>数据（data）行为（action）</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义class</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">	firstName: <span class="built_in">string</span></span><br><span class="line">	lastName: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成对象</span></span><br><span class="line"><span class="keyword">let</span> aPerson = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋予对象属性</span></span><br><span class="line">aPerson.firstName = <span class="string">"xxxx"</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="methods-方法-constructor-构造器"><a href="#methods-方法-constructor-构造器" class="headerlink" title="methods 方法 constructor 构造器"></a>methods 方法 constructor 构造器</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Movie &#123;</span><br><span class="line">	name: <span class="built_in">string</span>;</span><br><span class="line">	<span class="keyword">private</span> play_count:<span class="built_in">any</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span> = 'xxx'</span>) &#123;	<span class="comment">// 通过构造器设置初始化内容</span></span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	display_play_count() &#123;			<span class="comment">// methods 方法</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.play_count&#125;</span> 次数`</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Inheritance-and-Polymorphism-继承和多态"><a href="#Inheritance-and-Polymorphism-继承和多态" class="headerlink" title="Inheritance and Polymorphism 继承和多态"></a>Inheritance and Polymorphism 继承和多态</h1><h2 id="继承（extends）"><a href="#继承（extends）" class="headerlink" title="继承（extends）"></a>继承（extends）</h2><blockquote>
<p>class A extends class B -&gt; A类继承B类<br>// 会覆盖父类 -&gt; 非要用时 -&gt; 父类的 super（指向父类）</p>
</blockquote>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote>
<p>let B: classB = new classB( ) -&gt; classB可以当作一个类型<br>// 当B继承于A类时候 -&gt; 可以let B: classA = new classB( ) -&gt; 子可以实例化父</p>
</blockquote>
<hr>
<h1 id="public、private-成员可见性"><a href="#public、private-成员可见性" class="headerlink" title="public、private 成员可见性"></a>public、private 成员可见性</h1><blockquote>
<p>成员的可见性 -&gt; public、private -&gt; 对方法或者属性进行修饰</p>
</blockquote>
<blockquote>
<p>默认为public<br>public 任何属性和方法都可以在实例化的对象中调用</p>
</blockquote>
<blockquote>
<p>private 私有的，只有在内部对象内才能访问，生成的对象无法调用  </p>
<blockquote>
<p>使用get、set方法（通过class内部定义public的方法来调用）<br>继承来的private属性和方法 和 原本父类没有区别</p>
</blockquote>
</blockquote>
<hr>
<h1 id="protected-成员可见性"><a href="#protected-成员可见性" class="headerlink" title="protected 成员可见性"></a>protected 成员可见性</h1><blockquote>
<p>权限范围 public &gt; protected &gt; private  </p>
<blockquote>
<p>意思是public可以调用protected和private</p>
</blockquote>
</blockquote>
<blockquote>
<p>用protected对方法或者属性进行修饰  </p>
<blockquote>
<p>类似保护一个基石、在基石上的就不管<br>跟private一样需内部调用<br>还可以通过继承子类调用</p>
</blockquote>
</blockquote>
<blockquote>
<p>子类均可继承成员可见性属性</p>
</blockquote>
<blockquote>
<p>若是继承调用一个为private、一个为protected  </p>
<blockquote>
<p>利用set、get来操作private再调用</p>
</blockquote>
</blockquote>
<hr>
<h1 id="constructor-成员可见性"><a href="#constructor-成员可见性" class="headerlink" title="constructor 成员可见性"></a>constructor 成员可见性</h1><p><strong>可被继承</strong></p>
<h2 id="成员可见性修饰构造方法"><a href="#成员可见性修饰构造方法" class="headerlink" title="成员可见性修饰构造方法"></a>成员可见性修饰构造方法</h2><blockquote>
<p>在constructor中调用super( ) -&gt; 重写父类的构造函数  </p>
<blockquote>
<p>必要时需传入相关的参数</p>
</blockquote>
</blockquote>
<blockquote>
<p>protected或private修饰constructor时 -&gt; 当前类不能new<br>当父类申明protected时 -&gt; 子类通过super( ) 重写后new</p>
</blockquote>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><blockquote>
<p>当不想被实例化时 -&gt; 用protected修饰 -&gt; 类似于模版<br>都不想被子类和父类实例化或继承 -&gt; 用private修饰 -&gt; 私有的</p>
</blockquote>
<hr>
<h1 id="Abstract-Classes-抽象类（补充）"><a href="#Abstract-Classes-抽象类（补充）" class="headerlink" title="Abstract Classes 抽象类（补充）"></a>Abstract Classes 抽象类（补充）</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义抽象的class</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Person &#123;</span><br><span class="line">	name: <span class="built_in">string</span>;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	display(): <span class="built_in">void</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 抽象方法 没有方法体 -&gt; 由后面继承的来定义 -&gt; 子类必须重写</span></span><br><span class="line">	<span class="keyword">abstract</span> find(<span class="built_in">string</span>): Person;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 也有抽象属性 -&gt; 同理子类必须定义该抽象属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">	<span class="comment">// 除了继承的属性和方法体 -&gt; 还可以自定义扩展自身</span></span><br><span class="line">	<span class="comment">// 调用父类的方法属性时 -&gt; this指自身类 -&gt; super指父类</span></span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	find(name: <span class="built_in">string</span>): Person &#123;    <span class="comment">//必须有抽象方法</span></span><br><span class="line">		<span class="comment">//重写方法体</span></span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let p: Person = new Person('xxx');  // 报错不能实例化抽象类</span></span><br><span class="line"><span class="keyword">let</span> p: Person = <span class="keyword">new</span> Employee(<span class="string">'xxx'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象前 -&gt; 也可以定义成员可见属性</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="static-静态属性和方法"><a href="#static-静态属性和方法" class="headerlink" title="static 静态属性和方法"></a>static 静态属性和方法</h1><blockquote>
<p>静态属性和方法 -&gt; 可以添加成员可见性修饰</p>
</blockquote>
<blockquote>
<p>static age: number = 10 -&gt; 调用 -&gt; className.属性</p>
<blockquote>
<p>静态属性</p>
</blockquote>
</blockquote>
<blockquote>
<p>className.age -&gt; 在内部调用静态属性</p>
</blockquote>
<blockquote>
<p>static getStaticAge( ) { return <code>my age is ${ className.age }</code> }  </p>
<blockquote>
<p>静态方法 -&gt; 可用来对应数据库的一个表模型</p>
</blockquote>
<p>className:getStaticAge -&gt; 调用静态方法</p>
</blockquote>
<hr>
<h1 id="readonly-只读修饰符"><a href="#readonly-只读修饰符" class="headerlink" title="readonly 只读修饰符"></a>readonly 只读修饰符</h1><blockquote>
<p>在类中 readonly name: string = ‘lindada’ -&gt; 修饰name为只读  </p>
<blockquote>
<p>只读属性不能修改 -&gt; 类似于常量</p>
</blockquote>
</blockquote>
<hr>
<h1 id="enum-枚举"><a href="#enum-枚举" class="headerlink" title="enum 枚举"></a>enum 枚举</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> DaysOfTheWeek &#123; </span><br><span class="line">	SUN, MON, TUE, WED, THU, FRI, SAT</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义枚举 -&gt; 是一个集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> day: DaysOfTheWeek</span><br><span class="line">day = DaysOfTheWeek.MON</span><br><span class="line"><span class="comment">// 使用提取出MON -&gt; 值为 1 -&gt;  从 0 开始的number</span></span><br><span class="line"><span class="comment">// 定义时枚举默认值 -&gt; SUN = 100, MON, …</span></span><br></pre></td></tr></table></figure>

<h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><blockquote>
<p>数据库存的类型的number -&gt; 表现出来是一个有意义的字符串<br>利用有意义可读性的字符串 -&gt; 更方便操作处理数据</p>
</blockquote>
<hr>
<h1 id="ts-node、nodemon自动化"><a href="#ts-node、nodemon自动化" class="headerlink" title="ts-node、nodemon自动化"></a>ts-node、nodemon自动化</h1><h2 id="ts-node"><a href="#ts-node" class="headerlink" title="ts-node"></a>ts-node</h2><p><a href="https://github.com/TypeStrong/ts-node?_blank" target="_blank" rel="noopener">TS在git官方文档</a></p>
<blockquote>
<p>npm install -D ts-node  </p>
<blockquote>
<p>安装 ts-node</p>
</blockquote>
</blockquote>
<blockquote>
<p>ts-node ts文件名 -&gt; 运行该文件 -&gt; 自动编译和运行ts  </p>
<blockquote>
<p>把编译后的js文件放在内存中<br>若要编译后的js文件 -&gt; 还是需要tsc 文件名</p>
</blockquote>
</blockquote>
<h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><p><a href="https://github.com/remy/nodemon?_blank" target="_blank" rel="noopener">nodemon在git官方文档</a></p>
<p><strong>nodemon -&gt; 监控改变并自动化重启</strong></p>
<blockquote>
<p>npm install nodemon -S -D  </p>
<blockquote>
<p>安装 nodemon 插件</p>
</blockquote>
<p>nodemon —exec 文件名 文件目录 -&gt; nodemon —exec ts-node ./index.ts</p>
</blockquote>
<hr>
<h1 id="Interfaces-接口介绍-、鸭子类型"><a href="#Interfaces-接口介绍-、鸭子类型" class="headerlink" title="Interfaces 接口介绍 、鸭子类型"></a>Interfaces 接口介绍 、鸭子类型</h1><blockquote>
<p>duck typing -&gt; 鸭子类型  </p>
<blockquote>
<p>看起来像鸭子，我们就认为它是鸭子</p>
</blockquote>
</blockquote>
<blockquote>
<p>Interface -&gt; 接口 -&gt; 定义一个函数 -&gt; 函数中设定一定规范 -&gt; 操作一些特定的事</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数 -&gt; value是接口类型，这个接口类型要有name属性</span></span><br><span class="line"><span class="keyword">const</span> sayName = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(value.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">	age: <span class="number">17</span>,</span><br><span class="line">	name: <span class="string">"dada"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> bottle = &#123;</span><br><span class="line">	litres: <span class="number">1</span>,</span><br><span class="line">	name: <span class="string">"漂流瓶"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayName(person)	<span class="comment">// sayName(bottle)</span></span><br><span class="line"><span class="comment">// 有个name属性的对象就可以传过去</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Interfaces-接口"><a href="#Interfaces-接口" class="headerlink" title="Interfaces 接口"></a>Interfaces 接口</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义接口 -&gt; 跟规则性质差不多</span></span><br><span class="line"><span class="keyword">interface</span> Named &#123;</span><br><span class="line">	<span class="comment">// 属性</span></span><br><span class="line">	name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义为接口类型 -&gt; 设置规则</span></span><br><span class="line"><span class="keyword">const</span> sayName = <span class="function">(<span class="params">value: Named</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(value.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">	age: <span class="number">27</span>,</span><br><span class="line">	name: <span class="string">"dada"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有多个重名的接口 -&gt; 内部规则会合并在一起</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>作用 -&gt; 在编译时候就知道是否符合规则 -&gt; 输入需要有name属性</p>
</blockquote>
<hr>
<h1 id="Interfaces-方法体"><a href="#Interfaces-方法体" class="headerlink" title="Interfaces 方法体"></a>Interfaces 方法体</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Named &#123;</span><br><span class="line">	<span class="comment">// 方法体</span></span><br><span class="line">	print(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayName = <span class="function">(<span class="params">value: Named</span>) =&gt;</span> &#123;</span><br><span class="line">	value.print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">"dada"</span>,</span><br><span class="line">	print: <span class="function"><span class="params">()</span>=&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayName(person)</span><br></pre></td></tr></table></figure>

<p><strong>需要符合具有该方法体</strong></p>
<hr>
<h1 id="type-alias-类型别名"><a href="#type-alias-类型别名" class="headerlink" title="type alias 类型别名"></a>type alias 类型别名</h1><blockquote>
<p>定义类型<br>type myName = string; -&gt; 也可以定义为数组对象的数据类型 -&gt; 也可以具有方法体等<br>let my_name: myName = ‘dada’</p>
</blockquote>
<hr>
<h1 id="class、type、interface"><a href="#class、type、interface" class="headerlink" title="class、type、interface"></a>class、type、interface</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">	name: <span class="built_in">string</span>;</span><br><span class="line">	greet( ): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类连接接口 -&gt; 必须有name属性和greet( )方法体 -&gt; 可以接多接口</span></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">implements</span> Person &#123;</span><br><span class="line">	name: <span class="built_in">string</span></span><br><span class="line">	greet( ): <span class="built_in">void</span> &#123; <span class="built_in">console</span>.log(<span class="string">'I am employee'</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化的对象本身也可以定义一个类型来new class</span></span><br></pre></td></tr></table></figure>

<p><strong>一般是 interface -&gt; class(implements) -&gt; new object</strong></p>
<hr>
<h1 id="可选属性"><a href="#可选属性" class="headerlink" title="? 可选属性"></a>? 可选属性</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以用class 和 变量来接接口 -&gt; 设置可选属性</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">	first_name?: <span class="built_in">string</span></span><br><span class="line">	last_name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="interface-readonly-只读"><a href="#interface-readonly-只读" class="headerlink" title="interface readonly 只读"></a>interface readonly 只读</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">	readonly first_name: <span class="built_in">string</span></span><br><span class="line">	last_name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Person接口的first_name属性为只读的 -&gt; 当使用了这个接口时 -&gt; 无法修改该属性</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ReadonlyArray -&gt; 只读数组</p>
</blockquote>
<blockquote>
<p>readonly 和 const 的区别 -&gt; const是常量 readonly是接口、类中使用</p>
</blockquote>
<h1 id="interface-function-type-函数类型"><a href="#interface-function-type-函数类型" class="headerlink" title="interface function type 函数类型"></a>interface function type 函数类型</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> PrintClassBack &#123;</span><br><span class="line">	<span class="comment">// 可以简单理解为匿名函数 -&gt; 没有函数名</span></span><br><span class="line">	(success: <span class="built_in">boolean</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> printCallBack: PrintClassBack</span><br><span class="line">printCallBack = ( suc: <span class="built_in">boolean</span> ): <span class="function"><span class="params">void</span> =&gt;</span> &#123;	<span class="comment">// 函数名可以加上 类型需一致</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"callback"</span>, suc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="lt-数据类型-gt-断言"><a href="#lt-数据类型-gt-断言" class="headerlink" title="&lt;数据类型&gt; - 断言"></a>&lt;数据类型&gt; - 断言</h1><h2 id="断言概念"><a href="#断言概念" class="headerlink" title="断言概念"></a>断言概念</h2><blockquote>
<p>typeScript中编译时 -&gt; 编译时告诉编译器变量是哪种类型的方法<br>程序员操作时 -&gt; 更可能知道变量是哪种类型</p>
</blockquote>
<blockquote>
<p>跟类型转换有点相似 -&gt; 但只用于编译时期 -&gt; 让操作时可能变换方法  </p>
<blockquote>
<p>但是不改变数据类型 只告诉编译器可以当作某数据类型操作</p>
</blockquote>
</blockquote>
<blockquote>
<p>let x: any = “dada”</p>
<blockquote>
<p>任意一个类型 -&gt; 不能明确变量是哪种类型<br><string> 表示编译时 -&gt; 断言为字符串 -&gt; 可以才可以使用字符串方法操作<br>let s = (<string>x).substring(0, 3) -&gt; 截取出从0开始三个字符串</string></string></p>
</blockquote>
</blockquote>
<hr>
<h1 id="extends-接口继承"><a href="#extends-接口继承" class="headerlink" title="extends 接口继承"></a>extends 接口继承</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">	name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承另一个接口Person -&gt; 有name和age属性</span></span><br><span class="line"><span class="keyword">interface</span> Person1 <span class="keyword">extends</span> Person &#123;</span><br><span class="line">	age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="extends-接口继承-类"><a href="#extends-接口继承-类" class="headerlink" title="extends 接口继承 - 类"></a>extends 接口继承 - 类</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个类</span></span><br><span class="line"><span class="keyword">class</span> Component &#123;</span><br><span class="line">	<span class="keyword">private</span> width: <span class="built_in">number</span></span><br><span class="line">	<span class="keyword">private</span> height: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params">width: <span class="built_in">number</span>, height: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.width = width</span><br><span class="line">		<span class="keyword">this</span>.height = height</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	display( ): <span class="built_in">void</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.width)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口继承类</span></span><br><span class="line"><span class="comment">// 可重写属性和方法 -&gt; 对应接的class也要</span></span><br><span class="line"><span class="keyword">interface</span> Widget <span class="keyword">extends</span> Component &#123; </span><br><span class="line">	hide( ): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类接接口 -&gt; 需要继承有接口继承后的属性和方法体 -&gt; 才能接该接口</span></span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> Component <span class="keyword">implements</span> Widget &#123;</span><br><span class="line">	hide( ): <span class="built_in">void</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'hiding'</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象 -&gt; 类接接口 -&gt; 重写属性和方法 -&gt; new对象操作</span></span><br><span class="line"><span class="keyword">let</span> w: Widget = <span class="keyword">new</span> Button(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">w.display( )</span><br><span class="line">w.hide( )</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Indexable-Types-索引型类型-1"><a href="#Indexable-Types-索引型类型-1" class="headerlink" title="Indexable Types 索引型类型 - 1"></a>Indexable Types 索引型类型 - 1</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> States &#123;</span><br><span class="line">	[index: <span class="built_in">string</span>]: <span class="built_in">boolean</span>;	<span class="comment">// 可以指定索引的类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s: States = &#123;</span><br><span class="line">    <span class="string">'enabled'</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'maximized'</span>: <span class="literal">false</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用中括号代表索引</span></span><br><span class="line"><span class="comment">// s['enabled'] -&gt; true</span></span><br><span class="line"><span class="comment">// s['maximized'] -&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> States &#123;</span><br><span class="line">	[index: <span class="built_in">number</span>]: <span class="built_in">boolean</span>;   <span class="comment">// s[0] 调用 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Indexable-Types-索引型类型-2"><a href="#Indexable-Types-索引型类型-2" class="headerlink" title="Indexable Types 索引型类型 - 2"></a>Indexable Types 索引型类型 - 2</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s2: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] </span><br><span class="line"><span class="comment">// 也定义为索引类型为number的数组</span></span><br><span class="line"><span class="comment">// 为数组类型 -&gt; 有其属性和方法</span></span><br><span class="line"><span class="comment">// s不为数组类型 -&gt; 无其属性和方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口需要自己添加属性和方法</span></span><br><span class="line"><span class="keyword">interface</span> States2 &#123;</span><br><span class="line">	[index: <span class="built_in">number</span>]: <span class="built_in">boolean</span>;	<span class="comment">// 可以指定索引的类型number</span></span><br><span class="line">	length: <span class="built_in">number</span>;</span><br><span class="line">	push(): <span class="built_in">void</span>;</span><br><span class="line">	pop(): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s3: States2 = [<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>]</span><br><span class="line">s3.length   <span class="comment">// 4</span></span><br><span class="line">s3.pop()    <span class="comment">// false	// 数组最后一位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套复杂结构接口</span></span><br><span class="line"><span class="keyword">interface</span> NestedCss &#123;</span><br><span class="line">	color?: <span class="built_in">string</span>,</span><br><span class="line">	nest?:&#123;</span><br><span class="line">		[selector: <span class="built_in">string</span>]: NestedCss		<span class="comment">// 调用自身</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> example: NestedCss = &#123;</span><br><span class="line">	color: <span class="string">'red'</span>,</span><br><span class="line">	nest:&#123;</span><br><span class="line">		<span class="string">'example'</span>: &#123;</span><br><span class="line">			color: <span class="string">'bule'</span>,</span><br><span class="line">			nest: &#123;&#125;        <span class="comment">// 嵌套</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="list-定义列表"><a href="#list-定义列表" class="headerlink" title="list 定义列表"></a>list 定义列表</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Todo &#123;</span><br><span class="line">	userId: <span class="built_in">number</span>;</span><br><span class="line">	id: <span class="built_in">number</span>;</span><br><span class="line">	used: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> todo: Todo[ ] = [</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">"userId"</span>: <span class="number">1</span>,	</span><br><span class="line">		<span class="string">"id"</span>: <span class="number">1</span>,	</span><br><span class="line">		<span class="string">"used"</span>: <span class="literal">false</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">"userId"</span>: <span class="number">2</span>,	</span><br><span class="line">		<span class="string">"id"</span>: <span class="number">2</span>,	</span><br><span class="line">		<span class="string">"used"</span>: <span class="literal">false</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">"userId"</span>: <span class="number">3</span>,	</span><br><span class="line">		<span class="string">"id"</span>: <span class="number">3</span>,	</span><br><span class="line">		<span class="string">"used"</span>: <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Parameter-Properties-参数属性"><a href="#Parameter-Properties-参数属性" class="headerlink" title="Parameter Properties - 参数属性"></a>Parameter Properties - 参数属性</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">	<span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line">	<span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>._name = name;</span><br><span class="line">		<span class="keyword">this</span>._age = age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p: Person = <span class="keyword">new</span> Person(<span class="string">"dada"</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _name: <span class="built_in">string</span>, <span class="keyword">private</span> _age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">		<span class="comment">// 等效于上面类的代码</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="getter、setter-类中读写方法"><a href="#getter、setter-类中读写方法" class="headerlink" title="getter、setter - 类中读写方法"></a>getter、setter - 类中读写方法</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _name: <span class="built_in">string</span>, <span class="keyword">private</span> _age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 读取</span></span><br><span class="line">	getName( ): <span class="built_in">string</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>._name; &#125;</span><br><span class="line">	<span class="comment">// 写入</span></span><br><span class="line">	setName(name: <span class="built_in">string</span>): <span class="built_in">void</span>&#123; <span class="keyword">this</span>._name = name; &#125;	</span><br><span class="line">	<span class="comment">// 需要调用setName 和 getName方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 读取</span></span><br><span class="line">	<span class="keyword">get</span> name( ): <span class="built_in">string</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>._name; &#125;</span><br><span class="line">	<span class="comment">// 写入</span></span><br><span class="line">	<span class="keyword">set</span> name(name: <span class="built_in">string</span>) &#123; <span class="keyword">this</span>._name = name; &#125;	<span class="comment">// 不需要return type</span></span><br><span class="line">	<span class="comment">// 直接可以Person.name</span></span><br><span class="line">&#125;</span><br><span class="line">	<span class="comment">// get 和 set会报错 -&gt; tsc - -target es5 使用这个命令编译</span></span><br><span class="line"><span class="keyword">let</span> p: Person = <span class="keyword">new</span> Person(<span class="string">'dada'</span>, <span class="number">29</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="noImplicit-This-this-指向"><a href="#noImplicit-This-this-指向" class="headerlink" title="noImplicit This - this 指向"></a>noImplicit This - this 指向</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Rectangle &#123;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> w: <span class="built_in">number</span>, <span class="keyword">private</span> h: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">	getAreaFunction() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>): <span class="title">number</span> </span>&#123;	<span class="comment">// 返回一个匿名的function</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.w * <span class="keyword">this</span>.h; <span class="comment">// this指向调用上下文</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rectangle: Rectangle = <span class="keyword">new</span> Rectangle(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 返回function</span></span><br><span class="line"><span class="keyword">let</span> areaFunction = rectangle.getAreaFunction;</span><br><span class="line"><span class="comment">// 得到面积</span></span><br><span class="line"><span class="keyword">let</span> area = areaFunction( );</span><br><span class="line"><span class="built_in">console</span>.log(area);  <span class="comment">//NaN -&gt; 与想得到的值不同</span></span><br><span class="line"><span class="comment">// this 是指向调用的上下文 -&gt; 导致this不明确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决this指向问题</span></span><br><span class="line"><span class="comment">// function改造成箭头函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>): <span class="title">number</span> </span>&#123;	<span class="comment">// 返回一个匿名的function</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.w * <span class="keyword">this</span>.h; <span class="comment">// this指向对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="function-type-函数类型"><a href="#function-type-函数类型" class="headerlink" title="function type - 函数类型"></a>function type - 函数类型</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数的类型</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">any</span>;</span><br><span class="line">a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'dada'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">let</span> c: <span class="built_in">Function</span>;</span><br><span class="line">c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'dada'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line"><span class="keyword">let</span> d: <span class="function">(<span class="params">params: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>;  <span class="comment">// 规定类型是一个function、参数为string、返回值为string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.</span></span><br><span class="line"><span class="keyword">type</span> fun = <span class="function">(<span class="params">params: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>;  <span class="comment">//类型别名</span></span><br><span class="line"><span class="keyword">let</span> a: fun  <span class="comment">// 定义function类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.</span></span><br><span class="line"><span class="keyword">interface</span> fun &#123; <span class="comment">// function 类型的接口</span></span><br><span class="line">	(params: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a: e = <span class="function">(<span class="params">pass: <span class="built_in">string</span></span>) =&gt;</span> pass;  <span class="comment">// 定义function类型</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Function-Overloading-函数重载1"><a href="#Function-Overloading-函数重载1" class="headerlink" title="Function Overloading - 函数重载1"></a>Function Overloading - 函数重载1</h1><blockquote>
<p>函数重载允许用相同的名字与不同的参数来创造多个函数</p>
<blockquote>
<p>在javaScript中会被覆盖</p>
</blockquote>
</blockquote>
<blockquote>
<p>先提供没有实现的函数定义列表<br>须提供所有函数列表组合的实现</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数体 -&gt; 参数不同</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z: <span class="built_in">number</span></span>): <span class="title">number</span></span>;  <span class="comment">// 重载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面两种函数定义的组合实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">number</span>, y:<span class="built_in">number</span>, z?:<span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> z ? x+y+z : x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Function-Overloading-函数重载2"><a href="#Function-Overloading-函数重载2" class="headerlink" title="Function Overloading - 函数重载2"></a>Function Overloading - 函数重载2</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数体 -&gt; 参数类型不同，返回类型也不同</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">str: <span class="built_in">string</span>, y: <span class="built_in">number</span></span>): <span class="title">string</span>[ ]</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">x: <span class="built_in">any</span>, y: <span class="built_in">number</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 判断类型不同时 -&gt; 不同操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>放在class中的静态方法和实例方法都可以重载方法<br>实例方法 -&gt; new之后调用<br>静态方法 -&gt; 直接className调用</p>
</blockquote>
<hr>
<h1 id="Guards-1-守卫-typeof"><a href="#Guards-1-守卫-typeof" class="headerlink" title="Guards 1 守卫 - typeof"></a>Guards 1 守卫 - typeof</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 利用 typeof 来进行守卫操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">typeof</span> x);</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'a number'</span> + x);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'a string'</span> + x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">show(<span class="string">'test string'</span>);</span><br><span class="line">show(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>typeof<br>undefined -&gt; undefined<br>null -&gt; object</p>
</blockquote>
<hr>
<h1 id="Guards-2-守卫-instanced"><a href="#Guards-2-守卫-instanced" class="headerlink" title="Guards 2 守卫 - instanced"></a>Guards 2 守卫 - instanced</h1><blockquote>
<p>利用类型断言 as 来判断该类型(class)中有无相关方法和属性<br>再抽出isClass方法 -&gt; 方法中理由类型断言</p>
</blockquote>
<blockquote>
<p>最好使用<br>instanceof -&gt; 判断是否为new出来的实例 -&gt; 无需断言<br>if(vehicle instanceof Car) {<br>   console.log(‘typ is Car’);<br>}</p>
</blockquote>
<hr>
<h1 id="strictNullChecks-严格空值检查"><a href="#strictNullChecks-严格空值检查" class="headerlink" title="strictNullChecks - 严格空值检查"></a>strictNullChecks - 严格空值检查</h1><blockquote>
<p>undefined -&gt; 没有值 -&gt; 类型为undefined -&gt; 可以为任意类型的子类型<br>null -&gt; 值为空 -&gt; 类型为null -&gt; 可以为任意类型的子类型</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">x: <span class="built_in">number</span> | <span class="literal">undefined</span> | <span class="literal">null</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x === <span class="literal">undefined</span>) &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'value is undefined'</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'value is null'</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'value is number'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y;</span><br><span class="line"><span class="keyword">let</span> z = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">show(x);    <span class="comment">// 10</span></span><br><span class="line">show(y);    <span class="comment">// value is undefined</span></span><br><span class="line">show(z);    <span class="comment">// value is null</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当编译时 tsc index.ts - -strictNullChecks  </p>
<blockquote>
<p>undefined和null类型不为其他任意类型的子类型</p>
</blockquote>
</blockquote>
<hr>
<h1 id="Assertion-Operator-非空检查"><a href="#Assertion-Operator-非空检查" class="headerlink" title="Assertion Operator - 非空检查"></a>Assertion Operator - 非空检查</h1><blockquote>
<p>将传入字符串分为两半<br>return str!.substring(0, str!.length / 2); -&gt; ！ 告诉编译器该字符串不能为空（编译时）<br>编译时需加严格空值检查</p>
</blockquote>
<hr>
<h1 id="never-never类型"><a href="#never-never类型" class="headerlink" title="never - never类型"></a>never - never类型</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 告诉编译器没有返回值的类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loopForever</span>(<span class="params"> </span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 无限循环</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// void -&gt; 返回的类型为空 undefined</span></span><br><span class="line"><span class="comment">// 用于 1. 无限循环时（执行不到底部） 2.扔出异常throw时 -&gt; 不会有返回值</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="ajax封装"><a href="#ajax封装" class="headerlink" title="ajax封装"></a>ajax封装</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义请求数据接口</span></span><br><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">	<span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">	url: <span class="built_in">string</span>;</span><br><span class="line">	data?: <span class="built_in">string</span>;</span><br><span class="line">	dataType: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义ajax请求方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">config: Config</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();	<span class="comment">// 建立一个http对象</span></span><br><span class="line">	xhr.open(config.type, config.url, <span class="literal">true</span>);	<span class="comment">// 创建连接 -&gt; true为异步</span></span><br><span class="line">	xhr.send(config.data);		<span class="comment">// 发送连接</span></span><br><span class="line">	xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;	<span class="comment">// 当状态改变时</span></span><br><span class="line">		<span class="keyword">if</span>(xhr.readyState===<span class="number">4</span> &amp;&amp; xhr.status===<span class="number">200</span>) &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">'成功！'</span>);</span><br><span class="line">			<span class="keyword">if</span>(config.dataType===<span class="string">'json'</span>) &#123;</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用ajax请求</span></span><br><span class="line">ajax(&#123;</span><br><span class="line">	<span class="keyword">type</span>: <span class="string">'get'</span>,</span><br><span class="line">	url: <span class="string">'www.baidu.com'</span>,</span><br><span class="line">	data: <span class="string">'xxx'</span>,</span><br><span class="line">	dataType: <span class="string">'json'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="加密的函数类型接口"><a href="#加密的函数类型接口" class="headerlink" title="加密的函数类型接口"></a>加密的函数类型接口</h1><blockquote>
<p>作用: 对方法传入的参数 以及返回值进行约束</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口约束</span></span><br><span class="line"><span class="keyword">interface</span> encrypt&#123;</span><br><span class="line">	(key: <span class="built_in">string</span>, value: <span class="built_in">string</span>):<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法</span></span><br><span class="line"><span class="keyword">let</span> md5: encrypt = <span class="function"><span class="keyword">function</span>(<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">string</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">	<span class="comment">// 模拟操作加密算法</span></span><br><span class="line">	<span class="keyword">return</span> key+value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line"><span class="built_in">console</span>.log(md5(<span class="string">'name'</span>, <span class="string">'zhangsan'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sha1: encrypt = <span class="function"><span class="keyword">function</span>(<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">string</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">	<span class="comment">// 模拟操作加密算法</span></span><br><span class="line">	<span class="keyword">return</span> key + <span class="string">'————'</span> + value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sha1(<span class="string">'name'</span>, <span class="string">'zhangsan'</span>));</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="可索引接口-类类型接口"><a href="#可索引接口-类类型接口" class="headerlink" title="可索引接口 / 类类型接口"></a>可索引接口 / 类类型接口</h1><blockquote>
<p>可索引接口 -&gt; 对数组、对象的约束（不常用）<br>通常ts定义数组约束方法<br>let arr: number[ ] -&gt; 数组内的类型必须为number<br>let arr1: Array<string> -&gt; 数组内的类型必须为string</string></p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义可索引接口</span></span><br><span class="line"><span class="comment">// 对数组的约束</span></span><br><span class="line"><span class="keyword">interface</span> UserArr &#123;</span><br><span class="line">	[index: <span class="built_in">number</span>]:<span class="built_in">string</span>; <span class="comment">// 索引值类型必须为number / 且内容必须为string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对对象的约束</span></span><br><span class="line"><span class="keyword">interface</span> UserObj &#123;</span><br><span class="line">	[index: <span class="built_in">string</span>]:<span class="built_in">string</span>; <span class="comment">// 索引值类型必须为string / 且内容必须为string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类类型接口：对类的约束 -&gt; 与抽象类有点相似</span></span><br><span class="line"><span class="keyword">interface</span> Animal&#123;	<span class="comment">// 多态 -&gt; 可让子类均可重写</span></span><br><span class="line">	name: <span class="built_in">string</span>;</span><br><span class="line">	eat(str: <span class="built_in">string</span>):<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">implements</span> Animal&#123;	<span class="comment">// 对类进行接口约束</span></span><br><span class="line">	name: <span class="built_in">string</span>;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	eat(): <span class="built_in">void</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'is eating…'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d: Animal = <span class="keyword">new</span> Dog(<span class="string">'小黑'</span>);</span><br><span class="line">d.eat(<span class="string">'骨头'</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="接口的扩展、接口的继承"><a href="#接口的扩展、接口的继承" class="headerlink" title="接口的扩展、接口的继承"></a>接口的扩展、接口的继承</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扩展 -&gt; 接口可以继承接口</span></span><br><span class="line"><span class="keyword">interface</span> Animal&#123;</span><br><span class="line">	eat():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person <span class="keyword">extends</span> Animal&#123;	<span class="comment">// extends 接口继承</span></span><br><span class="line">	work(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> Programmer&#123;</span><br><span class="line">	<span class="keyword">public</span> name:<span class="built_in">string</span>;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	coding()&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'is coding…'</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承父类和接Person接口</span></span><br><span class="line"><span class="keyword">class</span> Web <span class="keyword">extends</span> Programmer <span class="keyword">implements</span> Person&#123;</span><br><span class="line">	<span class="keyword">public</span> name:<span class="built_in">string</span>;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Person接口的方法体</span></span><br><span class="line">	eat()&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'eating'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	work()&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'working'</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 继承了Programmer类的方法体 -&gt; coding()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">interface</span> ConfigFn&#123;</span><br><span class="line">	<span class="comment">// 泛型方法约定</span></span><br><span class="line">	&lt;T&gt;(value1:T, value2:T):T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现泛型方法接口</span></span><br><span class="line"><span class="keyword">let</span> setData:ConfigFn = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">value1:T, value2:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> value2+value2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用时指定方法</span></span><br><span class="line">setData&lt;<span class="built_in">string</span>&gt;(<span class="string">'name'</span>, <span class="string">'张三'</span>);	<span class="comment">// 指定是string类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="keyword">interface</span> ConfigFn&lt;T&gt;&#123;</span><br><span class="line">	<span class="comment">// 泛型方法约定</span></span><br><span class="line">	&lt;T&gt;(value1:T, value2:T):T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义泛型方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value1:T, value2:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> value2+value2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化指定类方法 并 接接口</span></span><br><span class="line"><span class="keyword">let</span> myGetData:ConfigFn = getData;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">myGetData&lt;<span class="built_in">string</span>&gt;(<span class="string">'20'</span>, <span class="string">'30'</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="把类作为参数类型的泛型类"><a href="#把类作为参数类型的泛型类" class="headerlink" title="把类作为参数类型的泛型类"></a>把类作为参数类型的泛型类</h1><blockquote>
<p>泛型 -&gt; 可以帮助我们避免重复的代码以及对不特定数据类型的支持</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比如有个最小堆算法 普通类型 -&gt; T泛型类</span></span><br><span class="line"><span class="keyword">class</span> MinClass&lt;T&gt;&#123;</span><br><span class="line">	<span class="keyword">public</span> list:T[] = [];</span><br><span class="line">	add(value:T):<span class="built_in">void</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.list.push(value);</span><br><span class="line">	&#125;</span><br><span class="line">	min():T&#123;</span><br><span class="line">		<span class="keyword">let</span> minNum = <span class="keyword">this</span>.list[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; <span class="keyword">this</span>.list.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(minNum &gt; <span class="keyword">this</span>.list[i]) &#123;</span><br><span class="line">				minNum = <span class="keyword">this</span>.list[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> minNum;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用泛型类 -&gt; 指定传入类型</span></span><br><span class="line"><span class="keyword">let</span> m1 = <span class="keyword">new</span> MinClass&lt;<span class="built_in">number</span>&gt;( );		<span class="comment">// 实例化类，指定类的T代表类型为number</span></span><br><span class="line">m1.add(<span class="number">11</span>);</span><br><span class="line">m1.add(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m2 = <span class="keyword">new</span> MinClass&lt;<span class="built_in">string</span>&gt;( );		<span class="comment">// 实例化类，指定类的T代表类型为string</span></span><br><span class="line">m2.add(<span class="string">'a'</span>);</span><br><span class="line">m2.add(<span class="string">'c'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个User类 -&gt; 映射数据库表字段</span></span><br><span class="line"><span class="keyword">class</span> User&#123;</span><br><span class="line">	userName: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">	password: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个文章分类类</span></span><br><span class="line"><span class="keyword">class</span> ArticleCate&#123;</span><br><span class="line">	title: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">	desc: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params">params: &#123;		<span class="comment">// 要求实例化时必须传入参数</span></span></span><br><span class="line"><span class="params">		title:<span class="built_in">string</span> | <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="params">		desc:<span class="built_in">string</span> | <span class="literal">undefined</span></span></span><br><span class="line"><span class="params">	&#125;</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.title = params.title;</span><br><span class="line">		<span class="keyword">this</span>.desc = params.desc;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个MySqlDb类 -&gt; 操作数据库的泛型类</span></span><br><span class="line"><span class="keyword">class</span> MySqlDb&lt;T&gt; &#123;</span><br><span class="line">	add(value:T):<span class="built_in">boolean</span>&#123;		<span class="comment">// 将类当作参数类型来验证</span></span><br><span class="line">		<span class="built_in">console</span>.log(value);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化后再传值</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User( );</span><br><span class="line">user.userName = <span class="string">'张三'</span>;</span><br><span class="line">user.password = <span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Db = <span class="keyword">new</span> MySqlDb&lt;User&gt;(); 	<span class="comment">// 校验传入的是User类</span></span><br><span class="line"><span class="comment">// 将User类作为参数传入MySqlDb中</span></span><br><span class="line">Db.add(user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化articleCate时传值</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> ArticleCate(&#123;</span><br><span class="line">	title: <span class="string">'分类'</span>,</span><br><span class="line">	desc: <span class="string">'泛类型类'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Db = <span class="keyword">new</span> MySqlDb&lt;ArticleCate&gt;(); <span class="comment">// 校验传入的是ArticleCate类</span></span><br><span class="line">Db.add(a)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="TypeScript-封装统一操作数据库"><a href="#TypeScript-封装统一操作数据库" class="headerlink" title="TypeScript 封装统一操作数据库"></a>TypeScript 封装统一操作数据库</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个操作数据库的库 -&gt; 可以支持Mysql、Mssql、Mongodb</span></span><br><span class="line"><span class="comment">// 需要约束统一规范、以及代码重用 -&gt; 接口（统一规范）、重用（泛型）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据库操作接口</span></span><br><span class="line"><span class="keyword">interface</span> DBI&lt;T&gt;&#123;   <span class="comment">//泛型接口</span></span><br><span class="line">	add(info:T):<span class="built_in">boolean</span>;</span><br><span class="line">	update(info:T, id:<span class="built_in">number</span>):<span class="built_in">boolean</span>;</span><br><span class="line">	<span class="keyword">delete</span>(id:<span class="built_in">number</span>):<span class="built_in">boolean</span>;</span><br><span class="line">	<span class="keyword">get</span>(id:<span class="built_in">number</span>):<span class="built_in">any</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要接泛型接口 -&gt; 该类也应该是泛型类</span></span><br><span class="line"><span class="comment">// 定义一个操作mysql数据库的类</span></span><br><span class="line"><span class="keyword">class</span> MysqlDb&lt;T&gt; <span class="keyword">implements</span> DBI&lt;T&gt;&#123;</span><br><span class="line">	add(info:T):<span class="built_in">boolean</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	update(info:T, id:<span class="built_in">number</span>):<span class="built_in">boolean</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span>(id:<span class="built_in">number</span>):<span class="built_in">boolean</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">get</span>(id:<span class="built_in">number</span>):<span class="built_in">any</span>[]&#123;</span><br><span class="line">		<span class="keyword">return</span> [<span class="literal">true</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同理定义MsSqlDb和MongoDb的类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加Mysql数据库</span></span><br><span class="line"><span class="comment">// 定义一个User类和数据库表做映射</span></span><br><span class="line"><span class="keyword">class</span> User&#123;</span><br><span class="line">	userName:<span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">	password:<span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> u = <span class="keyword">new</span> User();</span><br><span class="line">u.userName = <span class="string">'张三'</span>;</span><br><span class="line">u.password = <span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mysql = <span class="keyword">new</span> MysqlDb&lt;User&gt;();		<span class="comment">// 类作为参数来约束数据传入的类型</span></span><br><span class="line">mysql.add(u);		<span class="comment">// 传入u实例数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换对应数据库就切换类</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="TypeScript模块化"><a href="#TypeScript模块化" class="headerlink" title="TypeScript模块化"></a>TypeScript模块化</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件1</span></span><br><span class="line"><span class="keyword">let</span> dbUrl = <span class="string">'xxxx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露方法1</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>):<span class="title">any</span>[]</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'获取数据库的数据'</span>)</span><br><span class="line">	<span class="keyword">return</span> [</span><br><span class="line">		&#123;</span><br><span class="line">			title: <span class="string">'aaa'</span></span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露方法2</span></span><br><span class="line"><span class="keyword">export</span>&#123;</span><br><span class="line">	dbUrl,</span><br><span class="line">	getData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件2</span></span><br><span class="line"><span class="keyword">import</span> &#123; getData <span class="keyword">as</span> <span class="keyword">get</span> &#125; <span class="keyword">from</span> <span class="string">'./xxx文件'</span> <span class="comment">// 引入方法</span></span><br><span class="line">getData( );</span><br><span class="line"><span class="keyword">get</span>( );     <span class="comment">// 相同重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// export default getData -&gt; 默认暴露</span></span><br><span class="line"><span class="comment">// import getData from './文件1' -&gt; 默认引入</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="命名空间模块化"><a href="#命名空间模块化" class="headerlink" title="命名空间模块化"></a>命名空间模块化</h1><blockquote>
<p>命名空间 -&gt; 避免各变量命名冲突，可将相似功能的函数、类、接口等放置命名空间</p>
</blockquote>
<blockquote>
<p>命名空间和模块的区别：<br>命名空间 -&gt; 内部模块 -&gt; 主要用户组织代码，避免命名冲突<br>模块 -&gt; ts外部模块，侧重代码的复用 -&gt; 一个模块里可能会有多个命名空间  </p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块文件A</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> A &#123;    <span class="comment">// 命名空间默认私有 -&gt; 可暴露</span></span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">interface</span> Animal&#123; &#125;;	<span class="comment">// 使用内部接口和方法需要暴露</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">class</span> Dog <span class="keyword">implements</span> Animal&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> B &#123;</span><br><span class="line">	<span class="keyword">interface</span> Animal&#123; &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">class</span> Dog <span class="keyword">implements</span> Animal&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入模块文件A</span></span><br><span class="line"><span class="keyword">import</span> &#123; A, B &#125; <span class="keyword">from</span> <span class="string">'./modules/a'</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> A.Dog(<span class="string">'小黑'</span>);</span><br><span class="line">a.eat();    <span class="comment">// 调用</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h1><blockquote>
<p>装饰器 -&gt; 是JS过去几年中最大的成就之一，是ES7标准特性之一<br>装饰器 -&gt; 实际是一个方法 -&gt; 可以注入到类、方法、属性参数上来扩展相关的功能<br>常见的装饰器 -&gt; 类装饰器、属性装饰器、方法装饰器、参数装饰器</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义普通装饰器 -&gt; 不能传入参数（默认为当前类）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params:<span class="built_in">any</span></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(params);		<span class="comment">// params 就是当前类</span></span><br><span class="line">	params.prototype.apiUrl = <span class="string">'xxxx'</span>;		<span class="comment">// 给这个类动态扩展一个apiUrl属性</span></span><br><span class="line">	params.prototype.run = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;		<span class="comment">// 给这个类动态扩展一个run方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span>			<span class="comment">// 调用装饰器 -&gt; 动态扩展类的功能（不能加分号）</span></span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	getData() &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> http:<span class="built_in">any</span> = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(http.apiUrl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义装饰器工厂 -&gt; 可传入参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">any</span></span>)</span>&#123;    <span class="comment">// 类装饰器接收当前类的一个参数</span></span><br><span class="line">		<span class="built_in">console</span>.log(target);    <span class="comment">// 当前类</span></span><br><span class="line">		<span class="built_in">console</span>.log(params);    <span class="comment">// 'hello'</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 同样可以动态扩展target当前类的功能</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span>(<span class="string">'hello'</span>)			<span class="comment">// 传入参数</span></span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	getData() &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> http:<span class="built_in">any</span> = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(http.apiUrl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类装饰器 -&gt; 用装饰器修改当前类的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">target:<span class="built_in">any</span></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(target);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> HttpClient &#123;</span><br><span class="line">		apiUrl:<span class="built_in">any</span> = <span class="string">'我是装饰器修改后的apiUrl'</span>;</span><br><span class="line">		getData()&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="keyword">this</span>.apiUrl);</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span></span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">	<span class="keyword">public</span> apiUrl:<span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.apiUrl = <span class="string">'我是构造函数里的apiUrl'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	getData() &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.apiUrl);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData(); <span class="comment">// '我是装饰器修改后的apiUrl'</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h1><blockquote>
<p>属性装饰器 -&gt; 接受2个参数 -&gt; 1.当前原型对象(实例化后的); 2.属性名称  </p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义属性装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProperty</span>(<span class="params">params:<span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">any</span>, attr:<span class="built_in">any</span></span>)</span>&#123;  <span class="comment">// 属性装饰器接收两个参数</span></span><br><span class="line">		<span class="built_in">console</span>.log(target);    <span class="comment">// http（实例化的对象）</span></span><br><span class="line">		<span class="built_in">console</span>.log(attr);  <span class="comment">// apiUrl</span></span><br><span class="line"></span><br><span class="line">		target[attr] = params;  <span class="comment">// 将对象的attr属性修改成xxxxx</span></span><br><span class="line">			<span class="comment">// target[attr] === params.prototype.attr</span></span><br><span class="line">				<span class="comment">// 因为target为当前原型对象</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@logProperty</span>		<span class="comment">// 调用类装饰器 </span></span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">	<span class="meta">@logProperty</span>(<span class="string">'xxxxx'</span>)</span><br><span class="line">	<span class="keyword">public</span> apiUrl:<span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.apiUrl = <span class="string">'我是构造函数里的apiUrl'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	getData() &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.apiUrl);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData(); <span class="comment">// '我是装饰器修改后的apiUrl'</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h1><blockquote>
<p>方法装饰器 -&gt; 用来监视，修改或者替换方法定义<br>方法装饰器3个参数   </p>
<blockquote>
<p>1.类的构造函数/类的实例化原型对象<br>2.成员名字<br>3.成员的属性描述符  </p>
</blockquote>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义方法装饰器  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logMethod</span>(<span class="params">params:<span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">any</span>, methodName:<span class="built_in">any</span>, desc:<span class="built_in">any</span></span>)</span>&#123;  <span class="comment">// 接收三个参数</span></span><br><span class="line">		<span class="built_in">console</span>.log(target);    <span class="comment">// 类的原型对象</span></span><br><span class="line">		<span class="built_in">console</span>.log(methodName);    <span class="comment">// getData</span></span><br><span class="line">		<span class="built_in">console</span>.log(desc);  <span class="comment">// &#123;方法描述信息&#125;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 扩展当前类的属性和方法</span></span><br><span class="line">		target.apiUrl = <span class="string">'xxx'</span>;</span><br><span class="line">		target.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">'run'</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 修改装饰器的当前方法</span></span><br><span class="line">		<span class="keyword">let</span> oMethod = desc.value;</span><br><span class="line">		desc.value = <span class="function"><span class="keyword">function</span>(<span class="params">...args:<span class="built_in">any</span>[]</span>)</span>&#123;     <span class="comment">// 替换且将接收到的参数放入数组</span></span><br><span class="line">			args = args.map(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">String</span>(value);   <span class="comment">// 修改该方法转换为String类型</span></span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 再替换回原来方法		-&gt; 变为修改当前方法</span></span><br><span class="line">			oMethod.apply(<span class="keyword">this</span>, args);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">	<span class="meta">@logMethod</span>(<span class="string">'xxxxx'</span>)</span><br><span class="line">	<span class="keyword">public</span> apiUrl:<span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.apiUrl = <span class="string">'我是构造函数里的apiUrl'</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@logMethod</span>(<span class="string">'www.baidu.com'</span>)</span><br><span class="line">	getData(...args:<span class="built_in">any</span>[]) &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(args)   <span class="comment">// ["123", "xxx"]	// 均修改为string类型</span></span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.apiUrl);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData(<span class="number">123</span>, <span class="string">'xxx'</span>);   <span class="comment">// '我是装饰器修改后的apiUrl'</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>还有方法参数装饰器 -&gt; 为方法参数动态增加元素</p>
<blockquote>
<p>1.类的构造函数/类的实例化原型对象<br>2.参数名字<br>3.参数再函数参数列表中的索引  </p>
</blockquote>
<p>调用 -&gt; getData(@logParams a:any, b:any) { };</p>
</blockquote>
<blockquote>
<p>可以装饰多个装饰器<br>多个同样的装饰器 -&gt; 由后至前</p>
</blockquote>
<blockquote>
<p>装饰器执行顺序</p>
<blockquote>
<p>属性 &gt; 方法 &gt; 方法参数 &gt; 类</p>
</blockquote>
</blockquote>
<hr>
<h1 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h1><blockquote>
<p>key -&gt; 提供正确的属性名称</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line">	x: <span class="built_in">number</span> = <span class="number">5</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y: keyof A;</span><br><span class="line">y = <span class="string">'x'</span>;    <span class="comment">// y只能是class A的一个属性名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">	x: <span class="built_in">number</span> = <span class="number">6</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">a: keyof Test, test: Test</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> test[a];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> t: Test = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="keyword">let</span> prop = getProp(<span class="string">'x'</span>, t);</span><br><span class="line"><span class="built_in">console</span>.log(prop);  <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B &#123;</span><br><span class="line">	y: keyof A; <span class="comment">// y只能是x</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="tsconfig-js-配置文件"><a href="#tsconfig-js-配置文件" class="headerlink" title="tsconfig.js - 配置文件"></a>tsconfig.js - 配置文件</h1><blockquote>
<p>配置文件 -&gt; 约束ts文件<br>在终端初始化 -&gt; tsc - -init<br>在根目录生成了tsconfig.json配置文件<br>使用该配置文件 -&gt; 在终端 tsc -&gt; 不会忽略代码 查看是否符合配置</p>
</blockquote>
<blockquote>
<p>常见配置<br>“outDir” -&gt; 编译后的node.js文件保存路径<br>“noEmit” -&gt; 不编译node.js文件</p>
<blockquote>
<p>修改为 -&gt; “noEmitOnError”: true -&gt; 当编译错误时不编译node.js文件</p>
</blockquote>
</blockquote>
<hr>
<h1 id="lodash-使用第三方插件"><a href="#lodash-使用第三方插件" class="headerlink" title="lodash - 使用第三方插件"></a>lodash - 使用第三方插件</h1><blockquote>
<p>引入lodash -&gt; 现代化的工具库 -&gt; 操作数组、函数等</p>
</blockquote>
<blockquote>
<p>初始化项目 -&gt; npm init -&gt; 主要生成package.json文件<br>npm install lodash -S<br>进入文件中导入 -&gt; import * as _ from ‘lodash’;</p>
<blockquote>
<p>若是第三方插件不是用ts编写 -&gt; 编译器不会提示和补全代码</p>
<blockquote>
<p>去找相关库的ts文档(是声明相关库的ts源码) -&gt; 可能还需要引入源码库</p>
</blockquote>
</blockquote>
</blockquote>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>简单写一下个人在学习TypeScript遇到的重点和难点<br>若有错误的地方~<br>还望各位小伙伴指出噢<br>一起加油吧！💪</p>
<blockquote>
<p>另外卑微找实习 -&gt; 但不知道咋找 -&gt; 即将大三一枚 -&gt; 超希望带带我分享下经验</p>
</blockquote>
<p><a href="https://lin_daren.gitee.io/lindada-blog/2020/07/22/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84TypeScript%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/?_blank">博客原文✨</a></p>
]]></content>
      <tags>
        <tag>TypeScript小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始初尝Three.js</title>
    <url>/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/1.gif" class>  
<p>不经意间看到了某个官网的动态效果~<br>实在是太帅啦！十分地友好<br>查了查实现该效果地技术 —— 原来是<strong>Three.js</strong><br>那就让我来从零初尝Three.js动态3D效果吧✨<br><strong>✨有大量案例和找寻源码的方法噢✨</strong></p>
<a id="more"></a>

<hr>
<blockquote>
<p>先赞后看噢~<br>你们的每一个小小的赞都会给我添加无限的动力✨</p>
</blockquote>
<hr>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>随着当今时期前端地愈来愈普及，页面实现的效果真的是越来越棒！<br>随着数字图像处理、人工智能技术的发展<br>展示给用户的视觉效果便不局限于平面的2D视觉效果<br><strong>开始注重于全方位的3D立体展示效果</strong><br><strong>力求对于商品的361度地无死角供用户认识了解</strong><br>今天~就跟着大大初尝一下优秀的三维引擎 <strong>Three.js</strong></p>
<hr>
<h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><p>Three.js是基于原生WebGL封装运行的三维引擎，在所有WebGL引擎中，Three.js是国内文资料最多、使用最广泛的三维引擎。</p>
<p>Threejs是一款WebGL三维引擎，它可以用来做什么许多许多地场景应用</p>
<p>下面我来介绍一下官方运行的经典案例吧</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="物联网3D可视化"><a href="#物联网3D可视化" class="headerlink" title="物联网3D可视化"></a>物联网3D可视化</h3><p>随着物联网的发展,工业、建筑等各个领域与物联网相关Web项目网页交互界面都会呈现出<br><strong>3D化的趋势</strong>。<br>3D的方式更为直观，当然开发成本也比较大<br>而Three.js可以将开发成本大大降低<br><a href="http://www.yanhuangxueyuan.com/3D/liangcang/index.html?_blank" target="_blank" rel="noopener">物联网粮仓3D可视化案例</a></p>
<h3 id="产品720在线预览"><a href="#产品720在线预览" class="headerlink" title="产品720在线预览"></a>产品720在线预览</h3><p>随着WebGL技术的持续推广，5G技术的持续推广，各种产品在线3D展示将会变得越来越普及<br>比如一家汽车公司的新款轿车可以在官网上在线预览<br>也许有一天一些电商平台会通过3D模型取代2D图片<br>现在你朋友推荐推荐给你一款新衣服，你会说发一张图片看看<br><strong>也许将来你会说发来一个3D模型链接看看</strong><br><a href="http://app.xuanke3d.com/apps/trayton/#/show?_blank" target="_blank" rel="noopener">沙发在线预览</a><br><a href="http://suit.xuantech.cn/?_blank" target="_blank" rel="noopener">服装在线预览</a><br><a href="https://cdn.weshape3d.com/hir001/1021/web/index.html?_blank" target="_blank" rel="noopener">洗衣机在线交互预览</a></p>
<h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><p>与webgl相关的数据可视化主要是两方面<br>一方面是海量超大数据的可视化，另一方面是与3D相关的数据可视化。<br>对于超大的海量数据而言<br>基于canvas、svg等方式进行web可视化，没有基于WebGL技术实现性能更好<br>对于3D相关的数据可视化基于WebGL技术<br><strong>借助3D引擎Threejs可以很好的实现</strong><br><a href="http://www.yanhuangxueyuan.com/3D/geojsonChina/index.html?_blank" target="_blank" rel="noopener">解析GeoJOSN数据中国GDP数据可视化</a><br><a href="https://www.echartsjs.com/examples/zh/editor.html?c=transparent-bar3d&gl=1?_blank" target="_blank" rel="noopener">3D直方图</a>  </p>
<h3 id="H5-微信小游戏"><a href="#H5-微信小游戏" class="headerlink" title="H5/微信小游戏"></a>H5/微信小游戏</h3><p>非常火的<strong>微信小游戏跳一跳</strong>就是使用Three.js引擎开发的<br>开发3D类的H5小游戏或者微信小游戏，Three.js引擎是非常好的选择噢<br>无需下载，方便传播，目前的生态非常和小游戏开发。</p>
<h3 id="科教领域"><a href="#科教领域" class="headerlink" title="科教领域"></a>科教领域</h3><p>在科教领域通过3D方式展示特定的知识相比较图像更为直观。<br><a href="http://www.rcsb.org/3d-view/2JEN/1?_blank" target="_blank" rel="noopener">科研平台-蛋白质结构可视化案例</a><br><a href="http://www.yanhuangxueyuan.com/3D/fenzi/index.html?_blank" target="_blank" rel="noopener">化学相关——分子结构可视化</a><br><a href="http://www.yanhuangxueyuan.com/3D/solarSystem/index.html?_blank" target="_blank" rel="noopener">地理天文相关——太阳系3D预览</a>   </p>
<h3 id="机械领域"><a href="#机械领域" class="headerlink" title="机械领域"></a>机械领域</h3><p>Onshape是一款机械领域的三维建模软件<br>如果熟悉Solidworks、UG等CAD软件，那么你可以把Onshape理解为云Solidworks。<br><a href="http://www.yanhuangxueyuan.com/3D/jixiezhuangpei/index.html?_blank" target="_blank" rel="noopener">机械模型在线预览demo</a>  </p>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>Three.js还有很多的精巧的应用场景噢<br>在这里就不一一列举了<br>感幸福的小伙伴可以到Three.js的官网案例看一看噢<br><a href="http://www.webgl3d.cn/Three.js/?_blank" target="_blank" rel="noopener">戳戳这里看更多噢</a></p>
<hr>
<h2 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h2><h3 id="Three-js资源"><a href="#Three-js资源" class="headerlink" title="Three.js资源"></a>Three.js资源</h3><p>首先看看Three.js的资源噢</p>
<p><a href="https://github.com/mrdoob/three.js/?_blank" target="_blank" rel="noopener">github链接</a><br><a href="https://threejs.org/?_blank" target="_blank" rel="noopener">Three.js官网</a><br><a href="http://www.yanhuangxueyuan.com/threejs/docs/index.html?_blank" target="_blank" rel="noopener">Three.js中文文档</a></p>
<h3 id="下载Three-js包"><a href="#下载Three-js包" class="headerlink" title="下载Three.js包"></a>下载Three.js包</h3><blockquote>
<p>可以直接从github中拉取master分支到本地噢</p>
</blockquote>
<p><strong>因为有几十M的大小，github下载threejs比较慢</strong><br><strong>所以作者在网盘放了一份，方便大家下载噢</strong><br><a href="http://www.yanhuangxueyuan.com/links.html?_blank" target="_blank" rel="noopener">网盘资源</a>  </p>
<hr>
<h1 id="初尝"><a href="#初尝" class="headerlink" title="初尝"></a>初尝</h1><p>首先跟着官网来熟悉一下Three.js的本地案例吧  </p>
<h2 id="本地初始化项目"><a href="#本地初始化项目" class="headerlink" title="本地初始化项目"></a>本地初始化项目</h2><h3 id="初始化目录结构"><a href="#初始化目录结构" class="headerlink" title="初始化目录结构"></a>初始化目录结构</h3><blockquote>
<p>创建ThreeJs文件夹<br>创建index.html文件<br>创建js文件夹<br>将下载的three.js包放入js文件夹中  </p>
</blockquote>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/2.png" class title="[left]"> 


<h2 id="案例一-第一个3D场景"><a href="#案例一-第一个3D场景" class="headerlink" title="案例一: 第一个3D场景"></a>案例一: 第一个3D场景</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个three.js文件_WebGL三维场景<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      overflow: hidden;</span><br><span class="line"><span class="css">      <span class="comment">/* 隐藏body窗口区域滚动条 */</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入three.js三维引擎--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;script src="http://www.yanhuangxueyuan.com/versions/threejsR92/build/three.js"&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/three/build/three.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;script src="http://www.yanhuangxueyuan.com/threejs/build/three.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /**</span><br><span class="line">     * 创建场景对象Scene</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</span></span><br><span class="line">    /**</span><br><span class="line">     * 创建网格模型</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="comment">// var geometry = new THREE.SphereGeometry(60, 40, 40); //创建一个球体几何对象</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>); <span class="comment">//创建一个立方体几何对象Geometry</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span></span><br><span class="line">      color: 0x0000ff</span><br><span class="line"><span class="actionscript">    &#125;); <span class="comment">//材质对象Material</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> mesh = <span class="keyword">new</span> THREE.Mesh(geometry, material); <span class="comment">//网格模型对象Mesh</span></span></span><br><span class="line"><span class="actionscript">    scene.add(mesh); <span class="comment">//网格模型添加到场景中</span></span></span><br><span class="line">    /**</span><br><span class="line">     * 光源设置</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="comment">//点光源</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> point = <span class="keyword">new</span> THREE.PointLight(<span class="number">0xffffff</span>);</span></span><br><span class="line"><span class="actionscript">    point.position.set(<span class="number">400</span>, <span class="number">200</span>, <span class="number">300</span>); <span class="comment">//点光源位置</span></span></span><br><span class="line"><span class="actionscript">    scene.add(point); <span class="comment">//点光源添加到场景中</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//环境光</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ambient = <span class="keyword">new</span> THREE.AmbientLight(<span class="number">0x444444</span>);</span></span><br><span class="line">    scene.add(ambient);</span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(scene)</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(scene.children)</span></span></span><br><span class="line">    /**</span><br><span class="line">     * 相机设置</span><br><span class="line">     */</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> width = <span class="built_in">window</span>.innerWidth; <span class="comment">//窗口宽度</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> height = <span class="built_in">window</span>.innerHeight; <span class="comment">//窗口高度</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> k = width / height; <span class="comment">//窗口宽高比</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> s = <span class="number">200</span>; <span class="comment">//三维场景显示范围控制系数，系数越大，显示的范围越大</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//创建相机对象</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.OrthographicCamera(-s * k, s * k, s, -s, <span class="number">1</span>, <span class="number">1000</span>);</span></span><br><span class="line"><span class="actionscript">    camera.position.set(<span class="number">200</span>, <span class="number">300</span>, <span class="number">200</span>); <span class="comment">//设置相机位置</span></span></span><br><span class="line"><span class="actionscript">    camera.lookAt(scene.position); <span class="comment">//设置相机方向(指向的场景对象)</span></span></span><br><span class="line">    /**</span><br><span class="line">     * 创建渲染器对象</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</span></span><br><span class="line"><span class="actionscript">    renderer.setSize(width, height);<span class="comment">//设置渲染区域尺寸</span></span></span><br><span class="line"><span class="actionscript">    renderer.setClearColor(<span class="number">0xb9d3ff</span>, <span class="number">1</span>); <span class="comment">//设置背景颜色</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(renderer.domElement); <span class="comment">//body元素中插入canvas对象</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//执行渲染操作   指定场景、相机作为参数</span></span></span><br><span class="line">    renderer.render(scene, camera);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果:  </p>
</blockquote>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/4.png" class title="[left]"> 
<hr>
<blockquote>
<p>整个程序的结构:  </p>
</blockquote>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/5.png" class title="[left]"> 

<h2 id="案例二-旋转动画、周期渲染"><a href="#案例二-旋转动画、周期渲染" class="headerlink" title="案例二: 旋转动画、周期渲染"></a>案例二: 旋转动画、周期渲染</h2><p>在案例一，已经做出了一个3D立方体的模型<br>在此基础上，我们尝试地把它旋转起来  </p>
<h3 id="周期渲染"><a href="#周期渲染" class="headerlink" title="周期渲染"></a>周期渲染</h3><blockquote>
<p>每执行一次渲染器对象WebGLRenderer的渲染方法.render()<br>浏览器就会渲染出一帧图像并显示在Web页面上，这就是说你按照一定的周期不停地调用渲染方法.render()就可以不停地生成新的图像覆盖原来的图像。<br>这也就是说只要一边旋转立方体，一边执行渲染方法.render()重新渲染，就可以实现立方体的旋转效果。</p>
</blockquote>
<p><strong>所以我们可以利用js中的定时器+render()来将3D立方体动起来</strong></p>
<blockquote>
<p>将代码:</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">renderer.render(scene,camera);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>替换为:si</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 渲染函数</span><br><span class="line">function render() &#123;</span><br><span class="line">    renderer.render(scene,camera);//执行渲染操作</span><br><span class="line">    mesh.rotateY(0.01);//每次绕y轴旋转0.01弧度</span><br><span class="line">&#125;</span><br><span class="line">//间隔20ms周期性调用函数fun,20ms也就是刷新频率是50FPS(1s/20ms)，每秒渲染50次</span><br><span class="line">setInterval(render,20);</span><br></pre></td></tr></table></figure>

<p>这里官方说<strong>调用渲染方法.render()进行渲染的渲染频率不能太低</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//设置调用render函数的周期为200ms，刷新频率相当于5你能明显的感受到卡顿</span><br><span class="line">setInterval("render()",200);</span><br></pre></td></tr></table></figure>

<h3 id="函数requestAnimationFrame"><a href="#函数requestAnimationFrame" class="headerlink" title="函数requestAnimationFrame()"></a>函数requestAnimationFrame()</h3><p>实际开发中，为了更好的利用浏览器渲染<br>可以使用函数requestAnimationFrame()代替setInterval()函数</p>
<blockquote>
<p>requestAnimationFrame()参数是将要被调用函数的函数名，requestAnimationFrame()调用一个函数不是立即调用而是向浏览器发起一个执行某函数的请求， 什么时候会执行由浏览器决定，一般默认保持60FPS的频率，大约每16.7ms调用一次requestAnimationFrame()方法指定的函数，60FPS是理想的情况下，如果渲染的场景比较复杂或者说硬件性能有限可能会低于这个频率。可以查看文章<a href="http://www.yanhuangxueyuan.com/HTML5/time.html?_blank" target="_blank" rel="noopener">《requestAnimationFrame()》</a>了解更多requestAnimationFrame()函数的知识。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function render() &#123;</span><br><span class="line">        renderer.render(scene,camera);//执行渲染操作</span><br><span class="line">        mesh.rotateY(0.01);//每次绕y轴旋转0.01弧度</span><br><span class="line">        requestAnimationFrame(render);//请求再次执行渲染函数render</span><br><span class="line">    &#125;</span><br><span class="line">render();</span><br></pre></td></tr></table></figure>

<h2 id="案例三-鼠标操作三维场景"><a href="#案例三-鼠标操作三维场景" class="headerlink" title="案例三: 鼠标操作三维场景"></a>案例三: 鼠标操作三维场景</h2><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function render() &#123;</span><br><span class="line">  renderer.render(scene,camera);//执行渲染操作</span><br><span class="line">&#125;</span><br><span class="line">render();</span><br><span class="line">var controls = new THREE.OrbitControls(camera,renderer.domElement);//创建控件对象</span><br><span class="line">controls.addEventListener('change', render);//监听鼠标、键盘事件</span><br></pre></td></tr></table></figure>
<blockquote>
<p>OrbitControls.js控件提供了一个构造函数THREE.OrbitControls()，把一个相机对象作为参数的时候，执行代码new THREE.OrbitControls(camera,renderer.domElement)，浏览器会自动检测鼠标键盘的变化， 并根据鼠标和键盘的变化更新相机对象的参数，比如你拖动鼠标左键，浏览器会检测到鼠标事件，把鼠标平移的距离按照一定算法转化为相机的的旋转角度，你可以联系生活中相机拍照,即使景物没有变化，你的相机拍摄角度发生了变化，自然渲染器渲染出的结果就变化了，通过定义监听事件controls.addEventListener(‘change’, render)，如果你连续操作鼠标，相机的参数不停的变化，同时会不停的调用渲染函数render()进行渲染，这样threejs就会使用相机新的位置或角度数据进行渲染。<br>执行构造函数THREE.OrbitControls()浏览器会同时干两件事，一是给浏览器定义了一个鼠标、键盘事件，自动检测鼠标键盘的变化，如果变化了就会自动更新相机的数据， 执行该构造函数同时会返回一个对象，可以给该对象添加一个监听事件，只要鼠标或键盘发生了变化，就会触发渲染函数。</p>
</blockquote>
<h3 id="场景操作"><a href="#场景操作" class="headerlink" title="场景操作"></a>场景操作</h3><ul>
<li>缩放：滚动—鼠标中键</li>
<li>旋转：拖动—鼠标左键</li>
<li>平移：拖动—鼠标右键</li>
</ul>
<h3 id="requestAnimationFrame-使用情况"><a href="#requestAnimationFrame-使用情况" class="headerlink" title="requestAnimationFrame()使用情况"></a>requestAnimationFrame()使用情况</h3><blockquote>
<p>如果threejs代码中通过requestAnimationFrame()实现渲染器渲染方法render()的周期性调用<br>当通过OrbitControls操作改变相机状态的时候<br>没必要在通过controls.addEventListener(‘change’, render)监听鼠标事件调用渲染函数<br>因为requestAnimationFrame()就会不停的调用渲染函数。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function render() &#123;</span><br><span class="line">  renderer.render(scene,camera);//执行渲染操作</span><br><span class="line">  // mesh.rotateY(0.01);//每次绕y轴旋转0.01弧度</span><br><span class="line">  requestAnimationFrame(render);//请求再次执行渲染函数render</span><br><span class="line">&#125;</span><br><span class="line">render();</span><br><span class="line">var controls = new THREE.OrbitControls(camera);//创建控件对象</span><br><span class="line">// 已经通过requestAnimationFrame(render);周期性执行render函数，没必要再通过监听鼠标事件执行render函数</span><br><span class="line">// controls.addEventListener('change', render)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果:</p>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/3.gif" class title="[left]"> 
</blockquote>
<p><strong>注意官方的冲突事项</strong></p>
<blockquote>
<p>注意开发中不要同时使用requestAnimationFrame()或controls.addEventListener(‘change’, render)调用同一个函数，这样会冲突。</p>
</blockquote>
<p><strong>本次初尝Three.js案例就到这里噢~相信感兴趣的小伙伴们对此也有一点认识啦</strong><br><strong>接下来的学习，就靠各位小伙伴们自行摸索啦！</strong></p>
<blockquote>
<p><a href="http://www.webgl3d.cn/Three.js/?_blank" target="_blank" rel="noopener">Three.js官网教程</a></p>
</blockquote>
<hr>
<h1 id="官方案例"><a href="#官方案例" class="headerlink" title="官方案例"></a>官方案例</h1><p>是不是初次尝试Three.js只”品味”了这几个案例不过瘾呀！<br>没关系！让我们一起看看官网优秀的案例<br>并且找到他们的源码吧！</p>
<blockquote>
<p><a href="http://www.webgl3d.cn/threejs/examples/?_blank" target="_blank" rel="noopener">Three.js官网优秀案例</a></p>
</blockquote>
<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><strong>我来安利当中几个特别不错的安利吧</strong></p>
<ul>
<li><p>gpgpu_birds</p>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/6.gif" class title="[left]">
</li>
<li><p>geometry_minecraft</p>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/7.gif" class title="[left]">
</li>
<li><p>effects_anaglyph</p>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/8.gif" class title="[left]">
</li>
<li><p>animation_skinning_morph</p>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/9.gif" class title="[left]">
</li>
<li><p>buffergeometry_drawrange</p>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/10.gif" class title="[left]">

</li>
</ul>
<blockquote>
<p>以上安利只是我自己觉得有趣的安利噢~<br>官网中有将近上百个案例<br><strong>还在等待什么！赶紧去体验下Three.js的绝妙效果吧~</strong></p>
</blockquote>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>到官网中发现了很多优秀的案例~<br>那该怎么获取到它的源码呢</p>
<p><strong>我整理了两种方法查询到它的源码噢</strong></p>
<ol>
<li>在官网的右下角有一个<strong>按钮</strong><blockquote>
<p>点击按钮即可进入github中的案例源码  </p>
</blockquote>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/11.png" class title="[left]">

</li>
</ol>
<hr>
<ol start="2">
<li>所有官网案例都可以在tree文件夹下找到<blockquote>
<p>tree &gt; examples &gt; [案例名].html</p>
</blockquote>
<img src="/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/12.png" class title="[left]">

</li>
</ol>
<p><strong>这样咱们就初次尝到了Tree.js的滋味啦</strong><br><strong>不得不说！这可真”鲜美”</strong></p>
<hr>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p><strong>很开心能与你们分享博客文章~</strong><br><a href="https://lin_daren.gitee.io/lindada-blog/2020/06/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9D%E5%B0%9DThree-js/?_blank">博客原文章✨</a></p>
<hr>
<p><em>若有什么无意之举冒犯了您，麻烦联系我噢~</em><br>要是这篇文章对您有那么一丢丢的帮助<br><a href="https://gitee.com/lin_daren/lindada-blog?_blank" target="_blank" rel="noopener">博客项目✨</a>（点一下哦~）<br>花10秒钟进上边链接帮我的博客点个🌟 吧!<br>(悄悄说~ 点了🌟 的你会更加幸运de ！)</p>
<p><strong>小屋随时欢迎你们到来噢~</strong><br><strong>也欢迎各位小确幸们的批评和指正~</strong></p>
]]></content>
      <tags>
        <tag>Three.js小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Koa做OneDrive第三方登录-林大人的业务小屋</title>
    <url>/lindada-blog/2020/12/29/%E5%88%A9%E7%94%A8Koa%E5%81%9AOneDrive%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E6%9E%97%E5%A4%A7%E4%BA%BA%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%B0%8F%E5%B1%8B/</url>
    <content><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>老师布置一个SS级任务 -&gt; 做一个微软OneDrive网盘<br>那就做叭！期间遇到很多很多坑！<br>查阅了很多方法，感觉最后总体还是很粗糙！<br>但起码做了出来，做个记录！<br>也希望有大佬不吝赐教</p>
<a id="more"></a>

<h1 id="接口介绍"><a href="#接口介绍" class="headerlink" title="接口介绍"></a>接口介绍</h1><h2 id="登录并获取授权码"><a href="#登录并获取授权码" class="headerlink" title="登录并获取授权码"></a>登录并获取授权码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET </span><br><span class="line">https:&#x2F;&#x2F;login.microsoftonline.com&#x2F;common&#x2F;oauth2&#x2F;authorize?response_type&#x3D;code&amp;client_id&#x3D;&#123;client_id&#125;&amp;redirect_uri&#x3D;&#123;redirect_uri&#125;</span><br></pre></td></tr></table></figure>

<h3 id="必需的查询字符串参数"><a href="#必需的查询字符串参数" class="headerlink" title="必需的查询字符串参数"></a>必需的查询字符串参数</h3><table>
<thead>
<tr>
<th align="left">参数名称</th>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>client_id</em></td>
<td align="left">串</td>
<td align="left">为您的应用创建的客户端ID。</td>
</tr>
<tr>
<td align="left"><em>response_type</em></td>
<td align="left">串</td>
<td align="left">指定请求的响应类型。在授权码授予请求中，该值必须是code。</td>
</tr>
<tr>
<td align="left"><em>redirect_uri</em></td>
<td align="left">串</td>
<td align="left">身份验证完成后，浏览器将发送到的重定向URL。</td>
</tr>
</tbody></table>
<h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>在成功验证用户身份并授权您的应用程序后，如下面的示例所示，Web浏览器将重定向到您的重定向URL，并在URL中添加了其他参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;myapp.contoso.com&#x2F;myapp&#x2F;callback?code&#x3D;AwABAAAAvPM...</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>code</strong>为下一步的授权码。</p>
</blockquote>
<h2 id="兑换令牌的授权代码"><a href="#兑换令牌的授权代码" class="headerlink" title="兑换令牌的授权代码"></a>兑换令牌的授权代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST </span><br><span class="line">https:&#x2F;&#x2F;login.microsoftonline.com&#x2F;common&#x2F;oauth2&#x2F;token</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">body:</span><br><span class="line">client_id&#x3D;&#123;client_id&#125;&amp;redirect_uri&#x3D;&#123;redirect_uri&#125;&amp;client_secret&#x3D;&#123;client_secret&#125;</span><br><span class="line">&amp;code&#x3D;&#123;code&#125;&amp;grant_type&#x3D;authorization_code&amp;resource&#x3D;&#123;resource_id&#125;</span><br></pre></td></tr></table></figure>

<h3 id="必需参数"><a href="#必需参数" class="headerlink" title="必需参数"></a>必需参数</h3><p>该请求的主体是URL编码的字符串，带有以下必需参数：</p>
<table>
<thead>
<tr>
<th align="left">参数名称</th>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>client_id</em></td>
<td align="left">串</td>
<td align="left">为您的应用程序创建的客户端ID值。</td>
</tr>
<tr>
<td align="left"><em>redirect_uri</em></td>
<td align="left">串</td>
<td align="left">身份验证完成后，浏览器将发送到的重定向URL。这应该与第一个请求中的<em>redirect_uri相</em>匹配。</td>
</tr>
<tr>
<td align="left"><em>client_secret</em></td>
<td align="left">串</td>
<td align="left">为您的应用程序创建的键值之一。</td>
</tr>
<tr>
<td align="left"><em>码</em></td>
<td align="left">串</td>
<td align="left">您在第一个身份验证请求中收到的授权码。</td>
</tr>
<tr>
<td align="left"><em>资源</em></td>
<td align="left">串</td>
<td align="left">您要访问的资源。</td>
</tr>
</tbody></table>
<h3 id="响应-1"><a href="#响应-1" class="headerlink" title="响应"></a>响应</h3><p>如果调用成功，响应主体是包括JSON字符串access_token，expires_in和refresh_token性能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;expires_in&quot;: 3600,</span><br><span class="line">  &quot;access_token&quot;:&quot;EwCo...AA&#x3D;&#x3D;&quot;,</span><br><span class="line">  &quot;refresh_token&quot;:&quot;eyJh...9323&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：响应中可能还有其他属性。使用API不需要这些属性。</p>
</blockquote>
<p><strong>重要提示：在此响应中，access_token和的值应与refresh_token用户密码一样安全地对待。</strong></p>
<p>该访问令牌仅在expires_in属性中<strong>指定的秒数内有效</strong>。您可以通过使用刷新令牌或从头开始重复身份验证请求来请求新的访问令牌。</p>
<blockquote>
<p><strong>至此就可以获取到access_token数据</strong></p>
</blockquote>
<h1 id="应用实现"><a href="#应用实现" class="headerlink" title="应用实现"></a>应用实现</h1><h2 id="Koa后端接口"><a href="#Koa后端接口" class="headerlink" title="Koa后端接口"></a>Koa后端接口</h2><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><blockquote>
<p>创建文件夹cloud-disk-koa-api</p>
</blockquote>
<h3 id="初始化npm仓库"><a href="#初始化npm仓库" class="headerlink" title="初始化npm仓库"></a>初始化npm仓库</h3><ol>
<li>打开该文件夹终端</li>
<li>npm init -y（-y: 默认yes配置）</li>
</ol>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install axios koa koa-router koa2-cors qs -S</span><br></pre></td></tr></table></figure>

<h3 id="创建启动文件"><a href="#创建启动文件" class="headerlink" title="创建启动文件"></a>创建启动文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)()</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'koa2-cors'</span>)</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'qs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启跨域</span></span><br><span class="line"><span class="comment">// 前端vue跨微软域名失败</span></span><br><span class="line">app.use(cors())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取code接口</span></span><br><span class="line">router.get(<span class="string">'/code'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// oneDrive配置</span></span><br><span class="line">  <span class="keyword">const</span> oneDriveConfig = &#123;</span><br><span class="line">    client_id: <span class="string">'你的应用ID'</span>,</span><br><span class="line">    scope: <span class="string">'offline_access Files.Read Files.Read.All'</span>,</span><br><span class="line">    response_type: <span class="string">'code'</span>,</span><br><span class="line">    <span class="comment">// 重定向回后端获取token接口</span></span><br><span class="line">    redirect_uri: <span class="string">'http://localhost:7001/token'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> path = <span class="string">`https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=<span class="subst">$&#123;oneDriveConfig.client_id&#125;</span>&amp;scope=<span class="subst">$&#123;oneDriveConfig.scope&#125;</span>&amp;response_type=<span class="subst">$&#123;oneDriveConfig.response_type&#125;</span>&amp;redirect_uri=<span class="subst">$&#123;oneDriveConfig.redirect_uri&#125;</span>`</span></span><br><span class="line">  <span class="comment">// 拼接链接，返回前端进行登陆获取code跳转</span></span><br><span class="line">  ctx.body = path</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取token接口</span></span><br><span class="line">router.get(<span class="string">'/token'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 重定向回前端页面</span></span><br><span class="line">  <span class="keyword">const</span> redirectPath = <span class="string">'http://localhost:2020/login'</span></span><br><span class="line">  <span class="comment">// 获取到 /code返回的code值</span></span><br><span class="line">  <span class="keyword">const</span> &#123; code &#125; = ctx.query</span><br><span class="line">  <span class="comment">// oneDrive配置</span></span><br><span class="line">  <span class="keyword">const</span> oneDriveConfig = &#123;</span><br><span class="line">    grant_type: <span class="string">'authorization_code'</span>,</span><br><span class="line">    client_id: <span class="string">'你的应用ID'</span>,</span><br><span class="line">    redirect_uri: <span class="string">'http://localhost:7001/token'</span>,</span><br><span class="line">    client_secret: <span class="string">'你的应用密匙'</span>,</span><br><span class="line">    code</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> path = <span class="string">'https://login.microsoftonline.com/common/oauth2/v2.0/token'</span></span><br><span class="line">  <span class="comment">// axios post请求接口</span></span><br><span class="line">  <span class="comment">// 利用qs将body的json格式转为form-data格式</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> axios.post(path, qs.stringify(oneDriveConfig), &#123;</span><br><span class="line">    <span class="comment">// 设置请求头配置 - form-data格式</span></span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 获取到access_token数据</span></span><br><span class="line">  <span class="keyword">const</span> token = result.data.access_token</span><br><span class="line">  <span class="comment">// 拼接token值重定向回前端登陆页面</span></span><br><span class="line">  ctx.redirect(<span class="string">`<span class="subst">$&#123;redirectPath&#125;</span>?token=<span class="subst">$&#123;token&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启路由</span></span><br><span class="line">app.use(router.routes(), router.allowedMethods())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启7001端口</span></span><br><span class="line">app.listen(<span class="number">7001</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'run on 7001'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node .&#x2F;server.js</span><br></pre></td></tr></table></figure>

<h3 id="开启成功"><a href="#开启成功" class="headerlink" title="开启成功"></a>开启成功</h3><blockquote>
<p>终端打印 run on 7001</p>
</blockquote>
<h2 id="vue前端"><a href="#vue前端" class="headerlink" title="vue前端"></a>vue前端</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol>
<li><p>开启指定<a href="http://localhost:2020端口的前端">http://localhost:2020端口的前端</a></p>
</li>
<li><p>创建<a href="http://localhost:2020/login路由前端页面" target="_blank" rel="noopener">http://localhost:2020/login路由前端页面</a></p>
</li>
<li><p>login页面get请求<a href="http://localhost:7001/code返回到的登录拼接url" target="_blank" rel="noopener">http://localhost:7001/code返回到的登录拼接url</a></p>
</li>
<li><p>跳转到微软登陆拼接的url</p>
<ol>
<li><pre><code>location.href = 登录拼接url;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5. 等待后端token接口获取到token后重定向回http:&#x2F;&#x2F;localhost:2020&#x2F;login页面</span><br><span class="line"></span><br><span class="line">6. 截取token值保存到浏览器cookie中</span><br><span class="line"></span><br><span class="line">7. 去掉地址栏中的token参数</span><br><span class="line"></span><br><span class="line">   1.</span><br></pre></td></tr></table></figure>
window.location.href = 去掉token参数的前端url
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 有个注意</span><br><span class="line"></span><br><span class="line">1. 正浏览B页面(非login登录页面) -&gt; 是当token过期时 -&gt; 显示弹框token过期 -&gt; 跳转回login页面 -&gt; 一顿思路操作后返回token保存到cookie -&gt; 重定向回B页面(而非在login登录页面停留)</span><br><span class="line"></span><br><span class="line">2. 第一次登录(处于login登录页面时) -&gt; 一顿思路操作后返回token保存到cookie -&gt; 重定向回首页</span><br><span class="line"></span><br><span class="line">&gt; 感兴趣可以做一下我觉得是一个必要需求（有点难度）</span><br><span class="line"></span><br><span class="line">实现：利用vuex和vue-router的路由守卫</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;js</span><br><span class="line">&#x2F;&#x2F; 主要路由守卫判断代码</span><br><span class="line"></span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line">&#x2F;&#x2F; 各种浏览器cookie的操作</span><br><span class="line">import &#123; getToken, getRedirect, removeRedirect &#125; from &#39;@&#x2F;utils&#x2F;auth&#39; &#x2F;&#x2F; get token from cookie</span><br><span class="line">&#x2F;&#x2F; 获取浏览器标题title</span><br><span class="line">import getPageTitle from &#39;@&#x2F;utils&#x2F;get-page-title&#39;</span><br><span class="line"></span><br><span class="line">const whiteList &#x3D; [&#39;&#x2F;login&#39;] &#x2F;&#x2F; no Redirect whitelist</span><br><span class="line"></span><br><span class="line">router.beforeEach(async(to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; set page title</span><br><span class="line">  document.title &#x3D; getPageTitle(to.meta.title)</span><br><span class="line">  &#x2F;&#x2F; determine whether the user has logged in</span><br><span class="line">  const hasToken &#x3D; getToken()</span><br><span class="line">  const hasRedirect &#x3D; getRedirect()</span><br><span class="line">  if (hasToken) &#123;</span><br><span class="line">    if (hasRedirect &amp;&amp; to.path !&#x3D;&#x3D; hasRedirect) &#123;</span><br><span class="line">      await router.push(hasRedirect)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      await removeRedirect()</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    &#x2F;* has no token*&#x2F;</span><br><span class="line">    if (whiteList.indexOf(to.path) !&#x3D;&#x3D; -1) &#123;</span><br><span class="line">      &#x2F;&#x2F; in the free login whitelist, go directly</span><br><span class="line">      next()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      if (!hasRedirect) &#123;</span><br><span class="line">        await store.dispatch(&#39;user&#x2F;redirect&#39;, to.path)</span><br><span class="line">      &#125;</span><br><span class="line">      next(&#39;&#x2F;login&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach(() &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; finish progress bar</span><br><span class="line">  NProgress.done()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</code></pre></li>
</ol>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实也没啥后记<br>但也不能草草结尾呀对吧对吧！</p>
<hr>
<p>厚着脸皮的<em>林大人的小屋</em>系列：</p>
<ul>
<li><a href="https://juejin.cn/post/6902018662882869256/" target="_blank" rel="noopener">林大人的小屋-利用Koa做OneDrive第三方登录</a></li>
<li><a href="https://juejin.im/post/6895598896341483534" target="_blank" rel="noopener">林大人的小屋 - Git原理</a></li>
<li><a href="https://juejin.im/post/6894135344367665159/" target="_blank" rel="noopener">林大人的小屋 - 计算机网络</a></li>
<li><a href="https://juejin.im/post/6894134248115175437" target="_blank" rel="noopener">林大人的小屋 - Web安全/操作系统/性能优化</a></li>
<li><a href="https://juejin.im/post/6888610461755899911" target="_blank" rel="noopener">林大人的小屋 - JS基础（下）</a></li>
<li><a href="https://juejin.im/post/6888610346626449415" target="_blank" rel="noopener">林大人的小屋 - JS基础（上）</a></li>
</ul>
]]></content>
      <tags>
        <tag>业务小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>完美一步步解决hexo博客部署到gitee后样式bug</title>
    <url>/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/</url>
    <content><![CDATA[<p>✨将hexo博客部署成功到gitee上后<br>也可以根据gitee Pages服务成功线上访问博客<br>可是问题一个接着一个来了…</p>
<a id="more"></a>

<blockquote>
<p>先赞后看噢~<br>你们的每一个小小的赞都会给我添加无限的动力✨</p>
</blockquote>
<hr>
<h2 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h2><p>✨将hexo博客部署成功到gitee上后<br>也可以根据gitee Pages服务成功线上访问博客</p>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/1.png" class>

<blockquote>
<p><strong>可是！！本地的样式css和js文件在线上并没有加载出来!</strong></p>
</blockquote>
<ul>
<li><p>本地跑的hexo博客样式</p>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/3.png" class>
</li>
<li><p>gitee跑的hexo博客样式</p>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/2.png" class>
</li>
</ul>
<hr>
<h2 id="查找问题"><a href="#查找问题" class="headerlink" title="查找问题"></a>查找问题</h2><p>🌛这个问题是怎么导致的呢？？</p>
<ul>
<li><p>第一步：直觉打开开发者工具</p>
<blockquote>
<p>(Google) F12 或 检查</p>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/4.png" class>
<blockquote>
<p><strong>可以清楚得看到console中报了很多得错误——大致都为css和js文件没有加载出来</strong></p>
</blockquote>
</blockquote>
</li>
<li><p>第二步：为啥没有加载出来</p>
<blockquote>
<p>粘贴网站进行查看</p>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/5.png" class>
<blockquote>
<p><strong>完美地404了！！</strong></p>
</blockquote>
</blockquote>
</li>
<li><p>第三步：猜测</p>
<blockquote>
<p>这些文件应该在哪？</p>
<blockquote>
<p>查看网址的前缀仅仅只是自己gitee的主网</p>
<blockquote>
<p><a href="https://lin_daren.gitee.io/">https://lin_daren.gitee.io/</a> </p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ul>
<blockquote>
<p>可是文件应该都在这个博客项目中才对…</p>
<blockquote>
<p>将前缀添加自己项目地址变为</p>
<blockquote>
<p><a href="https://lin_daren.gitee.io/lindada-blog/{css或js文件}">https://lin_daren.gitee.io/lindada-blog/{css或js文件}</a></p>
</blockquote>
</blockquote>
<p>这样就成功访问到目标文件了！！</p>
</blockquote>
<p><strong>这样我们就成功找到样式仅在本地显示而不在gitee线上显示的原因了</strong></p>
<hr>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>上度娘去看如何hexo修改线上访问地址的前缀</p>
<p><em>简单来说只用两步</em></p>
<ul>
<li><p>1.修改_config.yml文件</p>
<blockquote>
<p>将 url: / </p>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/6.png" class>
<blockquote>
<p>修改为 rul: 图片上框的地址</p>
</blockquote>
<p>将 root: /</p>
<blockquote>
<p>修改为 root: /博客项目名称/</p>
</blockquote>
</blockquote>
</li>
<li><p>2.重新打包上传hexo</p>
<blockquote>
<p>hexo clean<br>hexo g<br>hexo d</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="再遇问题"><a href="#再遇问题" class="headerlink" title="再遇问题"></a>再遇问题</h2><p><strong>可是即便这样gitee上Pages也仍没有变化这是为什么呢</strong></p>
<blockquote>
<p>找啊找…找啊找…没找到一堆好朋友…掉几根头发…</p>
</blockquote>
<p><strong>原来是因为gitee的Pages服务是不会自动更新的需要手动更新</strong></p>
<blockquote>
<p>github 就没有这个烦恼 会自动进行更新</p>
</blockquote>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><blockquote>
<img src="/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/7.png" class>
<blockquote>
<p><strong>点击更新！完美解决🌟🌟</strong></p>
</blockquote>
</blockquote>
<hr>
<h2 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h2><p><strong>很开心自己能搭建好一个博客并且写好一篇博客文章哦~</strong><br><a href="https://lin_daren.gitee.io/lindada-blog/2020/06/13/%E5%AE%8C%E7%BE%8E%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E5%90%8E%E6%A0%B7%E5%BC%8Fbug/?_blank">博客原文✨</a></p>
<hr>
<p><em>若有什么无意之举冒犯了您，麻烦联系我噢~</em><br>要是这篇文章对您有那么一丢丢的帮助<br><a href="https://gitee.com/lin_daren/lindada-blog?_blank" target="_blank" rel="noopener">博客项目✨</a>（点一下哦~）<br>花10秒钟进上边链接帮我的博客点个🌟 吧!<br>(悄悄说~ 点了🌟 的你会更加幸运de ！)  </p>
<p><strong>小屋随时欢迎你们到来噢~</strong><br><strong>也欢迎各位小确幸们的批评和指正~</strong></p>
]]></content>
      <tags>
        <tag>hexo小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>前端JS算法，您看我还有机会嘛？（持续不间断更新）</title>
    <url>/lindada-blog/2020/07/08/%E5%89%8D%E7%AB%AFJS%E7%AE%97%E6%B3%95%EF%BC%8C%E6%82%A8%E7%9C%8B%E6%88%91%E8%BF%98%E6%9C%89%E6%9C%BA%E4%BC%9A%E5%98%9B%EF%BC%9F%EF%BC%88%E6%8C%81%E7%BB%AD%E4%B8%8D%E9%97%B4%E6%96%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/07/08/%E5%89%8D%E7%AB%AFJS%E7%AE%97%E6%B3%95%EF%BC%8C%E6%82%A8%E7%9C%8B%E6%88%91%E8%BF%98%E6%9C%89%E6%9C%BA%E4%BC%9A%E5%98%9B%EF%BC%9F%EF%BC%88%E6%8C%81%E7%BB%AD%E4%B8%8D%E9%97%B4%E6%96%AD%E6%9B%B4%E6%96%B0%EF%BC%89/1.png" class>  
<p>暑假到了…作为算法小渣的我来说<br>很有必要开启算法的上山之路！<br>本文章用于记录在路途中的一步一脚印<br><em>~不拍照的那种</em><br>坚持周期性更新（一天3篇Easy, 一天2篇Mid, 一天1篇Hard）<br>为了两年后毕业后面试的自己打下基础<br>奋进吧！少儿郎…  </p>
<blockquote>
<p>来源：力扣（LeetCode）- 精选 TOP 面试题<br>提示: 每一道题均有实例、解题思路、解答代码、执行结果</p>
</blockquote>
<blockquote>
<p>要是对您有所帮助启发点个小赞噢~  </p>
</blockquote>
<a id="more"></a>

<h1 id="第一天-07-08"><a href="#第一天-07-08" class="headerlink" title="第一天 - 07.08"></a>第一天 - 07.08</h1><p>前记: 今天是高考的最后一天…望考生们不负自己的努力</p>
<h2 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h2><blockquote>
<p>1.两数之和<br>2.整数反转<br>3.罗马数字转整数</p>
</blockquote>
<h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给定一个整数数组 nums 和一个目标值 target，</span><br><span class="line">请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</span><br><span class="line">你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</span><br></pre></td></tr></table></figure>

<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>

<h4 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.关键在于target-当前数组的剩余值，等于数组剩余值中的某一个<br>2.利用对象key为值, value为下标  </p>
<h4 id="解答代码"><a href="#解答代码" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> prevNums = &#123;&#125;;  <span class="comment">// 存储的对象                         </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;      </span><br><span class="line">    <span class="keyword">const</span> curNum = nums[i];   <span class="comment">// 当前数组值</span></span><br><span class="line">    <span class="keyword">const</span> targetNum = target - curNum;    <span class="comment">// 当前剩余值</span></span><br><span class="line">    <span class="keyword">const</span> targetNumIndex = prevNums[targetNum];   <span class="comment">// 在存储对象中key为当前剩余值时候 -&gt; 获取value下标值</span></span><br><span class="line">    <span class="keyword">if</span> (targetNumIndex !== <span class="literal">undefined</span>) &#123;   <span class="comment">// 当存储对象有该下标时</span></span><br><span class="line">      <span class="keyword">return</span> [targetNumIndex, i];   <span class="comment">// 返回目标下标和当前下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    prevNums[curNum] = i;   <span class="comment">// 否则存储value -&gt; 下标和key -&gt; 数值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果"><a href="#代码执行结果" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入:<br>[2,7,11,15]<br>9  </p>
<p>输出<br>[0,1]  </p>
<p>预期结果<br>[0,1]  </p>
</blockquote>
<hr>
<h3 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</span><br><span class="line">注意反转后整数可能溢出情况 -&gt; 返回0</span><br></pre></td></tr></table></figure>

<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-1"><a href="#解答思路-1" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.反转整数向左移一位同时加上原整数的最后一位 -&gt; 原整数去掉最后一位 -&gt; 至到原整数为0<br>2.注意需要将反转整数转为32位有符号整数<br>3.若溢出 -&gt; 反转整数不等于自身 -&gt; 溢出为Infinity  </p>
<h4 id="解答代码-1"><a href="#解答代码-1" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reverseNumber = <span class="number">0</span>   <span class="comment">// 反转整数为0</span></span><br><span class="line">    <span class="keyword">while</span>(x) &#123;</span><br><span class="line">        reverseNumber = reverseNumber * <span class="number">10</span> + x % <span class="number">10</span>   <span class="comment">// 反转整数向左移一位 再加上x最后一位数字</span></span><br><span class="line">        x = (x / <span class="number">10</span>) | <span class="number">0</span>    <span class="comment">// 原整数去掉最后一位数字 x | 0 -&gt; 强制转换为32位有符号整数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (reverseNumber | <span class="number">0</span>) === reverseNumber ? reverseNumber : <span class="number">0</span></span><br><span class="line">    <span class="comment">// 反转整数强制转换为32位有符号整数 -&gt; 若不等于自身 -&gt; 判断溢出 -&gt; 值为0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-1"><a href="#代码执行结果-1" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>12345  </p>
<p>输出<br>54321  </p>
<p>预期结果<br>54321  </p>
</blockquote>
<hr>
<h3 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</span><br><span class="line"></span><br><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br><span class="line">例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</span><br><span class="line"></span><br><span class="line">通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。</span><br><span class="line">数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。</span><br><span class="line">同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</span><br><span class="line"></span><br><span class="line">I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</span><br><span class="line">X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </span><br><span class="line">C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</span><br><span class="line">给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</span><br></pre></td></tr></table></figure>

<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: "IX"</span><br><span class="line">输出: 9</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: "LVIII"</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: "MCMXCIV"</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-2"><a href="#解答思路-2" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.创建一个罗马字符的对象 -&gt; 对应字符对应数值<br>2.贪心思想 -&gt; 由最大的字符往最小的字符一一转换<br>3.当前罗马字符 &lt; 右边罗马字符时 -&gt; 整数减去当前罗马字符代表的数值 反之则加<br>4.遍历整个罗马字符完成</p>
<h4 id="解答代码-2"><a href="#解答代码-2" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> roman = &#123;     <span class="comment">// 创建罗马字符对象</span></span><br><span class="line">        <span class="string">'I'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'V'</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">'X'</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">'L'</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">'C'</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">'D'</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="string">'M'</span>: <span class="number">1000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> length = s.length   <span class="comment">// 罗马字符串长度</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>    <span class="comment">// 转换整数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++ ) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentNum = roman[s[i]]    <span class="comment">// 当罗马字符对应数值</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; length - <span class="number">1</span> &amp;&amp; currentNum &lt; roman[s[i+<span class="number">1</span>]]) &#123;    <span class="comment">// 判断为倒数第二个字符串 并且当前罗马对应数值小于右边对应数值</span></span><br><span class="line">            result -= currentNum    <span class="comment">// 减去当前值</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result += currentNum    <span class="comment">// 反之加上当前值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result   <span class="comment">// 返回转换后的整数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-2"><a href="#代码执行结果-2" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>“MCMXCIV”  </p>
<p>输出<br>1994  </p>
<p>预期结果<br>1994</p>
</blockquote>
<hr>
<h1 id="第二天-07-09"><a href="#第二天-07-09" class="headerlink" title="第二天 - 07.09"></a>第二天 - 07.09</h1><p>前记: 写了好久小程序，和小妹妹出去散散步</p>
<h2 id="Mid"><a href="#Mid" class="headerlink" title="Mid"></a>Mid</h2><blockquote>
<p>1.两数相加<br>2.无重复字符的最长子串  </p>
</blockquote>
<h3 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给出两个 非空 的链表用来表示两个非负的整数。</span><br><span class="line">其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。  </span><br><span class="line">如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</span><br></pre></td></tr></table></figure>

<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-3"><a href="#解答思路-3" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.因为倒叙<br>2.链表取出l1和l2的首个数字相加 -&gt; 为sum<br>3.sum取余10 -&gt; 存入新链表中（防止为两位数）<br>4.若sum &gt;= 10 -&gt; 向下一个链表next + 1</p>
<h4 id="解答代码-3"><a href="#解答代码-3" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> ListNode(<span class="string">'head'</span>);   <span class="comment">// 表头（上方的ListNode链表方法）</span></span><br><span class="line">    <span class="keyword">let</span> temp = node;    <span class="comment">// 当前指向表头</span></span><br><span class="line">    <span class="keyword">let</span> add = <span class="number">0</span>;    <span class="comment">// 是否进一</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;    <span class="comment">// 当前总和值为</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l1 || l2)&#123;    <span class="comment">//遍历，直到最长链表的都为空</span></span><br><span class="line">        <span class="comment">// 当前l1链表值和l2链表值相加（无值时为0）且判断l1+l2 &gt; 10时 -&gt; 需要+1</span></span><br><span class="line">        sum = (l1 ? l1.val : <span class="number">0</span>) + (l2 ? l2.val : <span class="number">0</span>) + add;</span><br><span class="line">        temp.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);     <span class="comment">// 当前总和取余存入新链表中</span></span><br><span class="line">        temp = temp.next;       <span class="comment">// 指向下一链表</span></span><br><span class="line">        add = sum &gt;= <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span>;        <span class="comment">// 判断总和是否 &gt;= 10</span></span><br><span class="line">        l1 &amp;&amp; (l1 = l1.next);       <span class="comment">// l1指向下一链表</span></span><br><span class="line">        l2 &amp;&amp; (l2 = l2.next);       <span class="comment">// l2指向下一链表</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当最后一次add存在时 -&gt; 最后相加 &gt;= 10了 -&gt; 再存入新链表中</span></span><br><span class="line">    add &amp;&amp; (temp.next = <span class="keyword">new</span> ListNode(add));</span><br><span class="line">    <span class="keyword">return</span> node.next;       <span class="comment">// 返回新链表的next结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-3"><a href="#代码执行结果-3" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>[2,4,3]<br>[5,6,4]  </p>
<p>输出<br>[7,0,8]  </p>
<p>预期结果<br>[7,0,8]  </p>
</blockquote>
<hr>
<h3 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</span><br></pre></td></tr></table></figure>

<h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: "abcabcbb"</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: "bbbbb"</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: "pwwkew"</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。</span><br><span class="line"></span><br><span class="line">请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。。</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-4"><a href="#解答思路-4" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.遍历字符串每个字符<br>2.用一个数组存储每个字符<br>3.若数组中存在当前字符 -&gt; 清除数组当前字符和前的数据<br>4.判断max取整个过程的最长长度</p>
<h4 id="解答代码-4"><a href="#解答代码-4" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [], max = <span class="number">0</span>       <span class="comment">// 存储到数组中，无重复字符的最长长度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;     <span class="comment">// 遍历每一个字符</span></span><br><span class="line">        <span class="keyword">let</span> index = arr.indexOf(s[i])       <span class="comment">// 数组中是否有当前字符</span></span><br><span class="line">        <span class="keyword">if</span>(index !== <span class="number">-1</span>) &#123;</span><br><span class="line">            arr.splice(<span class="number">0</span>, index+<span class="number">1</span>);    <span class="comment">// 若已存在 -&gt; 清除已有字符前面的</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(s.charAt(i))       <span class="comment">// 存入当前字符 -&gt; 至少长度为1</span></span><br><span class="line">        max = <span class="built_in">Math</span>.max(arr.length, max)     <span class="comment">// 判断当前数组长度与max大小</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max      <span class="comment">// 返回最长长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-4"><a href="#代码执行结果-4" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>“dvdf”  </p>
<p>输出<br>3  </p>
<p>预期结果<br>3</p>
</blockquote>
<hr>
<hr>
<h1 id="第三天-07-10"><a href="#第三天-07-10" class="headerlink" title="第三天 - 07.10"></a>第三天 - 07.10</h1><p>前记: 打了会游戏，困难题肝了快3小时，还是不太清除官方做法…</p>
<h2 id="Hard"><a href="#Hard" class="headerlink" title="Hard"></a>Hard</h2><blockquote>
<p>1.正则表达式匹配  </p>
</blockquote>
<h3 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。  </span><br><span class="line">'.' 匹配任意单个字符  </span><br><span class="line">'*' 匹配零个或多个前面的那一个元素  </span><br><span class="line">所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。  </span><br><span class="line">说明:  </span><br><span class="line">s 可能为空，且只包含从 a-z 的小写字母。  </span><br><span class="line">p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。  </span><br><span class="line">注意可不要使用JS的正则表达式呀~那这道题将毫无意义</span><br></pre></td></tr></table></figure>

<h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入:</span><br><span class="line">s = "aa"</span><br><span class="line">p = "a"</span><br><span class="line">输出: false</span><br><span class="line">解释: "a" 无法匹配 "aa" 整个字符串。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入:</span><br><span class="line">s = "ab"</span><br><span class="line">p = ".*"</span><br><span class="line">输出: true</span><br><span class="line">解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入:</span><br><span class="line">s = "aab"</span><br><span class="line">p = "c*a*b"</span><br><span class="line">输出: true</span><br><span class="line">解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。</span><br><span class="line"></span><br><span class="line">示例 4:</span><br><span class="line">输入:</span><br><span class="line">s = "mississippi"</span><br><span class="line">p = "mis*is*p*."</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-5"><a href="#解答思路-5" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.定义基础返回条件，p的长度为0时，s的长度为0则表示匹配，s的长度不为0则表示不匹配<br>2.定义匹配状态match，即为第一个字符的互相比较，如果相等或p[0]为’.’则为true<br>3.当p没有模式的时候，我们根据match的状态进行返回，如果match为false，直接返回false，如果为true，那么进行下一步的判断getIsMactch(s.slice(1), p.slice(1)<br>4.当p有模式的时候，有两种情况：一是s<em>匹配0个字符，则进行getIsMactch(s, p.slice(2))，二是s<em>匹配1个字符，递归下去，用来表示s</em>匹配多个s</em>,这样如果match为false，直接返回false，如果为true，那么进行getIsMactch(s.slice(1), p)。这两种只要一个能成立就够了<br>5.返回匹配结果</p>
<h4 id="解答代码-5"><a href="#解答代码-5" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isMatch = <span class="function"><span class="keyword">function</span> (<span class="params">s, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> getIsMactch = <span class="function">(<span class="params">s, p</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断，如果传入p的长度为0，那么，必须s的长度也为0才会返回true</span></span><br><span class="line">    <span class="keyword">if</span> (p.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> !s.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断第一个字符是否相等</span></span><br><span class="line">    <span class="keyword">let</span> match = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (s.length &gt; <span class="number">0</span> &amp;&amp; (s[<span class="number">0</span>] === p[<span class="number">0</span>] || p[<span class="number">0</span>] === <span class="string">'.'</span>)) &#123;</span><br><span class="line">      match = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p有模式的</span></span><br><span class="line">    <span class="keyword">if</span> (p.length &gt; <span class="number">1</span> &amp;&amp; p[<span class="number">1</span>] === <span class="string">"*"</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果有"*"字符，回溯字符</span></span><br><span class="line">      <span class="comment">// 第一种情况：s*匹配0个字符</span></span><br><span class="line">      <span class="comment">// 第二种情况：s*匹配1个字符，递归下去，用来表示s*匹配多个s*</span></span><br><span class="line">      <span class="keyword">return</span> getIsMactch(s, p.slice(<span class="number">2</span>)) || (match &amp;&amp; getIsMactch(s.slice(<span class="number">1</span>), p))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (match &amp;&amp; getIsMactch(s.slice(<span class="number">1</span>), p.slice(<span class="number">1</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getIsMactch(s, p)  <span class="comment">// 返回最终调用方法匹配结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 官方解答代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isMatch = <span class="function"><span class="keyword">function</span>(<span class="params">s, p</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">matches</span>(<span class="params">s, p, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) === <span class="string">'.'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s[i - <span class="number">1</span>] === p[j - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> m = s.length</span><br><span class="line">  <span class="keyword">let</span> n = p.length</span><br><span class="line">  <span class="keyword">let</span> f = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    f.push(<span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>).fill(<span class="literal">false</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">'*'</span>) &#123;</span><br><span class="line">        f[i][j] = f[i][j - <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (matches(s, p, i, j - <span class="number">1</span>)) &#123;</span><br><span class="line">          f[i][j] = f[i][j] || f[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (matches(s, p, i, j)) &#123;</span><br><span class="line">          f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f[m][n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-5"><a href="#代码执行结果-5" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>“mississippi”<br>“mis<em>is*p</em>.”  </p>
<p>输出<br>false  </p>
<p>预期结果<br>false</p>
</blockquote>
<hr>
<h1 id="第四天-07-11"><a href="#第四天-07-11" class="headerlink" title="第四天 - 07.11"></a>第四天 - 07.11</h1><p>前记: 噢吼吼吼吼吼，写了一天小程序。等会看小白船</p>
<h2 id="Easy-1"><a href="#Easy-1" class="headerlink" title="Easy"></a>Easy</h2><blockquote>
<p>1.回文数<br>2.最长公共前缀<br>3.有效的括号</p>
</blockquote>
<h3 id="两数之和-1"><a href="#两数之和-1" class="headerlink" title="两数之和"></a>两数之和</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">判断一个整数是否是回文数。  </span><br><span class="line">回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</span><br></pre></td></tr></table></figure>

<h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: 121</span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-6"><a href="#解答思路-6" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.将整数转为字符串<br>2.字符串倒置<br>3.判断字符串倒置和原整数字符串是否一致  </p>
<h4 id="解答代码-6"><a href="#解答代码-6" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reserveStr = x.toString().split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">return</span> reserveStr === x.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-6"><a href="#代码执行结果-6" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入:<br>121<br>9  </p>
<p>输出<br>true  </p>
<p>预期结果<br>true  </p>
</blockquote>
<hr>
<h3 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">编写一个函数来查找字符串数组中的最长公共前缀。  </span><br><span class="line">如果不存在公共前缀，返回空字符串 ""。</span><br></pre></td></tr></table></figure>
<h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: ["flower","flow","flight"]</span><br><span class="line">输出: "fl"</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: ["dog","racecar","car"]</span><br><span class="line">输出: ""</span><br><span class="line">解释: 输入不存在公共前缀。</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">所有输入只包含小写字母 a-z 。</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-7"><a href="#解答思路-7" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.初始化任意一个数组字符串（原理: 公共前缀小于任意一个字符串）<br>2.开始遍历和对比字符串数组 -&gt; 若公共前缀与当前不相等 -&gt; 截取之前的公共前缀<br>3.遍历完成返回公共前缀 -&gt; 若公共前缀为空字符 -&gt; 提前返回  </p>
<h4 id="解答代码-7"><a href="#解答代码-7" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(strs.length == <span class="number">0</span>)     <span class="comment">// 如果字符数组为空数组 -&gt; 返回为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">let</span> ans = strs[<span class="number">0</span>];      <span class="comment">// 初始化公共前缀第一个数组字符串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;      <span class="comment">// 遍历字符数组</span></span><br><span class="line">        <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 公共前缀小于初始化字符串长度 并且 小于当前字符串长度</span></span><br><span class="line">        <span class="keyword">for</span>(;j &lt; ans.length &amp;&amp; j &lt; strs[i].length; j++) &#123;</span><br><span class="line">            <span class="comment">// 公共前缀字符 和 当前数组字符串字符不相等时 -&gt; break</span></span><br><span class="line">            <span class="keyword">if</span>(ans[j] != strs[i][j])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 截取目前相等的公共前缀</span></span><br><span class="line">        ans = ans.substr(<span class="number">0</span>, j);</span><br><span class="line">        <span class="keyword">if</span>(ans === <span class="string">""</span>)      <span class="comment">// 若公共前缀为空 -&gt; 直接返回无需遍历</span></span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;     <span class="comment">// 遍历完成，返回公共前缀</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-7"><a href="#代码执行结果-7" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>[“flower”,”flow”,”flight”]  </p>
<p>输出<br>“fl”  </p>
<p>预期结果<br>“fl”  </p>
</blockquote>
<hr>
<h3 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给定一个只包括 '('，')'，'&#123;'，'&#125;'，'['，']' 的字符串，判断字符串是否有效。</span><br><span class="line"></span><br><span class="line">有效字符串需满足：</span><br><span class="line"></span><br><span class="line">左括号必须用相同类型的右括号闭合。</span><br><span class="line">左括号必须以正确的顺序闭合。</span><br><span class="line">注意空字符串可被认为是有效字符串。</span><br></pre></td></tr></table></figure>
<h4 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: "()[]&#123;&#125;"</span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: "(]"</span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: "([)]"</span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">示例 4:</span><br><span class="line">输入: "&#123;[]&#125;"</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-8"><a href="#解答思路-8" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.因为空字符串可被认为是有效字符串 -&gt; 利用对象的key和value只提取出括号字符<br>2.利用栈思想 -&gt; 先近后出原理 -&gt; 这里将括号字符定义为开、关两种<br>3.若 开 字符 -&gt; 存入栈中对应 闭 字符<br>4.若 闭 字符 -&gt; 取出栈顶字符 -&gt; 判断是否相等<br>5.若不相等 -&gt; 返回false / 若遍历结束后栈为空 -&gt; 返回true</p>
<h4 id="解答代码-8"><a href="#解答代码-8" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 括号字符分为 开、关 两种</span></span><br><span class="line">    <span class="keyword">const</span> brackets = &#123;       <span class="comment">// 定义括号对象 -&gt; key为开、value为闭</span></span><br><span class="line">        <span class="string">'('</span>: <span class="string">')'</span>,</span><br><span class="line">        <span class="string">'&#123;'</span>: <span class="string">'&#125;'</span>,</span><br><span class="line">        <span class="string">'['</span>: <span class="string">']'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> stack = []      <span class="comment">//定义空栈</span></span><br><span class="line">    <span class="keyword">let</span> top = <span class="literal">undefined</span>     <span class="comment">// 栈顶</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> char <span class="keyword">of</span> s) &#123;        <span class="comment">// 遍历字符</span></span><br><span class="line">        <span class="keyword">let</span> value</span><br><span class="line">        <span class="keyword">if</span>((value = brackets[char])) &#123;      <span class="comment">// 若是对象key的 开 字符 -&gt; 赋值给value</span></span><br><span class="line">            stack.push(value)       <span class="comment">// 存入栈中对应 闭 字符</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;        <span class="comment">// 若是 闭 字符</span></span><br><span class="line">            top = stack.pop()       <span class="comment">// 取出栈顶</span></span><br><span class="line">            <span class="keyword">if</span>(top !== char) &#123;      <span class="comment">// 判断是否栈顶值等于对应当前 闭 字符</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>        <span class="comment">// 若不相等 -&gt; 返回false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.length === <span class="number">0</span>       <span class="comment">// 遍历结束，栈为空 -&gt; 返回true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-8"><a href="#代码执行结果-8" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>“([)]”  </p>
<p>输出<br>false  </p>
<p>预期结果<br>false</p>
</blockquote>
<hr>
<hr>
<h1 id="第五天-07-13"><a href="#第五天-07-13" class="headerlink" title="第五天 - 07.13"></a>第五天 - 07.13</h1><p>前记: emmm这个暑假有点懒散</p>
<h2 id="Mid-1"><a href="#Mid-1" class="headerlink" title="Mid"></a>Mid</h2><blockquote>
<p>1.最长回文子串<br>2.Z 字形变换</p>
</blockquote>
<h3 id="两数相加-1"><a href="#两数相加-1" class="headerlink" title="两数相加"></a>两数相加</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</span><br></pre></td></tr></table></figure>

<h4 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入: "babad"</span><br><span class="line">输出: "bab"</span><br><span class="line">注意: "aba" 也是一个有效答案。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入: "cbbd"</span><br><span class="line">输出: "bb"</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-9"><a href="#解答思路-9" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.找最长回文字符串 -&gt; 使用动态规划思想<br>2.从一个字符往两边延伸开 -&gt; 且两边字符串也是回文串 -&gt; 仍标为true</p>
<h4 id="解答代码-9"><a href="#解答代码-9" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// babad</span></span><br><span class="line">  <span class="comment">// tag : dp</span></span><br><span class="line">  <span class="keyword">if</span> (!s || s.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">let</span> res = s[<span class="number">0</span>];       <span class="comment">// 若不为空，初始化回文子串为第一个</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dp = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 倒着遍历简化操作， 这么做的原因是dp[i][..]依赖于dp[i + 1][..]</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = s.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    dp[i] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; s.length; j++) &#123;</span><br><span class="line">      <span class="comment">// 如果为第一个字符 -&gt; 标记为true</span></span><br><span class="line">      <span class="keyword">if</span> (j - i === <span class="number">0</span>) dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 如果第二个字符且相等字符 -&gt; 标记为true</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (j - i === <span class="number">1</span> &amp;&amp; s[i] === s[j]) dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 如果一个字符串是回文串且两边字符串也是回文串，那么它一定还是一个回文串</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (s[i] === s[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 标记位为true 且 长度大于现回文子串长度</span></span><br><span class="line">      <span class="keyword">if</span> (dp[i][j] &amp;&amp; j - i + <span class="number">1</span> &gt; res.length) &#123;</span><br><span class="line">        <span class="comment">// 更新截取回文子串</span></span><br><span class="line">        res = s.slice(i, j + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-9"><a href="#代码执行结果-9" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>“babad”  </p>
<p>输出<br>“aba”  </p>
<p>预期结果<br>“bab”  </p>
</blockquote>
<hr>
<h3 id="Z-字形变换"><a href="#Z-字形变换" class="headerlink" title="Z 字形变换"></a>Z 字形变换</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</span><br><span class="line"></span><br><span class="line">比如输入字符串为 "LEETCODEISHIRING" 行数为 3 时，排列如下：</span><br><span class="line">L   C   I   R</span><br><span class="line">E T O E S I I G</span><br><span class="line">E   D   H   N</span><br><span class="line"></span><br><span class="line">之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："LCIRETOESIIGEDHN"。</span><br></pre></td></tr></table></figure>

<h4 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: s = "LEETCODEISHIRING", numRows = 3</span><br><span class="line">输出: "LCIRETOESIIGEDHN"</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: s = "LEETCODEISHIRING", numRows = 4</span><br><span class="line">输出: "LDREOEIIECIHNTSG"</span><br><span class="line">解释:</span><br><span class="line">L     D     R</span><br><span class="line">E   O E   I I</span><br><span class="line">E C   I H   N</span><br><span class="line">T     S     G</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-10"><a href="#解答思路-10" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.题目最后是需要转换后的字符串newStr -&gt; newStr是根据Z字形的行数重新拼接<br>2.可以根据输入行数来移动数组下标（上升或下降） -&gt; 存入对应同一行的字符<br>3.最后再拼接数组中每个字符串 -&gt; 新的Z字形变换</p>
<h4 id="解答代码-10"><a href="#解答代码-10" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> convert = <span class="function"><span class="keyword">function</span>(<span class="params">s, numRows</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 行数为1直接返回字符串</span></span><br><span class="line">    <span class="keyword">if</span>(numRows === <span class="number">1</span>) <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断字符长度是否大于行数取最小</span></span><br><span class="line">    <span class="keyword">const</span> len = <span class="built_in">Math</span>.min(s.length, numRows)</span><br><span class="line">    <span class="comment">// 每行字符串数组</span></span><br><span class="line">    <span class="keyword">let</span> rowStr=[]</span><br><span class="line">    <span class="comment">// 初始化字符串数组为空字符串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        rowStr[i] = <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义索引和位置为上升还是下降</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>, down = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 遍历字符串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> c <span class="keyword">of</span> s) &#123;</span><br><span class="line">        rowStr[index] += c</span><br><span class="line">        <span class="comment">// 若在顶部或在最底部 -&gt; 更换标示</span></span><br><span class="line">        <span class="keyword">if</span>(index === <span class="number">0</span> || index === numRows - <span class="number">1</span>) down = !down</span><br><span class="line">        <span class="comment">// 索引改变</span></span><br><span class="line">        index += down ? <span class="number">1</span> : <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提取每行字符串 -&gt; 拼接新字符串</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> str <span class="keyword">of</span> rowStr) &#123;</span><br><span class="line">        res += str</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-10"><a href="#代码执行结果-10" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>“PAYPALISHIRING”<br>3    </p>
<p>输出<br>“PAHNAPLSIIGYIR”  </p>
<p>预期结果<br>“PAHNAPLSIIGYIR”</p>
</blockquote>
<hr>
<h1 id="第六天-07-14"><a href="#第六天-07-14" class="headerlink" title="第六天 - 07.14"></a>第六天 - 07.14</h1><p>前记: 今天看到了掘金上的广告，琢磨了一天，第一次应聘了字节跳动的夏令营，有点兴奋！希望一切值得的！</p>
<h2 id="Hard-1"><a href="#Hard-1" class="headerlink" title="Hard"></a>Hard</h2><blockquote>
<p>1.合并K个排序链表 </p>
</blockquote>
<h3 id="合并K个排序链表"><a href="#合并K个排序链表" class="headerlink" title="合并K个排序链表"></a>合并K个排序链表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</span><br></pre></td></tr></table></figure>

<h4 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-11"><a href="#解答思路-11" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.注意有k个已经排序过的链表 -&gt; 可以采用暴力遍历一遍整个链表放入数组中 -&gt; 再数组sort排序值 -&gt; 再数组变为合并的排序链表<br>2.看了官方解答 -&gt; 采用双指针逐一遍历k个链表<br>3.简单来说有k个链表[a, b, c, d]和新new链表 -&gt; a+b为new -&gt; new+c为new -&gt; new+d为new  -&gt; 遍历完成  </p>
<h4 id="解答代码-11"><a href="#解答代码-11" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode[]&#125;</span> <span class="variable">lists</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeKLists = <span class="function"><span class="keyword">function</span>(<span class="params">lists</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len  = lists.length;        <span class="comment">// 链表长度</span></span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;       <span class="comment">// 若空</span></span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span> lists[<span class="number">0</span>];       <span class="comment">// 若只有一条（无须合并）</span></span><br><span class="line">    <span class="keyword">let</span> heap = <span class="keyword">new</span> ListNode();      <span class="comment">// 创建新链表</span></span><br><span class="line">    heap.next = lists[<span class="number">0</span>];           <span class="comment">// 指向第一个链表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;       <span class="comment">// 遍历链表</span></span><br><span class="line">        <span class="keyword">let</span> origh = heap;       <span class="comment">// 初始化新的合并链表</span></span><br><span class="line">        <span class="keyword">let</span> cur1 = heap.next;       <span class="comment">// 新合并链表的next</span></span><br><span class="line">        <span class="keyword">let</span> cur2 = lists[i];        <span class="comment">// lists下一个链表</span></span><br><span class="line">        <span class="keyword">while</span>(cur1 != <span class="literal">null</span> &amp;&amp; cur2 != <span class="literal">null</span>)&#123;      <span class="comment">// 均不为空时</span></span><br><span class="line">            <span class="comment">// origh指向小的值同时移动cur1或cur2的next</span></span><br><span class="line">            <span class="keyword">if</span>(cur1.val &gt;= cur2.val) &#123;</span><br><span class="line">                origh.next = cur2;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                origh.next = cur1;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 移动合并列表next</span></span><br><span class="line">            origh = origh.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后若存在 -&gt; 该链表中最大的值</span></span><br><span class="line">        <span class="keyword">if</span>(cur1) origh.next = cur1;</span><br><span class="line">        <span class="keyword">if</span>(cur2) origh.next = cur2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> heap.next;       <span class="comment">// 遍历完成 -&gt; 返回合并链表的next</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个heap链表 -&gt; 空间复杂度O(1)</span></span><br><span class="line"><span class="comment"> * 时间复杂度 -&gt; 若每个k链表中的元素有n个 -&gt; O(kn)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-11"><a href="#代码执行结果-11" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>[[1,4,5],[1,3,4],[2,6]]  </p>
<p>输出<br>[1,1,2,3,4,4,5,6]  </p>
<p>预期结果<br>[1,1,2,3,4,4,5,6]  </p>
</blockquote>
<hr>
<h1 id="第七天-07-16"><a href="#第七天-07-16" class="headerlink" title="第七天 - 07.16"></a>第七天 - 07.16</h1><p>前记: 今天把小程序简历给完结了，打算出篇文章介绍一下</p>
<h2 id="Easy-2"><a href="#Easy-2" class="headerlink" title="Easy"></a>Easy</h2><blockquote>
<p>1.合并两个有序链表<br>2.删除排序数组中的重复项<br>3.移除元素</p>
</blockquote>
<h3 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">将两个升序链表合并为一个新的 升序 链表并返回。</span><br><span class="line">新链表是通过拼接给定的两个链表的所有节点组成的。</span><br></pre></td></tr></table></figure>

<h4 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line"></span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-12"><a href="#解答思路-12" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.很像第六天Hard题的简化版可以参考一下噢<br>2.照常链表迭代即可<br>3.最后还会剩一个全场最大值，要记得next进去噢  </p>
<h4 id="解答代码-12"><a href="#解答代码-12" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> list = <span class="keyword">new</span> ListNode(<span class="number">-1</span>)       <span class="comment">// 初始化合并链表第一个数 -1</span></span><br><span class="line">    <span class="keyword">let</span> merge = list        <span class="comment">// 浅拷贝</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l1 &amp;&amp; l2) &#123;       <span class="comment">// 当l1和l2链中均有值时</span></span><br><span class="line">        <span class="keyword">if</span>(l1.val &gt;= l2.val) &#123;</span><br><span class="line">            merge.next = l2     <span class="comment">// 合并链表next指向较小值</span></span><br><span class="line">            l2 = l2.next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            merge.next = l1</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        &#125;</span><br><span class="line">        merge = merge.next      <span class="comment">// 移动合并链表指针</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    merge.next = l1 === <span class="literal">null</span> ? l2 : l1      <span class="comment">// 最后还会有一个最大值</span></span><br><span class="line">    <span class="keyword">return</span> list.next        <span class="comment">// 返回该链表的next</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-12"><a href="#代码执行结果-12" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入:<br>[1,2,4]<br>[1,3,4]  </p>
<p>输出<br>[1,1,2,3,4,4]  </p>
<p>预期结果<br>[1,1,2,3,4,4]  </p>
</blockquote>
<hr>
<h3 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</span><br><span class="line"></span><br><span class="line">不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</span><br></pre></td></tr></table></figure>
<h4 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">给定数组 nums = [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-13"><a href="#解答思路-13" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.使用indexOf判断元素第一次出现的下标，不等于当前则重复，删除它<br>2.删除数组长度减1，所以下标要往前移动一位  </p>
<h4 id="解答代码-13"><a href="#解答代码-13" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.indexOf(nums[i]) !== i) &#123;</span><br><span class="line">            nums.splice(i, <span class="number">1</span>)</span><br><span class="line">            i --</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums.length</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-13"><a href="#代码执行结果-13" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>[0,0,1,1,1,2,2,3,3,4]  </p>
<p>输出<br>[0,1,2,3,4]  </p>
<p>预期结果<br>[0,1,2,3,4]  </p>
</blockquote>
<hr>
<h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span><br><span class="line">不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span><br></pre></td></tr></table></figure>
<h4 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">给定 nums = [3,2,2,3], val = 3,</span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">给定 nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line"></span><br><span class="line">注意这五个元素可为任意顺序。</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-14"><a href="#解答思路-14" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.简单的迭代判断一下是否有该val值<br>2.有 -&gt; nums.splice一下<br>3.无 -&gt; 返回新数组长度</p>
<h4 id="解答代码-14"><a href="#解答代码-14" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> removeElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i       <span class="comment">// 定义返回索引</span></span><br><span class="line">    <span class="keyword">while</span> (nums.indexOf(val) !== <span class="number">-1</span>) &#123;      <span class="comment">// 若数组中存在该值</span></span><br><span class="line">        i = nums.indexOf(val)</span><br><span class="line">        nums.splice(i, <span class="number">1</span>)       <span class="comment">// 移除该值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums.length      <span class="comment">// 返回长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-14"><a href="#代码执行结果-14" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>[3,2,2,3]<br>3   </p>
<p>输出<br>[2,2]  </p>
<p>预期结果<br>[2,2]</p>
</blockquote>
<hr>
<h1 id="第八天-07-17"><a href="#第八天-07-17" class="headerlink" title="第八天 - 07.17"></a>第八天 - 07.17</h1><p>前记: 今天也是召唤师峡谷的一天</p>
<h2 id="Mid-2"><a href="#Mid-2" class="headerlink" title="Mid"></a>Mid</h2><blockquote>
<p>1.字符串转换整数 (atoi)<br>2.盛最多水的容器</p>
</blockquote>
<h3 id="字符串转换整数-atoi"><a href="#字符串转换整数-atoi" class="headerlink" title="字符串转换整数 (atoi)"></a>字符串转换整数 (atoi)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">请你来实现一个 atoi 函数，使其能将字符串转换成整数。</span><br><span class="line">首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</span><br><span class="line">在任何情况下，若函数不能进行有效的转换时，请返回 0 。</span><br></pre></td></tr></table></figure>

<h4 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入: "42"</span><br><span class="line">输出: 42</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入: "4193 with words"</span><br><span class="line">输出: 4193</span><br><span class="line">解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入: "words and 987"</span><br><span class="line">输出: 0</span><br><span class="line">解释: 第一个非空字符是 'w', 但它不是数字或正、负号。</span><br><span class="line">     因此无法执行有效的转换。</span><br><span class="line"></span><br><span class="line">示例 4：</span><br><span class="line">输入: "-91283472332"</span><br><span class="line">输出: -2147483648</span><br><span class="line">解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 </span><br><span class="line">     因此返回 INT_MIN (−231) 。</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-15"><a href="#解答思路-15" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.利用Js的parseInt()函数 -&gt; 无视开头空格 -&gt; 返回有符号整数 -&gt; 无视整数部分后的字符<br>2.我们需要判断的是 -&gt; 范围在32位内（含） -&gt; 其他情况返回0  </p>
<h4 id="解答代码-15"><a href="#解答代码-15" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myAtoi = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(number)) &#123;     <span class="comment">// 其他情况返回0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断在32位内</span></span><br><span class="line">    <span class="keyword">return</span> result = number &lt;= <span class="built_in">Math</span>.pow(<span class="number">-2</span>, <span class="number">31</span>) ?  <span class="built_in">Math</span>.pow(<span class="number">-2</span>, <span class="number">31</span>) : number &gt;= <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) ? <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span> : number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-15"><a href="#代码执行结果-15" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>“+-3241aac22”  </p>
<p>输出<br>0  </p>
<p>预期结果<br>0  </p>
</blockquote>
<hr>
<h3 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。</span><br><span class="line">在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。</span><br><span class="line">找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</span><br><span class="line"></span><br><span class="line">说明：你不能倾斜容器，且 n 的值至少为 2。</span><br></pre></td></tr></table></figure>
<img src="/lindada-blog/2020/07/08/%E5%89%8D%E7%AB%AFJS%E7%AE%97%E6%B3%95%EF%BC%8C%E6%82%A8%E7%9C%8B%E6%88%91%E8%BF%98%E6%9C%89%E6%9C%BA%E4%BC%9A%E5%98%9B%EF%BC%9F%EF%BC%88%E6%8C%81%E7%BB%AD%E4%B8%8D%E9%97%B4%E6%96%AD%E6%9B%B4%E6%96%B0%EF%BC%89/day8_2.jpg" class>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。</span><br><span class="line">在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span><br></pre></td></tr></table></figure>

<h4 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出：49</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-16"><a href="#解答思路-16" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.双指针 -&gt; 指开头和结尾<br>2.当开头指针 &gt; 结尾指针时 -&gt; 遍历结束<br>3.判断高度较短的指针向中间移动<br>4.当前容积和最高容积进行比较并赋值  </p>
<h4 id="解答代码-16"><a href="#解答代码-16" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span> (<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>, i = <span class="number">0</span>, j = height.length - <span class="number">1</span>, cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;     <span class="comment">// i为左指针，j为右指针</span></span><br><span class="line">        <span class="comment">// 高度为两边较短一边</span></span><br><span class="line">        <span class="keyword">let</span> h = height[i] &lt; height[j] ? height[i] : height[j];</span><br><span class="line">        cur = h * (j - i);      <span class="comment">// 当前容积</span></span><br><span class="line">        res = cur &gt; res ? cur : res;        <span class="comment">// 判断最高容积</span></span><br><span class="line">        <span class="keyword">if</span> (height[i] &lt; height[j]) &#123;        <span class="comment">// 移动较短的指针</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;     <span class="comment">// 返回最高容积</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-16"><a href="#代码执行结果-16" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>[1,8,6,2,5,4,8,3,7]  </p>
<p>输出<br>49  </p>
<p>预期结果<br>49</p>
</blockquote>
<hr>
<h1 id="第九天-07-18"><a href="#第九天-07-18" class="headerlink" title="第九天 - 07.18"></a>第九天 - 07.18</h1><p>前记: 今天参加codeJump的夏令营笔试，一直没有看邮箱！！等短信通知…结果最后40分钟才看到了考试的短信<br>唉总体都是算法的题目，自己还是弱了…而且150分钟，自己迟到作死，只有40分钟笔试。<br><strong>给自己一个警钟，不单要看官网应聘流程和短信，还要看邮箱</strong></p>
<h2 id="Hard-2"><a href="#Hard-2" class="headerlink" title="Hard"></a>Hard</h2><blockquote>
<p>1.寻找两个正序数组的中位数 </p>
</blockquote>
<h3 id="寻找两个正序数组的中位数"><a href="#寻找两个正序数组的中位数" class="headerlink" title="寻找两个正序数组的中位数"></a>寻找两个正序数组的中位数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。</span><br><span class="line"></span><br><span class="line">请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</span><br><span class="line"></span><br><span class="line">你可以假设 nums1 和 nums2 不会同时为空。</span><br></pre></td></tr></table></figure>

<h4 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line"></span><br><span class="line">则中位数是 2.0</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line"></span><br><span class="line">则中位数是 (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure>

<h4 id="解答思路-17"><a href="#解答思路-17" class="headerlink" title="解答思路"></a>解答思路</h4><p>1.暴力算法 -&gt; 合并 -&gt; 排序 -&gt; 判断奇偶 -&gt; 返回（时间复杂度O(m+n) -&gt; 不符合题意）<br>2.二分法（时间复杂度O(log(min(m, n)))）-&gt; 个人琢磨了个把小时还是没太理解，只能参照代码放上<br>3.将自己理解注释在代码中  </p>
<h4 id="解答代码-17"><a href="#解答代码-17" class="headerlink" title="解答代码"></a>解答代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴力解法</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(m+n)</span></span><br><span class="line"><span class="comment"> * 空间复杂度O(0)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 合并 -&gt; 排序 -&gt; 避免负数</span></span><br><span class="line">    <span class="keyword">let</span> nums3 = nums1.concat(nums2).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br><span class="line">    <span class="keyword">let</span> length = nums3.length;</span><br><span class="line">    <span class="keyword">if</span>(length%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (nums3[length/<span class="number">2</span><span class="number">-1</span>] + nums3[length/<span class="number">2</span>])/<span class="number">2</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums3[<span class="built_in">Math</span>.floor(length/<span class="number">2</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分法</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(log(min(m, n)))</span></span><br><span class="line"><span class="comment"> * 空间复杂度O(0)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 保证m是最短的数组长度</span></span><br><span class="line">  <span class="keyword">if</span> (nums1.length &gt; nums2.length) &#123;</span><br><span class="line">    [nums1, nums2] = [nums2, nums1]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> m = nums1.length</span><br><span class="line">  <span class="keyword">const</span> n = nums2.length</span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> high = m</span><br><span class="line">  <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">    <span class="keyword">const</span> i = low + <span class="built_in">Math</span>.floor((high - low) / <span class="number">2</span>)    <span class="comment">// nums1的指针</span></span><br><span class="line">    <span class="keyword">const</span> j = <span class="built_in">Math</span>.floor((m + n + <span class="number">1</span>) / <span class="number">2</span>) - i       <span class="comment">// nums2的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断数组越界</span></span><br><span class="line">    <span class="keyword">const</span> maxLeftA = i === <span class="number">0</span> ? -<span class="literal">Infinity</span> : nums1[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">const</span> minRightA = i === m ? <span class="literal">Infinity</span> : nums1[i]</span><br><span class="line">    <span class="keyword">const</span> maxLeftB = j === <span class="number">0</span> ? -<span class="literal">Infinity</span> : nums2[j<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">const</span> minRightB = j === n ? <span class="literal">Infinity</span> : nums2[j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (maxLeftA &lt;= minRightB &amp;&amp; minRightA &gt;= maxLeftB) &#123;</span><br><span class="line">      <span class="keyword">return</span> (m + n) % <span class="number">2</span> === <span class="number">1</span>    <span class="comment">// 判断奇偶性</span></span><br><span class="line">        ? <span class="built_in">Math</span>.max(maxLeftA, maxLeftB)</span><br><span class="line">        : (<span class="built_in">Math</span>.max(maxLeftA, maxLeftB) + <span class="built_in">Math</span>.min(minRightA, minRightB)) / <span class="number">2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxLeftA &gt; minRightB) &#123;    <span class="comment">// 当nums1左数字大于nums2右数字时</span></span><br><span class="line">      high = i - <span class="number">1</span>    <span class="comment">// 往high指针左移一位</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      low = low + <span class="number">1</span>   <span class="comment">// 往low指针右移一位</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行结果-17"><a href="#代码执行结果-17" class="headerlink" title="代码执行结果"></a>代码执行结果</h4><blockquote>
<p>输入<br>[3]<br>[-2,-1]  </p>
<p>输出<br>-1.0  </p>
<p>预期结果<br>-1.0  </p>
</blockquote>
<hr>
<h1 id="第十天-07-19"><a href="#第十天-07-19" class="headerlink" title="第十天 - 07.19"></a>第十天 - 07.19</h1><p>前记: 总体将ES6 2015~2019复习了一遍新特性<br>总结: 感觉这样记录算法很累赘  20题左右就要拉很长了<br>还是决定题解放别的地方 -&gt; 每50道算法发一篇思路带题解链接的文章  </p>
<h2 id="Easy-3"><a href="#Easy-3" class="headerlink" title="Easy"></a>Easy</h2><blockquote>
<p>1.实现 strStr()<br>2.搜索插入位置<br>3.外观数列</p>
</blockquote>
<hr>
<h1 id="第十一天-07-20"><a href="#第十一天-07-20" class="headerlink" title="第十一天 - 07.20"></a>第十一天 - 07.20</h1><p>前记: 想逃离生活这一切   </p>
<h2 id="Mid-3"><a href="#Mid-3" class="headerlink" title="Mid"></a>Mid</h2><blockquote>
<p>1.三数之和<br>2.电话号码的字母组合  </p>
</blockquote>
<hr>
<h1 id="第十二天-07-21"><a href="#第十二天-07-21" class="headerlink" title="第十二天 - 07.21"></a>第十二天 - 07.21</h1><p>前记: 滴滴滴  </p>
<h2 id="Hard-3"><a href="#Hard-3" class="headerlink" title="Hard"></a>Hard</h2><blockquote>
<p>1.缺失的第一个正数</p>
</blockquote>
<hr>
<h1 id="第十三天-07-22"><a href="#第十三天-07-22" class="headerlink" title="第十三天 - 07.22"></a>第十三天 - 07.22</h1><p>前记: 睡了好久好久 - 最近喜欢看爽文小说了，我去</p>
<h2 id="Easy-4"><a href="#Easy-4" class="headerlink" title="Easy"></a>Easy</h2><blockquote>
<p>1.最大子序和<br>2.加一<br>3.x 的平方根<br>4.爬楼梯</p>
</blockquote>
<hr>
<h1 id="第十四天-07-23"><a href="#第十四天-07-23" class="headerlink" title="第十四天 - 07.23"></a>第十四天 - 07.23</h1><p>前记: 小帅哥加量不加价噢    </p>
<h2 id="Mid-4"><a href="#Mid-4" class="headerlink" title="Mid"></a>Mid</h2><blockquote>
<p>1.删除链表的倒数第N个节点<br>2.括号生成<br>3.两数相除  </p>
</blockquote>
<hr>
<h1 id="第十五天-07-24"><a href="#第十五天-07-24" class="headerlink" title="第十五天 - 07.24"></a>第十五天 - 07.24</h1><p>前记: 明天要和一个小伙伴去惠州潇洒几天咯  </p>
<h2 id="Hard-4"><a href="#Hard-4" class="headerlink" title="Hard"></a>Hard</h2><blockquote>
<p>1.接雨水<br>2.通配符匹配  </p>
</blockquote>
<hr>
<h1 id="第十六天-07-30"><a href="#第十六天-07-30" class="headerlink" title="第十六天 - 07.30"></a>第十六天 - 07.30</h1><p>前记: 我回来了！去惠州潇洒了几天，深感要赚钱</p>
<h2 id="Easy-5"><a href="#Easy-5" class="headerlink" title="Easy"></a>Easy</h2><blockquote>
<p>1.合并两个有序数组<br>2.对称二叉树<br>3.二叉树的最大深度  </p>
</blockquote>
<hr>
<h1 id="第十七天-07-31"><a href="#第十七天-07-31" class="headerlink" title="第十七天 - 07.31"></a>第十七天 - 07.31</h1><p>前记: 继续加油    </p>
<h2 id="Mid-5"><a href="#Mid-5" class="headerlink" title="Mid"></a>Mid</h2><blockquote>
<p>1.搜索旋转排序数组<br>2.在排序数组中查找元素的第一个和最后一个位置<br>3.有效的数独  </p>
</blockquote>
<hr>
<h1 id="第十八天-08-01"><a href="#第十八天-08-01" class="headerlink" title="第十八天 - 08.01"></a>第十八天 - 08.01</h1><p>前记: 八月你好呀！麻烦对我好一点哈哈~ 要坚持努力去大厂   </p>
<h2 id="Hard-5"><a href="#Hard-5" class="headerlink" title="Hard"></a>Hard</h2><blockquote>
<p>1.最小覆盖子串 </p>
</blockquote>
<hr>
<h1 id="第十九天-08-03"><a href="#第十九天-08-03" class="headerlink" title="第十九天 - 08.03"></a>第十九天 - 08.03</h1><p>前记: 投递好久的实习简历一直没有反应，有点难过，反正继续坚持肯定可以</p>
<h2 id="Easy-6"><a href="#Easy-6" class="headerlink" title="Easy"></a>Easy</h2><blockquote>
<p>1.将有序数组转换为二叉搜索树<br>2.杨辉三角<br>3.买卖股票的最佳时机（一）  </p>
</blockquote>
<hr>
<h1 id="第二十天-08-04"><a href="#第二十天-08-04" class="headerlink" title="第二十天 - 08.04"></a>第二十天 - 08.04</h1><p>前记: 有点乏    </p>
<h2 id="Mid-6"><a href="#Mid-6" class="headerlink" title="Mid"></a>Mid</h2><blockquote>
<p>1.全排列 - 46<br>2.旋转图像 - 48<br>3.有效的数独  </p>
</blockquote>
<hr>
<ol start="112">
<li>路径总和 - E</li>
<li>岛屿数量 - M</li>
<li>字母异位词分组 - M</li>
<li>Pow(x, n) - M</li>
<li>单词搜索 - M</li>
<li>单词接龙 - M</li>
<li>单词拆分 - M</li>
<li>摆动排序 II - M</li>
</ol>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>提前前挂一个尾言嘻嘻~<br><strong>很开心能与你们分享博客文章哦~</strong><br><a href="https://lin_daren.gitee.io/lindada-blog/2020/07/08/%E5%89%8D%E7%AB%AFJS%E7%AE%97%E6%B3%95%EF%BC%8C%E6%82%A8%E7%9C%8B%E6%88%91%E8%BF%98%E6%9C%89%E6%9C%BA%E4%BC%9A%E5%98%9B%EF%BC%9F%EF%BC%88%E6%8C%81%E7%BB%AD%E4%B8%8D%E9%97%B4%E6%96%AD%E6%9B%B4%E6%96%B0%EF%BC%89?_blank">博客原文章✨</a></p>
<hr>
<p><a href="https://gitee.com/lin_daren/lindada-blog?_blank" target="_blank" rel="noopener">博客项目✨</a>（点一下哦~）<br>花10秒钟进上边链接帮我的博客点个🌟 吧!<br>(悄悄说~ 点了🌟 的你会更加幸运de ！)  </p>
<p><strong>小屋随时欢迎你们到来噢~</strong><br><strong>也欢迎各位小确幸们的批评和指正~</strong></p>
]]></content>
      <tags>
        <tag>算法小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>小屋的第一份惊喜</title>
    <url>/lindada-blog/2020/06/12/%E5%B0%8F%E5%B1%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E4%BB%BD%E6%83%8A%E5%96%9C/</url>
    <content><![CDATA[<p>写了好多hexo中的标签🌰<br>滴滴滴滴~</p>
<a id="more"></a>
<h1 id="将hexo博客常用的格式🌰放入呀"><a href="#将hexo博客常用的格式🌰放入呀" class="headerlink" title="将hexo博客常用的格式🌰放入呀~"></a>将hexo博客常用的格式🌰放入呀~</h1><hr>
<h2 id="报块～～"><a href="#报块～～" class="headerlink" title="报块～～"></a>报块～～</h2><h3 id="1-在帖子中添加引号，并带有可选的作者，来源和标题信息"><a href="#1-在帖子中添加引号，并带有可选的作者，来源和标题信息" class="headerlink" title="1.在帖子中添加引号，并带有可选的作者，来源和标题信息"></a>1.在帖子中添加引号，并带有可选的作者，来源和标题信息</h3><blockquote><p>content</p>
<footer><strong>[author[</strong><cite>source]] [link] [source_link_title]</cite></footer></blockquote>

<h3 id="2-没有参数。普通的blockquote"><a href="#2-没有参数。普通的blockquote" class="headerlink" title="2.没有参数。普通的blockquote"></a>2.没有参数。普通的blockquote</h3><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>

<h3 id="3-从书中引用"><a href="#3-从书中引用" class="headerlink" title="3.从书中引用"></a>3.从书中引用</h3><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>

<h3 id="4-语法突出显示功能"><a href="#4-语法突出显示功能" class="headerlink" title="4.语法突出显示功能"></a>4.语法突出显示功能</h3><p>{％blockquote @DevDocs <a href="https://twitter.com/devdocs/status/356095192085962752％}" target="_blank" rel="noopener">https://twitter.com/devdocs/status/356095192085962752％}</a><br>新功能：DevDocs现在带有语法高亮功能。<a href="http://devdocs.io" target="_blank" rel="noopener">http://devdocs.io</a><br>{％endblockquote％}</p>
<h3 id="5-引用网络上的文章"><a href="#5-引用网络上的文章" class="headerlink" title="5.引用网络上的文章"></a>5.引用网络上的文章</h3><p>{％blockquote塞斯·戈丁（Seth Godin）<a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html欢迎来到岛内营销％}" target="_blank" rel="noopener">http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html欢迎来到岛内营销％}</a><br>每次互动都是宝贵的，也是一次欢愉的机会。<br>{％endblockquote％}</p>
<hr>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="1-普通代码块"><a href="#1-普通代码块" class="headerlink" title="1.普通代码块"></a>1.普通代码块</h3><p>{％codeblock％}<br>alert（’Hello World！’）;<br>{％endcodeblock％}</p>
<h3 id="2-指定语言如objc"><a href="#2-指定语言如objc" class="headerlink" title="2.指定语言如objc"></a>2.指定语言如objc</h3><p>{％codeblock lang：objc％}<br>[矩形setX：10 y：10宽度：20高度：20]；<br>{％endcodeblock％}</p>
<h3 id="3-在代码块中添加标题"><a href="#3-在代码块中添加标题" class="headerlink" title="3.在代码块中添加标题"></a>3.在代码块中添加标题</h3><p>{％codeblock Array.map％}<br>array.map（callback [，thisArg]）<br>{％endcodeblock％}</p>
<h3 id="4-添加标题和URL"><a href="#4-添加标题和URL" class="headerlink" title="4.添加标题和URL"></a>4.添加标题和URL</h3><p>{％codeblock _.compact <a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">http://underscorejs.org/#compact</a> Underscore.js％}<br>_.compact（[0，1，false，2，``，3]）;<br>=&gt; [1、2、3]<br>{％endcodeblock％}</p>
<h2 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h2><p>这与使用代码块相同，但是使用三个反引号来分隔该块。<br><code>[语言] [标题] [URL] [链接文本]代码段</code></p>
<hr>
<h2 id="拉报价"><a href="#拉报价" class="headerlink" title="拉报价"></a>拉报价</h2><p>{％pullquote [class]％}<br>内容<br>{％endpullquote％}</p>
<hr>
<h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><iframe scrolling="no" width="[width]" height="[height]" src="https://jsfiddle.net/shorttag/embedded/[tabs]/[skin]" frameborder="0" loading="lazy" allowfullscreen></iframe>
<hr>
<h2 id="要旨"><a href="#要旨" class="headerlink" title="要旨"></a>要旨</h2><p>嵌入要点代码段：</p>
<script src="//gist.github.com/gist_id.js?file=[filename]"></script>
<hr>
<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>嵌入iframe：</p>
<iframe src="url" width="[width]" height="[height]" frameborder="0" loading="lazy" allowfullscreen></iframe>
<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>插入具有指定尺寸的图像。</p>
<img src="/lindada-blog/path/to/image" class="[class names]" title="[width] [height] " alt="title text">
<hr>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>插入具有target=”_blank”属性的链接。</p>
<a href title target>text url [external] [title]</a>
<hr>
<h2 id="包含代码"><a href="#包含代码" class="headerlink" title="包含代码~"></a>包含代码<del>~</del></h2><p>在source/downloads/code文件夹中插入代码段。可以通过code_dir配置中的选项指定文件夹位置。</p>


<h3 id="嵌入test-js的全部内容"><a href="#嵌入test-js的全部内容" class="headerlink" title="嵌入test.js的全部内容"></a>嵌入test.js的全部内容</h3><p>{％include_code lang：javascript test.js％}</p>
<h3 id="仅嵌入第3行"><a href="#仅嵌入第3行" class="headerlink" title="仅嵌入第3行"></a>仅嵌入第3行</h3><p>{％include_code lang：javascript from：3 to：3 test.js％}</p>
<h3 id="嵌入第5至8行"><a href="#嵌入第5至8行" class="headerlink" title="嵌入第5至8行"></a>嵌入第5至8行</h3><p>{％include_code lang：javascript from：5 to：8 test.js％}</p>
<h3 id="将第5行嵌入到文件末尾"><a href="#将第5行嵌入到文件末尾" class="headerlink" title="将第5行嵌入到文件末尾"></a>将第5行嵌入到文件末尾</h3><p>{％include_code lang：javascript from：5 test.js％}</p>
<h3 id="嵌入第1至8行"><a href="#嵌入第1至8行" class="headerlink" title="嵌入第1至8行"></a>嵌入第1至8行</h3><h2 id="％include-code-lang：javascript-to：8-test-js％"><a href="#％include-code-lang：javascript-to：8-test-js％" class="headerlink" title="{％include_code lang：javascript to：8 test.js％}"></a>{％include_code lang：javascript to：8 test.js％}</h2><h2 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube"></a>YouTube</h2><p>插入YouTube视频。<br>{％youtube video_id％}</p>
<hr>
<h2 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h2><p>插入自适应或指定大小的Vimeo视频。<br>{％vimeo video_id [宽度] [高度]％}</p>
<hr>
<h2 id="包括帖子"><a href="#包括帖子" class="headerlink" title="包括帖子"></a>包括帖子</h2><p>包括指向其他​​帖子的链接。<br>{％post_path文件名％}<br>{％post_link文件名[标题] [转义]％}</p>
<h3 id="转义标题"><a href="#转义标题" class="headerlink" title="转义标题"></a>转义标题</h3><p>{％post_link hexo-4-released’如何在标题中使用<b>标记’％}</b></p>
<h3 id="不要逃脱标题"><a href="#不要逃脱标题" class="headerlink" title="不要逃脱标题"></a>不要逃脱标题</h3><h2 id="％post-link-hexo-4-released’粗体-lt-b-gt-自定义标题’false％"><a href="#％post-link-hexo-4-released’粗体-lt-b-gt-自定义标题’false％" class="headerlink" title="{％post_link hexo-4-released’粗体&lt;/ b&gt;自定义标题’false％}"></a>{％post_link hexo-4-released’<b>粗体&lt;/ b&gt;自定义标题’false％}</b></h2><h2 id="包括资产"><a href="#包括资产" class="headerlink" title="包括资产"></a>包括资产</h2><p>{％asset_path文件名％}<br>{％asset_img文件名[标题]％}<br>{％asset_link文件名[标题] [转义]％}</p>
<hr>
<h2 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h2><p>如果某些内容导致帖子中的处理问题，请使用raw标记将其包裹起来，以避免呈现错误。<br>{％原始％}的<br>含量<br>{％endraw％}</p>
<hr>
<h2 id="摘录后"><a href="#摘录后" class="headerlink" title="摘录后"></a>摘录后</h2><p>使用<!-- more -->标签前面的文字作为帖子的摘录。如果已指定，则最重要的excerpt:值将优先。<br>Lorem ipsum dolor坐镇，奉献自若，sius do eiusmod tempor incididunt ut Labore et dolore magna aliqua。<br>&lt;！-更多-&gt;<br>尽量减少使用veniam，不要进行任何锻炼，而要获得commodo的结果。Duis aute irure dolor in reprehenderit in volttable velit esse cillum dolore eu fugiat nulla pariatur。不擅长于圣人的情节，应在负责任的犯罪活动中动手</p>
]]></content>
      <tags>
        <tag>日常小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>实现vue中可选数据导出excel文件组件-林大人的业务小屋</title>
    <url>/lindada-blog/2020/12/29/%E5%AE%9E%E7%8E%B0vue%E4%B8%AD%E5%8F%AF%E9%80%89%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BAexcel%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6-%E6%9E%97%E5%A4%A7%E4%BA%BA%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%B0%8F%E5%B1%8B/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>小伙伴们是否遇到这样一个需求：<em>请实现数据导出功能，导出的字段可以根据需要选择和生成自己想要的模板进行并导出文件EXCEL表。</em></p>
<p>还没有遇见？不要紧，我在学校实验室项目就遇见了，害，就让我先来乘风破浪儿叭（害怕）</p>
<a id="more"></a>

<h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p>先将原先的功能和完成的功能进行效果展示叭！！</p>
<h2 id="原先"><a href="#原先" class="headerlink" title="原先"></a>原先</h2><blockquote>
<ul>
<li>点击导出excel按钮</li>
<li>确认下载excel文件</li>
<li>打开excel文件</li>
</ul>
</blockquote>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/853d412116d549b69994abcd32ee8368~tplv-k3u1fbpfcp-watermark.image" alt></p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><blockquote>
<ul>
<li>点击导出excel按钮</li>
<li>选择需导出的字段</li>
<li>选择需导出的数据条数</li>
<li>确认下载excel文件</li>
<li>打开excel文件</li>
</ul>
</blockquote>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ff488d01d2549a18f21236ed3d9df0a~tplv-k3u1fbpfcp-watermark.image" alt></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>在实现咱们需求前，默认你们已经完成了原先的效果啦（🐶 保命）</p>
<p>哈哈哈哈哈开玩笑开玩笑…（应该不太好笑）</p>
<p>所以咱先一步步完成原先导出excel表格文件的功能叭！</p>
<p><em>案例是在vue框架下噢</em></p>
<h2 id="excel导出功能"><a href="#excel导出功能" class="headerlink" title="excel导出功能"></a>excel导出功能</h2><p>需要安装插件儿</p>
<blockquote>
<p>npm i file-saver xlsx -S-D</p>
<p>npm i script-loader -D</p>
</blockquote>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><blockquote>
<p>-src（源代码目录）</p>
<p>–utils（公共方法目录）</p>
<p>—index.js（入口文件）</p>
<p>—Export2Excel.js（导出excel文件）</p>
<p>–views（页面目录）</p>
<p>— example.vue（测试页面）</p>
</blockquote>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>这篇文章的重点是如何可选项地导出excel，功能简单附上代码实现即可。</p>
<h4 id="Export2Excel-js"><a href="#Export2Excel-js" class="headerlink" title="Export2Excel.js"></a>Export2Excel.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'script-loader!file-saver'</span>);</span><br><span class="line"><span class="keyword">import</span> XLSX <span class="keyword">from</span> <span class="string">'xlsx'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateArray</span>(<span class="params">table</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> out = [];</span><br><span class="line">  <span class="keyword">var</span> rows = table.querySelectorAll(<span class="string">'tr'</span>);</span><br><span class="line">  <span class="keyword">var</span> ranges = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> R = <span class="number">0</span>; R &lt; rows.length; ++R) &#123;</span><br><span class="line">    <span class="keyword">var</span> outRow = [];</span><br><span class="line">    <span class="keyword">var</span> row = rows[R];</span><br><span class="line">    <span class="keyword">var</span> columns = row.querySelectorAll(<span class="string">'td'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> C = <span class="number">0</span>; C &lt; columns.length; ++C) &#123;</span><br><span class="line">      <span class="keyword">var</span> cell = columns[C];</span><br><span class="line">      <span class="keyword">var</span> colspan = cell.getAttribute(<span class="string">'colspan'</span>);</span><br><span class="line">      <span class="keyword">var</span> rowspan = cell.getAttribute(<span class="string">'rowspan'</span>);</span><br><span class="line">      <span class="keyword">var</span> cellValue = cell.innerText;</span><br><span class="line">      <span class="keyword">if</span> (cellValue !== <span class="string">""</span> &amp;&amp; cellValue == +cellValue) cellValue = +cellValue;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Skip ranges</span></span><br><span class="line">      ranges.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">range</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (R &gt;= range.s.r &amp;&amp; R &lt;= range.e.r &amp;&amp; outRow.length &gt;= range.s.c &amp;&amp; outRow.length &lt;= range.e.c) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= range.e.c - range.s.c; ++i) outRow.push(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Handle Row Span</span></span><br><span class="line">      <span class="keyword">if</span> (rowspan || colspan) &#123;</span><br><span class="line">        rowspan = rowspan || <span class="number">1</span>;</span><br><span class="line">        colspan = colspan || <span class="number">1</span>;</span><br><span class="line">        ranges.push(&#123;</span><br><span class="line">          s: &#123;</span><br><span class="line">            r: R,</span><br><span class="line">            c: outRow.length</span><br><span class="line">          &#125;,</span><br><span class="line">          e: &#123;</span><br><span class="line">            r: R + rowspan - <span class="number">1</span>,</span><br><span class="line">            c: outRow.length + colspan - <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Handle Value</span></span><br><span class="line">      outRow.push(cellValue !== <span class="string">""</span> ? cellValue : <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Handle Colspan</span></span><br><span class="line">      <span class="keyword">if</span> (colspan)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; colspan - <span class="number">1</span>; ++k) outRow.push(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    out.push(outRow);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [out, ranges];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">datenum</span>(<span class="params">v, date1904</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (date1904) v += <span class="number">1462</span>;</span><br><span class="line">  <span class="keyword">var</span> epoch = <span class="built_in">Date</span>.parse(v);</span><br><span class="line">  <span class="keyword">return</span> (epoch - <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">1899</span>, <span class="number">11</span>, <span class="number">30</span>))) / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sheet_from_array_of_arrays</span>(<span class="params">data, opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ws = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> range = &#123;</span><br><span class="line">    s: &#123;</span><br><span class="line">      c: <span class="number">10000000</span>,</span><br><span class="line">      r: <span class="number">10000000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    e: &#123;</span><br><span class="line">      c: <span class="number">0</span>,</span><br><span class="line">      r: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> R = <span class="number">0</span>; R != data.length; ++R) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> C = <span class="number">0</span>; C != data[R].length; ++C) &#123;</span><br><span class="line">      <span class="keyword">if</span> (range.s.r &gt; R) range.s.r = R;</span><br><span class="line">      <span class="keyword">if</span> (range.s.c &gt; C) range.s.c = C;</span><br><span class="line">      <span class="keyword">if</span> (range.e.r &lt; R) range.e.r = R;</span><br><span class="line">      <span class="keyword">if</span> (range.e.c &lt; C) range.e.c = C;</span><br><span class="line">      <span class="keyword">var</span> cell = &#123;</span><br><span class="line">        v: data[R][C]</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">if</span> (cell.v == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">var</span> cell_ref = XLSX.utils.encode_cell(&#123;</span><br><span class="line">        c: C,</span><br><span class="line">        r: R</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> cell.v === <span class="string">'number'</span>) cell.t = <span class="string">'n'</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> cell.v === <span class="string">'boolean'</span>) cell.t = <span class="string">'b'</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (cell.v <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">        cell.t = <span class="string">'n'</span>;</span><br><span class="line">        cell.z = XLSX.SSF._table[<span class="number">14</span>];</span><br><span class="line">        cell.v = datenum(cell.v);</span><br><span class="line">      &#125; <span class="keyword">else</span> cell.t = <span class="string">'s'</span>;</span><br><span class="line"></span><br><span class="line">      ws[cell_ref] = cell;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (range.s.c &lt; <span class="number">10000000</span>) ws[<span class="string">'!ref'</span>] = XLSX.utils.encode_range(range);</span><br><span class="line">  <span class="keyword">return</span> ws;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Workbook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Workbook)) <span class="keyword">return</span> <span class="keyword">new</span> Workbook();</span><br><span class="line">  <span class="keyword">this</span>.SheetNames = [];</span><br><span class="line">  <span class="keyword">this</span>.Sheets = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s2ab</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(s.length);</span><br><span class="line">  <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i != s.length; ++i) view[i] = s.charCodeAt(i) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">export_table_to_excel</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> theTable = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">  <span class="keyword">var</span> oo = generateArray(theTable);</span><br><span class="line">  <span class="keyword">var</span> ranges = oo[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* original data */</span></span><br><span class="line">  <span class="keyword">var</span> data = oo[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> ws_name = <span class="string">"SheetJS"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> wb = <span class="keyword">new</span> Workbook(),</span><br><span class="line">    ws = sheet_from_array_of_arrays(data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add ranges to worksheet */</span></span><br><span class="line">  <span class="comment">// ws['!cols'] = ['apple', 'banan'];</span></span><br><span class="line">  ws[<span class="string">'!merges'</span>] = ranges;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add worksheet to workbook */</span></span><br><span class="line">  wb.SheetNames.push(ws_name);</span><br><span class="line">  wb.Sheets[ws_name] = ws;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> wbout = XLSX.write(wb, &#123;</span><br><span class="line">    bookType: <span class="string">'xlsx'</span>,</span><br><span class="line">    bookSST: <span class="literal">false</span>,</span><br><span class="line">    type: <span class="string">'binary'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  saveAs(<span class="keyword">new</span> Blob([s2ab(wbout)], &#123;</span><br><span class="line">    type: <span class="string">"application/octet-stream"</span></span><br><span class="line">  &#125;), <span class="string">"test.xlsx"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">export_json_to_excel</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  multiHeader = [],</span></span></span><br><span class="line"><span class="function"><span class="params">  header,</span></span></span><br><span class="line"><span class="function"><span class="params">  data,</span></span></span><br><span class="line"><span class="function"><span class="params">  filename,</span></span></span><br><span class="line"><span class="function"><span class="params">  merges = [],</span></span></span><br><span class="line"><span class="function"><span class="params">  autoWidth = true,</span></span></span><br><span class="line"><span class="function"><span class="params">  bookType=  <span class="string">'xlsx'</span></span></span></span><br><span class="line"><span class="function"><span class="params">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* original data */</span></span><br><span class="line">  filename = filename || <span class="string">'excel-list'</span></span><br><span class="line">  data = [...data]</span><br><span class="line">  data.unshift(header);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = multiHeader.length<span class="number">-1</span>; i &gt; <span class="number">-1</span>; i--) &#123;</span><br><span class="line">    data.unshift(multiHeader[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ws_name = <span class="string">"SheetJS"</span>;</span><br><span class="line">  <span class="keyword">var</span> wb = <span class="keyword">new</span> Workbook(),</span><br><span class="line">    ws = sheet_from_array_of_arrays(data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (merges.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ws[<span class="string">'!merges'</span>]) ws[<span class="string">'!merges'</span>] = [];</span><br><span class="line">    merges.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      ws[<span class="string">'!merges'</span>].push(XLSX.utils.decode_range(item))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (autoWidth) &#123;</span><br><span class="line">    <span class="comment">/*设置worksheet每列的最大宽度*/</span></span><br><span class="line">    <span class="keyword">const</span> colWidth = data.map(<span class="function"><span class="params">row</span> =&gt;</span> row.map(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/*先判断是否为null/undefined*/</span></span><br><span class="line">      <span class="keyword">if</span> (val == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">'wch'</span>: <span class="number">10</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/*再判断是否为中文*/</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (val.toString().charCodeAt(<span class="number">0</span>) &gt; <span class="number">255</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">'wch'</span>: val.toString().length * <span class="number">2</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">'wch'</span>: val.toString().length</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="comment">/*以第一行为初始值*/</span></span><br><span class="line">    <span class="keyword">let</span> result = colWidth[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; colWidth.length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; colWidth[i].length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result[j][<span class="string">'wch'</span>] &lt; colWidth[i][j][<span class="string">'wch'</span>]) &#123;</span><br><span class="line">          result[j][<span class="string">'wch'</span>] = colWidth[i][j][<span class="string">'wch'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ws[<span class="string">'!cols'</span>] = result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add worksheet to workbook */</span></span><br><span class="line">  wb.SheetNames.push(ws_name);</span><br><span class="line">  wb.Sheets[ws_name] = ws;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> wbout = XLSX.write(wb, &#123;</span><br><span class="line">    bookType: bookType,</span><br><span class="line">    bookSST: <span class="literal">false</span>,</span><br><span class="line">    type: <span class="string">'binary'</span></span><br><span class="line">  &#125;);</span><br><span class="line">  saveAs(<span class="keyword">new</span> Blob([s2ab(wbout)], &#123;</span><br><span class="line">    type: <span class="string">"application/octet-stream"</span></span><br><span class="line">  &#125;), <span class="string">`<span class="subst">$&#123;filename&#125;</span>.<span class="subst">$&#123;bookType&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">exportExcel</span>(<span class="params">header, data, filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> excel = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'@/vendor/Export2Excel'</span>)</span><br><span class="line">  excel.export_json_to_excel(&#123;</span><br><span class="line">    header,</span><br><span class="line">    data,</span><br><span class="line">    filename</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="example-vue"><a href="#example-vue" class="headerlink" title="example.vue"></a>example.vue</h4><blockquote>
<p>将导出excel的方法导入即可，配置对应的excel表头以及excel数据</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;app-container&quot;&gt;</span><br><span class="line">    &lt;el-button :loading&#x3D;&quot;downloadLoading&quot; class&#x3D;&quot;filter-item&quot; type&#x3D;&quot;default&quot; @click&#x3D;&quot;handleDownload&quot;&gt;</span><br><span class="line">      导出excel</span><br><span class="line">	  &lt;&#x2F;el-button&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      v-loading&#x3D;&quot;listLoading&quot;</span><br><span class="line">      :data&#x3D;&quot;list&quot;</span><br><span class="line">      border</span><br><span class="line">      fit</span><br><span class="line">      highlight-current-row</span><br><span class="line">      style&#x3D;&quot;width: 100%;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;缴费单号&quot; prop&#x3D;&quot;sn&quot; align&#x3D;&quot;center&quot;&#x2F;&gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;缴费单名称&quot; prop&#x3D;&quot;name&quot; align&#x3D;&quot;center&quot; &#x2F;&gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;状态&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">        &lt;template #default&#x3D;&quot;&#123;row&#125;&quot;&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; row.status | statusFilter &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">      &lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;缴费金额&quot; prop&#x3D;&quot;amount&quot; align&#x3D;&quot;center&quot;&#x2F;&gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;缴费时间&quot; prop&#x3D;&quot;paymentTime&quot; align&#x3D;&quot;center&quot; width&#x3D;&quot;100px&quot;&#x2F;&gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;备注&quot; prop&#x3D;&quot;remark&quot; align&#x3D;&quot;center&quot;&#x2F;&gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;创建人&quot; prop&#x3D;&quot;creatorName&quot; align&#x3D;&quot;center&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;el-table&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const paymentStatusMap &#x3D; [&#39;良好&#39;, &#39;正常&#39;, &#39;优秀&#39;]</span><br><span class="line">  import &#123; exportExcel &#125; from &#39;@&#x2F;utils&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;Example&#39;,</span><br><span class="line">    filters: &#123;</span><br><span class="line">      statusFilter(status) &#123;</span><br><span class="line">        return paymentStatusMap[status]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        list: [</span><br><span class="line">          &#123;</span><br><span class="line">          	sn: &#39;测试单号&#39;,</span><br><span class="line">            name: &#39;1&#39;,</span><br><span class="line">            status: 1,</span><br><span class="line">            amount: &#39;1111&#39;,</span><br><span class="line">            paymentTime: &#39;2020-12-23&#39;,</span><br><span class="line">            remark &#39;备注测试&#39;,</span><br><span class="line">            creatorName: &#39;创建人&#39;</span><br><span class="line">        	&#125;,</span><br><span class="line">          &#123;</span><br><span class="line">          	sn: &#39;测试单号&#39;,</span><br><span class="line">            name: &#39;1&#39;,</span><br><span class="line">            status: 1,</span><br><span class="line">            amount: &#39;1111&#39;,</span><br><span class="line">            paymentTime: &#39;2020-12-23&#39;,</span><br><span class="line">            remark &#39;备注测试&#39;,</span><br><span class="line">            creatorName: &#39;创建人&#39;</span><br><span class="line">        	&#125;,</span><br><span class="line">          &#123;</span><br><span class="line">          	sn: &#39;测试单号&#39;,</span><br><span class="line">            name: &#39;1&#39;,</span><br><span class="line">            status: 1,</span><br><span class="line">            amount: &#39;1111&#39;,</span><br><span class="line">            paymentTime: &#39;2020-12-23&#39;,</span><br><span class="line">            remark &#39;备注测试&#39;,</span><br><span class="line">            creatorName: &#39;创建人&#39;</span><br><span class="line">        	&#125;,</span><br><span class="line">          &#123;</span><br><span class="line">          	sn: &#39;测试单号&#39;,</span><br><span class="line">            name: &#39;1&#39;,</span><br><span class="line">            status: 1,</span><br><span class="line">            amount: &#39;1111&#39;,</span><br><span class="line">            paymentTime: &#39;2020-12-23&#39;,</span><br><span class="line">            remark &#39;备注测试&#39;,</span><br><span class="line">            creatorName: &#39;创建人&#39;</span><br><span class="line">        	&#125;   </span><br><span class="line">        ],</span><br><span class="line">        listLoading: false,</span><br><span class="line">        downloadLoading: false,</span><br><span class="line">        statusOptions: paymentStatusMap</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      async handleDownload() &#123;</span><br><span class="line">        this.downloadLoading &#x3D; true</span><br><span class="line">        const header &#x3D; [&#39;缴费单号&#39;, &#39;缴费单名称&#39;, &#39;状态&#39;, &#39;缴费金额&#39;, &#39;缴费时间 &#39;, &#39;备注&#39;, &#39;创建人&#39;, &#39;创建时间&#39;, &#39;更新时间&#39;]</span><br><span class="line">        const filterVal &#x3D; [&#39;sn&#39;, &#39;name&#39;, &#39;status&#39;, &#39;amount&#39;, &#39;paymentTime&#39;, &#39;remark&#39;, &#39;creatorName&#39;, &#39;createTime&#39;, &#39;updateTime&#39;]</span><br><span class="line">        const data &#x3D; this.formatJson(filterVal, this.list)</span><br><span class="line">        await exportExcel(header, data, &#39;测试列表&#39;)</span><br><span class="line">        this.downloadLoading &#x3D; false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;**</span><br><span class="line">       * @description 格式化</span><br><span class="line">       *&#x2F;</span><br><span class="line">      formatJson(filterVal, jsonData) &#123;</span><br><span class="line">        return jsonData.map(v &#x3D;&gt; filterVal.map(j &#x3D;&gt; &#123;</span><br><span class="line">          if (j &#x3D;&#x3D;&#x3D; &#39;status&#39;) &#123;</span><br><span class="line">            return paymentStatusMap[v[j]]</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            return v[j]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样我们就完成了excel的导出功能啦！</p>
<p>接下来如何可选所需字段以及可选条数呢！<strong>那咱们接着整活</strong></p>
</blockquote>
<h2 id="可选导出功能"><a href="#可选导出功能" class="headerlink" title="可选导出功能"></a>可选导出功能</h2><blockquote>
<p>利用element-ui的界面和table来封装一个可选excel功能的组件</p>
</blockquote>
<h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><blockquote>
<p><strong>在原先excel导出功能的基础上</strong><br>-src（源代码目录）</p>
<p>–components（组件目录）</p>
<p>—exportOptionExcel.vue（可选组件）</p>
</blockquote>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="exportOptionExcel-vue"><a href="#exportOptionExcel-vue" class="headerlink" title="exportOptionExcel.vue"></a>exportOptionExcel.vue</h4><blockquote>
<p>关键字段都有注释噢，UI组件和样式就不多解释啦。感兴趣的小伙伴们可以查看 <a href="https://element.faas.ele.me/#/zh-CN/component/installation" target="_blank" rel="noopener">element-ui官网</a> 噢</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;excel-option-main&quot;&gt;</span><br><span class="line">    &lt;el-popover</span><br><span class="line">      placement&#x3D;&quot;right&quot;</span><br><span class="line">      width&#x3D;&quot;400&quot;</span><br><span class="line">      trigger&#x3D;&quot;click&quot;</span><br><span class="line">      @show&#x3D;&quot;handleExcel&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;excel-option-container&quot;&gt;</span><br><span class="line">        &lt;el-checkbox v-model&#x3D;&quot;checkAll&quot; :indeterminate&#x3D;&quot;isIndeterminate&quot; @change&#x3D;&quot;handleCheckAllChange&quot;&gt;全选&lt;&#x2F;el-checkbox&gt;</span><br><span class="line">        &lt;div style&#x3D;&quot;margin: 15px 0;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;el-checkbox-group v-model&#x3D;&quot;checkedExcel&quot; @change&#x3D;&quot;handleCheckedExcelChange&quot;&gt;</span><br><span class="line">          &lt;el-checkbox v-for&#x3D;&quot;(item) in excelOptions&quot; :key&#x3D;&quot;item.key&quot; class&#x3D;&quot;excel-option-checkbox&quot; :label&#x3D;&quot;item&quot;&gt;&#123;&#123; item.value &#125;&#125;&lt;&#x2F;el-checkbox&gt;</span><br><span class="line">        &lt;&#x2F;el-checkbox-group&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;el-button :loading&#x3D;&quot;downloadLoading&quot; class&#x3D;&quot;excel-option-btn&quot; size&#x3D;&quot;small&quot; type&#x3D;&quot;primary&quot; @click&#x3D;&quot;handleDownload&quot;&gt;</span><br><span class="line">        确认导出</span><br><span class="line">      &lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;el-button slot&#x3D;&quot;reference&quot; class&#x3D;&quot;filter-item&quot; type&#x3D;&quot;default&quot;&gt;</span><br><span class="line">        导出excel</span><br><span class="line">      &lt;&#x2F;el-button&gt;</span><br><span class="line">    &lt;&#x2F;el-popover&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; exportExcel &#125; from &#39;@&#x2F;utils&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;ExportOptionExcel&#39;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      &#x2F;&#x2F; 整个table的数据 &#x3D;&gt; 用来切割成表头和数据</span><br><span class="line">      table: &#123;</span><br><span class="line">        type: Object,</span><br><span class="line">        default: () &#x3D;&gt; &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; 最后格式化后的数据（结合父组件查看）</span><br><span class="line">      data: &#123;</span><br><span class="line">        type: Array,</span><br><span class="line">        default: () &#x3D;&gt; []</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; 是否开启了element的table勾选功能</span><br><span class="line">      check: &#123;</span><br><span class="line">        type: Boolean,</span><br><span class="line">        default: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        lock: false,</span><br><span class="line">        downloadLoading: false,</span><br><span class="line">        &#x2F;&#x2F; 是否全部勾选</span><br><span class="line">        checkAll: false,</span><br><span class="line">        &#x2F;&#x2F; 已勾选数据</span><br><span class="line">        checkedExcel: [],</span><br><span class="line">        &#x2F;&#x2F; 可勾选的表头字段</span><br><span class="line">        excelOptions: [],</span><br><span class="line">        &#x2F;&#x2F; table的数据</span><br><span class="line">        list: [],</span><br><span class="line">        &#x2F;&#x2F; element的多选框字段（可到官网查看噢）</span><br><span class="line">        isIndeterminate: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      &#x2F;&#x2F; 组件首次加载 -&gt; 开锁（防止多次添加可勾选的表头字段）</span><br><span class="line">      this.lock &#x3D; false</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      &#x2F;&#x2F; 全选</span><br><span class="line">      handleCheckAllChange(val) &#123;</span><br><span class="line">        this.checkedExcel &#x3D; val ? this.excelOptions : []</span><br><span class="line">        this.isIndeterminate &#x3D; false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; 勾选字段</span><br><span class="line">      handleCheckedExcelChange(value) &#123;</span><br><span class="line">        const checkedCount &#x3D; value.length</span><br><span class="line">        this.checkAll &#x3D; checkedCount &#x3D;&#x3D;&#x3D; this.excelOptions.length</span><br><span class="line">        this.isIndeterminate &#x3D; checkedCount &gt; 0 &amp;&amp; checkedCount &lt; this.excelOptions.length</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; 点击弹出框 &#x3D;&gt; 初始化组件</span><br><span class="line">      handleExcel() &#123;</span><br><span class="line">        &#x2F;&#x2F; 防止多次添加可勾选的表头字段</span><br><span class="line">        if (this.lock) return</span><br><span class="line">        &#x2F;&#x2F; 获取table数据切割表头和对应的prop字段</span><br><span class="line">        this.table.$children.forEach(v &#x3D;&gt; &#123;</span><br><span class="line">          if (!v.label || !v.prop) return</span><br><span class="line">          this.excelOptions.push(&#123; key: v.prop, value: v.label &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        this.list &#x3D; this.check ? this.table.selection : this.table.data</span><br><span class="line">        &#x2F;&#x2F; 闭锁</span><br><span class="line">        this.lock &#x3D; true</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; 确认导出按钮</span><br><span class="line">      async handleDownload() &#123;</span><br><span class="line">        &#x2F;&#x2F; 判断是否勾选数据</span><br><span class="line">        if (!this.list.length || !this.checkedExcel.length) &#123;</span><br><span class="line">          return this.$message(&#123;</span><br><span class="line">            type: &#39;warning&#39;,</span><br><span class="line">            message: &#39;请勾选导出数据&#39;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        this.downloadLoading &#x3D; true</span><br><span class="line">        const headers &#x3D; []</span><br><span class="line">        const valueFilter &#x3D; []</span><br><span class="line">        &#x2F;&#x2F; 将已勾选的数据提取</span><br><span class="line">        this.checkedExcel.forEach((&#123; key, value &#125;) &#x3D;&gt; &#123;</span><br><span class="line">          headers.push(value)</span><br><span class="line">          valueFilter.push(key)</span><br><span class="line">        &#125;)</span><br><span class="line">        &#x2F;&#x2F; 格式化数据</span><br><span class="line">        await this.formatJson(valueFilter, this.list)</span><br><span class="line">        &#x2F;&#x2F; 设置导出的excel文件名</span><br><span class="line">        const &#123; title &#125; &#x3D; this.$route.meta</span><br><span class="line">        await exportExcel(headers, this.data, &#96;$&#123;title&#125;&#96;)</span><br><span class="line">        this.downloadLoading &#x3D; false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;**</span><br><span class="line">       * @description 格式化</span><br><span class="line">       *&#x2F;</span><br><span class="line">      async formatJson(valueFilter, listData) &#123;</span><br><span class="line">        await this.$emit(&#39;formatJson&#39;, valueFilter, listData)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.excel-option-main &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.excel-option-container &#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.excel-option-checkbox &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 85px;</span><br><span class="line">  height: 30px;</span><br><span class="line">&#125;</span><br><span class="line">.excel-option-btn &#123;</span><br><span class="line">  margin-left: 3%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>



<h4 id="example-vue-1"><a href="#example-vue-1" class="headerlink" title="example.vue"></a>example.vue</h4><blockquote>
<p>在需要此功能的父组件中调用子组件</p>
<p><strong>更改的地方加上两个*噢，记得要去掉</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;app-container&quot;&gt;</span><br><span class="line">    </span><br><span class="line">	**&lt;export-option-excel :table.sync&#x3D;&quot;excelTable&quot; :check&#x3D;&quot;true&quot; :data&#x3D;&quot;excelData&quot; @formatJson&#x3D;&quot;formatJson&quot; &#x2F;&gt;**</span><br><span class="line">    </span><br><span class="line">    &lt;el-table</span><br><span class="line">      ** ref&#x3D;&quot;table&quot; **</span><br><span class="line">      v-loading&#x3D;&quot;listLoading&quot;</span><br><span class="line">      :data&#x3D;&quot;list&quot;</span><br><span class="line">      border</span><br><span class="line">      fit</span><br><span class="line">      highlight-current-row</span><br><span class="line">      style&#x3D;&quot;width: 100%;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- 可选择是否table开启可选框 &#x3D;&gt; 若开启 &#x3D;&gt; 传入子组件check&#x3D;&quot;true&quot; &#x3D;&gt; 反之则不传 --&gt;</span><br><span class="line">      ** &lt;el-table-column</span><br><span class="line">        type&#x3D;&quot;selection&quot;</span><br><span class="line">        align&#x3D;&quot;center&quot;</span><br><span class="line">        width&#x3D;&quot;55&quot; &#x2F;&gt; ** </span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;缴费单号&quot; prop&#x3D;&quot;sn&quot; align&#x3D;&quot;center&quot;&#x2F;&gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;缴费单名称&quot; prop&#x3D;&quot;name&quot; align&#x3D;&quot;center&quot; &#x2F;&gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;状态&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">        &lt;template #default&#x3D;&quot;&#123;row&#125;&quot;&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; row.status | statusFilter &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">      &lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;缴费金额&quot; prop&#x3D;&quot;amount&quot; align&#x3D;&quot;center&quot;&#x2F;&gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;缴费时间&quot; prop&#x3D;&quot;paymentTime&quot; align&#x3D;&quot;center&quot; width&#x3D;&quot;100px&quot;&#x2F;&gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;备注&quot; prop&#x3D;&quot;remark&quot; align&#x3D;&quot;center&quot;&#x2F;&gt;</span><br><span class="line">      &lt;el-table-column label&#x3D;&quot;创建人&quot; prop&#x3D;&quot;creatorName&quot; align&#x3D;&quot;center&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;el-table&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const paymentStatusMap &#x3D; [&#39;良好&#39;, &#39;正常&#39;, &#39;优秀&#39;]</span><br><span class="line">  &#x2F;&#x2F; 将导入方法替换为子组件导入</span><br><span class="line">  &#x2F;&#x2F; import &#123; exportExcel &#125; from &#39;@&#x2F;utils&#39;</span><br><span class="line">  ** import exportOptionExcel from &#39;@&#x2F;components&#x2F;exportOptionExcel&#39; **</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;Example&#39;,</span><br><span class="line">    ** components: &#123; exportOptionExcel &#125;, **</span><br><span class="line">    filters: &#123;</span><br><span class="line">      statusFilter(status) &#123;</span><br><span class="line">        return paymentStatusMap[status]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        list: [</span><br><span class="line">          &#123;</span><br><span class="line">          	sn: &#39;测试单号&#39;,</span><br><span class="line">            name: &#39;1&#39;,</span><br><span class="line">            status: 1,</span><br><span class="line">            amount: &#39;1111&#39;,</span><br><span class="line">            paymentTime: &#39;2020-12-23&#39;,</span><br><span class="line">            remark &#39;备注测试&#39;,</span><br><span class="line">            creatorName: &#39;创建人&#39;</span><br><span class="line">        	&#125;,</span><br><span class="line">          &#123;</span><br><span class="line">          	sn: &#39;测试单号&#39;,</span><br><span class="line">            name: &#39;1&#39;,</span><br><span class="line">            status: 1,</span><br><span class="line">            amount: &#39;1111&#39;,</span><br><span class="line">            paymentTime: &#39;2020-12-23&#39;,</span><br><span class="line">            remark &#39;备注测试&#39;,</span><br><span class="line">            creatorName: &#39;创建人&#39;</span><br><span class="line">        	&#125;,</span><br><span class="line">          &#123;</span><br><span class="line">          	sn: &#39;测试单号&#39;,</span><br><span class="line">            name: &#39;1&#39;,</span><br><span class="line">            status: 1,</span><br><span class="line">            amount: &#39;1111&#39;,</span><br><span class="line">            paymentTime: &#39;2020-12-23&#39;,</span><br><span class="line">            remark &#39;备注测试&#39;,</span><br><span class="line">            creatorName: &#39;创建人&#39;</span><br><span class="line">        	&#125;,</span><br><span class="line">          &#123;</span><br><span class="line">          	sn: &#39;测试单号&#39;,</span><br><span class="line">            name: &#39;1&#39;,</span><br><span class="line">            status: 1,</span><br><span class="line">            amount: &#39;1111&#39;,</span><br><span class="line">            paymentTime: &#39;2020-12-23&#39;,</span><br><span class="line">            remark &#39;备注测试&#39;,</span><br><span class="line">            creatorName: &#39;创建人&#39;</span><br><span class="line">        	&#125;   </span><br><span class="line">        ],</span><br><span class="line">        listLoading: false,</span><br><span class="line">        downloadLoading: false,</span><br><span class="line">        statusOptions: paymentStatusMap,</span><br><span class="line">        **         </span><br><span class="line">        excelTable: undefined,	&#x2F;&#x2F; 初始化传入table数据</span><br><span class="line">        excelData: []	&#x2F;&#x2F; 格式化后的数据</span><br><span class="line">        **</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    async created() &#123;</span><br><span class="line">      &#x2F;&#x2F; await this.getList()	若是请求后端异步拿到table数据则需要async&#x2F;await</span><br><span class="line">      ** this.excelTable &#x3D; this.$refs.table **	&#x2F;&#x2F; 初始化table数据</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      &#x2F;&#x2F; handleDownload导出excel方法删除掉</span><br><span class="line">      </span><br><span class="line">      &#x2F;&#x2F; 自定义格式化table的数据 &#x3D;&gt; 回调数据给子组件</span><br><span class="line">      formatJson(filterVal, jsonData) &#123;</span><br><span class="line">        this.excelData &#x3D; jsonData.map(v &#x3D;&gt; filterVal.map(j &#x3D;&gt; &#123;</span><br><span class="line">          return v[j]</span><br><span class="line">        &#125;))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>



<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><blockquote>
<p>自此，咱们的功能需求就完成啦</p>
<p>可以应对最大多数的数据，若有特殊的情况，可以稍加修改噢</p>
<p>有个注意的地方是<strong>el-table-column都需加上对应的prop值</strong>，这样才不会让可选字段丢失</p>
<p>有了自己封装的可选excel导出组件，就只需要专注如何格式化成自己所需要的数据即可啦</p>
<p><strong>以上！与小伙伴们共同学习。</strong>   </p>
<p>厚着脸皮的<em>林大人的小屋</em>系列：</p>
<ul>
<li><a href="https://juejin.cn/post/6902018662882869256/" target="_blank" rel="noopener">林大人的小屋-利用Koa做OneDrive第三方登录</a></li>
<li><a href="https://juejin.im/post/6895598896341483534" target="_blank" rel="noopener">林大人的小屋 - Git原理</a></li>
<li><a href="https://juejin.im/post/6894135344367665159/" target="_blank" rel="noopener">林大人的小屋 - 计算机网络</a></li>
<li><a href="https://juejin.im/post/6894134248115175437" target="_blank" rel="noopener">林大人的小屋 - Web安全/操作系统/性能优化</a></li>
<li><a href="https://juejin.im/post/6888610461755899911" target="_blank" rel="noopener">林大人的小屋 - JS基础（下）</a></li>
<li><a href="https://juejin.im/post/6888610346626449415" target="_blank" rel="noopener">林大人的小屋 - JS基础（上）</a></li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>业务小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>林大人的面试小屋-Git原理</title>
    <url>/lindada-blog/2020/12/29/%E6%9E%97%E5%A4%A7%E4%BA%BA%E7%9A%84%E9%9D%A2%E8%AF%95%E5%B0%8F%E5%B1%8B-Git%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/12/29/%E6%9E%97%E5%A4%A7%E4%BA%BA%E7%9A%84%E9%9D%A2%E8%AF%95%E5%B0%8F%E5%B1%8B-Git%E5%8E%9F%E7%90%86/1.png" class>  
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>总结Git原理<br>整理给有需要的小伙伴们 ✨</p>
<a id="more"></a>

<h1 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h1><p>学习Git原理，从 <em>存储位置<em>、</em>三个区域<em>、</em>四个对象<em>、</em>存储流程</em> 来浅析Git原理<br>为什么要浅析呢，这样能更好认知整个Git命名操作干了”肾”么。来对应真实的实际案例</p>
<h1 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a>存储位置</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先看咱创建Git的文件中有啥子</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b3178a2a0f3472097a238860c11ec71~tplv-k3u1fbpfcp-watermark.image" alt><br><strong>注释：在终端中输入 ls -a 显示目录隐藏文件（.git文件夹默认隐藏）</strong></p>
<blockquote>
<p>简单介绍一下Git常见的文件夹的作用</p>
<ul>
<li>{COMMIT-EDITMSG} 存储最后一次提交的message</li>
<li>{description} 用于GitWeb程序</li>
<li>{config} 配置特定于该仓库的设置</li>
<li>{hooks} 放置客户端或服务端的hook脚本</li>
<li>{HEAD} 指明当前处于哪个分支</li>
<li>{objects} Git对象存储目录</li>
<li>{logs} 用来记录操作信息</li>
<li>{refs} Git引用存储目录</li>
<li>{branches} 放置分支引用的目录</li>
<li>{index} 保存了暂存区域信息</li>
</ul>
</blockquote>
<h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><blockquote>
<p>这里边的文件夹作用通过对应的文件名就基本知道里边是干嘛子的了<br>咱的重点是 <em>objects</em> 这个文件夹中</p>
</blockquote>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da0453e95e46418980e9d7b7cc97447f~tplv-k3u1fbpfcp-watermark.image" alt></p>
<blockquote>
<p>可以看到进入 <em>objects</em> 文件夹中全都是两个字符开头的文件夹<br>这一些就是Git通过<em>sha-1*将文件中的内容生成一个 *40</em> 位长度的hash值<br>取头 <em>2</em> 位值作为目录名，<em>38</em> 位值作为文件名（文件内容转换为二进制内容）<br><em>而我们项目的数据存储位置也就是在这个 objects 宝藏文件夹中啦</em></p>
</blockquote>
<p><strong>info 文件夹下记录对象存储的附加信息</strong><br><strong>pack 文件夹将修改过的文件打包至一个叫 xxx.pack 的二进制文件来以节省空间并提高效率。</strong></p>
<h1 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Git 中有三个重要的区域：工作区域，暂存区(索引区域)，本地仓库</p>
<h2 id="详情-1"><a href="#详情-1" class="headerlink" title="详情"></a>详情</h2><blockquote>
<ul>
<li>工作区域：操作项目的文件，代码开发和工作都是在这。</li>
<li>暂存区域: 进行 <em>add</em> 操作后添加到的区域，可以理解为一个暂存区域，这里面的代码会在下一次 <em>commit</em> 被提交到本地数据库。</li>
<li>本地仓库：<em>commit</em> 后由 Git object 记录着每一次提交的Blob，准备 <em>push</em> 到远程仓库</li>
</ul>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>再简单梳理下流程为：<br>工作区域 -&gt; (add)暂存区域 -&gt; (commit)本地仓库 -&gt; (push)远程仓库</p>
<h1 id="四种对象"><a href="#四种对象" class="headerlink" title="四种对象"></a>四种对象</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>在Git中 有四种对象 ，<em>blob<em>、</em>tree<em>、</em>commit</em> 、<em>tag</em>。</p>
<h2 id="详情-2"><a href="#详情-2" class="headerlink" title="详情"></a>详情</h2><blockquote>
<ul>
<li>blob：来存储文件数据的内容，通常是一个二进制文件。</li>
<li>tree：相当于一个目录，目录下还会有子目录，管理一些“tree”或“blob”，但<em>最终的节点是blob</em>。</li>
<li>commit：指向一次提交，也就是只指向一个 tree 对象。还有些时间戳、最近一次提交的作者、指前上次提交（commits）的指针方法。</li>
<li>tag: 来标记某一个提交(commit) 的方法。</li>
</ul>
</blockquote>
<h1 id="存储流程"><a href="#存储流程" class="headerlink" title="存储流程"></a>存储流程</h1><h2 id="创建-修改文件"><a href="#创建-修改文件" class="headerlink" title="创建/修改文件"></a>创建/修改文件</h2><p>创建和修改文件均在<em>工作区</em>中进行，不会影响到暂存区域和本地仓库</p>
<h2 id="add-操作"><a href="#add-操作" class="headerlink" title="add 操作"></a>add 操作</h2><blockquote>
<p>运行 git add a.file 将发生：</p>
<ol>
<li>a.file添加到索引区域。</li>
<li>根据文件内容利用 sha-1 算法计算生成一个 40 位长度的hash值。</li>
<li>在本地仓库的 objects 目录下创建一个 blob (hash值前两位创建文件夹，剩下38位作为文件名)。</li>
<li>更新索引将 a.file 指向了新建的blob。</li>
</ol>
</blockquote>
<h2 id="commit操作"><a href="#commit操作" class="headerlink" title="commit操作"></a>commit操作</h2><blockquote>
<p>运行 git commit -m ‘’ 将发生：</p>
<ol>
<li>根据当前的索引生产一个 tree 对象。</li>
<li>创建一个新的 commit 对象，指向新建的 tree 对象并将上次提交指针指向上一个 commit 形成 log 链</li>
<li>将当前分支的指针移到新的 commit 结点。</li>
<li>等待push到对应远程仓库</li>
</ol>
</blockquote>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>简简单单的Git原理<br>参考学习如下：<br><a href="https://www.jianshu.com/p/ddef78e9f341" target="_blank" rel="noopener">https://www.jianshu.com/p/ddef78e9f341</a><br><a href="https://juejin.im/post/6844904019245137927" target="_blank" rel="noopener">https://juejin.im/post/6844904019245137927</a></p>
<hr>
<p>厚着脸皮的<em>林大人的小屋</em>系列：</p>
<ul>
<li><a href="https://juejin.im/post/6895598896341483534" target="_blank" rel="noopener">林大人的小屋 - Git原理</a></li>
<li><a href="https://juejin.im/post/6894135344367665159/" target="_blank" rel="noopener">林大人的小屋 - 计算机网络</a></li>
<li><a href="https://juejin.im/post/6894134248115175437" target="_blank" rel="noopener">林大人的小屋 - Web安全/操作系统/性能优化</a></li>
<li><a href="https://juejin.im/post/6888610461755899911" target="_blank" rel="noopener">林大人的小屋 - JS基础（下）</a></li>
<li><a href="https://juejin.im/post/6888610346626449415" target="_blank" rel="noopener">林大人的小屋 - JS基础（上）</a></li>
</ul>
]]></content>
      <tags>
        <tag>面试小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序简历</title>
    <url>/lindada-blog/2020/07/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AE%80%E5%8E%86/</url>
    <content><![CDATA[<h1 id="微信小程序简历"><a href="#微信小程序简历" class="headerlink" title="微信小程序简历"></a>微信小程序简历</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>哈喽！你好！<br>这里是微信小程序 - <strong>林锦浩的简历</strong><br><a href="https://gitee.com/lin_daren/Resume-MiniProgram" target="_blank" rel="noopener">项目传送门</a><br><em>欢迎小星星</em> 🌟</p>
<hr>
<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p><strong>欢迎扫描下面二维码查看</strong>  </p>
<img src="/lindada-blog/2020/07/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AE%80%E5%8E%86/weChat.png" class> 

<a id="more"></a> 

<hr>
<p>小程序简历基于微信小程序和Vant框架搭建<br>具有<strong>主页</strong>、<strong>个人简介</strong>、<strong>关于我的</strong>、<strong>我的技能</strong>、<strong>我的项目</strong>等页面展示。<br>应聘时，更容易让面试官了解你，从千篇一律的PDF简历中脱颖而出。 </p>
<hr>
<p>希望这个小程序能让你的简历在面试中给面试官留下好印象<br>更多功能和内容，我还在不断改善和提升当中  </p>
<h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>有想法的小伙伴们欢迎与我交流<br>有所不足也欢迎小伙伴们指教  </p>
<p>若这个小项目对你有所帮助或启发<br><strong>麻烦点个小赞噢！</strong><br><del>白嫖就带你上山噢！</del></p>
<h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><p><a href="https://lin_daren.gitee.io/lindada-blog/?_blank" title="我的掘金">博客</a> </p>
<p><a href="https://juejin.im/user/5eb823eb5188256d4345f77a?_blank" target="_blank" rel="noopener" title="我的掘金">掘金</a> </p>
<p><a href="https://www.yuque.com/lindaren-bj8vp?_blank" target="_blank" rel="noopener" title="我的语雀">语雀</a></p>
<p>邮箱: <a href="mailto:809751956@qq.com">809751956@qq.com</a></p>
<p>WeChat: dadaLin_0809  </p>
]]></content>
      <tags>
        <tag>简历小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>林大人的面试小屋-计算机网络</title>
    <url>/lindada-blog/2020/12/29/%E6%9E%97%E5%A4%A7%E4%BA%BA%E7%9A%84%E9%9D%A2%E8%AF%95%E5%B0%8F%E5%B1%8B-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/12/29/%E6%9E%97%E5%A4%A7%E4%BA%BA%E7%9A%84%E9%9D%A2%E8%AF%95%E5%B0%8F%E5%B1%8B-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.png" class>  
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>总结计算机网络<br>整理给有需要的小伙伴们 ✨</p>
<a id="more"></a>

<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="1-七层协议："><a href="#1-七层协议：" class="headerlink" title="1. 七层协议："></a>1. 七层协议：</h2><ol>
<li>应用层：HTTP</li>
<li>表示层</li>
<li>会话层</li>
<li>传输层：TCP</li>
<li>网络层：IP传输</li>
<li>数据链路层</li>
<li>物理层。 </li>
</ol>
<h2 id="2-DNS解析"><a href="#2-DNS解析" class="headerlink" title="2. DNS解析"></a>2. DNS解析</h2><p> DNS解析的就是通过域名系统查询对应的IP。</p>
<p>具体过程</p>
<ol>
<li>首先当用户在url中输入一个网址后，操作系统首先会在本地缓存中查询，若本地缓存中查询到就向用户返回对应的IP</li>
<li>若没有则去系统配置的DNS服务器中查询，本地服务器向根域名服务器中查询</li>
<li>根域名服务器返回顶级域名服务器的ip地址的列表</li>
<li>本地服务器向顶级域名服务器发送请求</li>
<li>顶级域名服务器返回权威域名服务器的IP地址列表</li>
<li>然后本地服务器再向权威域名服务器发送请求</li>
<li>最后权威域名服务器返回一个与主机名对应的IP地址列表。 </li>
</ol>
<p>递归查询指的是当我们发起一次请求后，域名服务器代为向下一级服务器发起请求，最终返回一个结果给我们，用户只需发起一次请求即可。</p>
<p>迭代查询指的是用户发起一次请求之后，域名服务器返回单次查询的结果，下一次域名服务器还需要用户自己发起请求查询，迭代查询需要发起多次查询才会返回最终的查询结果。 </p>
<p>那么我们向<strong>本地DNS服务器发起请求的方式就是递归请求</strong>，因为我们只需发起一次请求，等待本地服务器返回最终结果给我们。而本地DNS服务器向域名服务器发起请求属于迭代请求，需要本地服务器一次次的向不同级域名服务器发起请求才会返回最终的结果。 </p>
<h2 id="3-前后端如何通信"><a href="#3-前后端如何通信" class="headerlink" title="3. 前后端如何通信"></a>3. 前后端如何通信</h2><p> Ajax、WebSocket、CORS </p>
<p> WebSocket指的是允许服务器主动向客户端推送信息，websocket是一个全双工协议，就是通信双方是平等的，可以相互发送信息。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，进行双向数据传输。 </p>
<p> Ajax的readystate值：0：未初始化，即请求还没初始化；1：正在加载，即已建立服务器连接；2：加载成功，即请求已接受；3：正在交互，即正在处理请求；4：完成，即请求已完成且响应已准备好。 </p>
<p> Ajax会自动带上同源的cookies，跨域时不会带上cookies。 </p>
<p> 若想在跨域时携带cookies，则需要在<a href>前端</a>设置withCredentials为true，同时在服务器端header设置Across-Control-Allow-Credentials为true。 </p>
<h2 id="4-CDN"><a href="#4-CDN" class="headerlink" title="4. CDN"></a>4. CDN</h2><p> 内容分发网络，它是构建在现有互联网基础之上的一层智能虚拟网络，它通过在不同地理位置建立节点服务器，对源网站资源进行不同节点的缓存，让用户在访问资源时可以就近获取所需的资源内容。CDN服务可以大大缩减用户访问服务器所需时间，提高了访问效率和响应速度与网站的可用性，解决了网络带宽小，用户访问量大，网点分布不均等问题。 </p>
<h2 id="5-Cookies、Session"><a href="#5-Cookies、Session" class="headerlink" title="5. Cookies、Session"></a>5. Cookies、Session</h2><p> 应用场景：当我们第一次登陆了某个网站之后验证了身份信息，之后再次登陆时不需要验证可以直接登陆，这时候就用到了cookies。例如场景为购物车时，添加了商品之后<a href>客户端</a>处就可以知道添加了哪些商品，而服务器如何判别呢，所以也需要储存一些信息就用到了session。 </p>
<h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h3><p> 服务器通过设置set-cookies这个响应头，将cookies信息返回给浏览器，浏览器将响应头中的cookies信息保存在本地中，当下次向服务器发送http请求时，浏览器会自动保存这些cookies信息到请求头中。 </p>
<p> 通过cookies服务器就会识别浏览器，从而保证返回的数据是这个用户的。 </p>
<h5 id="cookies属性"><a href="#cookies属性" class="headerlink" title="cookies属性"></a>cookies属性</h5><p> max-age：过期时间有多长，默认在浏览器关闭时失效。 </p>
<p> expires：设置过期时间。 </p>
<p> secure：表示cookies只会在https的时候才会发送。 </p>
<p> httponly：表示js脚本不能获取cookies，防止攻击者盗用用户cookies </p>
<p> domain：表示该cookies对于哪个域是有效的。 </p>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p> 存放在服务器的一种用来存放用户数据的结构。浏览器第一次发送请求时服务器自动生成了hashtable和sessionid来唯一表示这个hash表，并将sessionid存放在cookies中通过响应发送到浏览器，浏览器第二次请求时会将前一次服务器响应的sessionid随着cookies发送到服务器端，服务器从请求中提取sessionid，并和保存的所有sessionid进行对比，找到这个用户所对应的hash表。 </p>
<p> 当用户在应用程序的不同web页面间跳转时，存储在session对象中的变量不会丢失而是在整个用户会话中一直存在下去。并且session依赖于cookies，因为sessionid是保存在cookie中的。 </p>
<h3 id="session和cookies的区别"><a href="#session和cookies的区别" class="headerlink" title="session和cookies的区别"></a>session和cookies的区别</h3><ol>
<li>cookies是保存在客户端的，而session是保存在服务器端的。 </li>
<li>cookies因为在客户端保存，所以容易被窃取，为了保证安全，应将数据存放在session中。 </li>
<li>session因为保存在服务器端，因此会消耗大量服务器资源，而cookies在每次http请求中都会带上，因此影响网络性能。 </li>
</ol>
<h2 id="6-HTTP"><a href="#6-HTTP" class="headerlink" title="6. HTTP"></a>6. HTTP</h2><p>HTTP是超文本传输协议，它是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。 </p>
<p>它是无连接的无状态的。 </p>
<h3 id="请求报文：请求头有哪些？"><a href="#请求报文：请求头有哪些？" class="headerlink" title="请求报文：请求头有哪些？"></a>请求报文：请求头有哪些？</h3><ol>
<li>Accept：用户代理可处理的媒体类型； </li>
<li>Accept-Charset：优先的字符集 </li>
<li>Accept-Encoding：优先的内容编码 </li>
<li>Accept-Language：优先的语言 </li>
<li>if-modified-since：比较资源的更新时间 </li>
<li>if-none-match：比较实体标记 </li>
<li>referer：对请求中uri的原始获取方 </li>
<li>user-agent：http客户端程序的信息 </li>
<li>Content-Type：实体主体的媒体类型 </li>
</ol>
<h3 id="响应报文：响应头部有哪些？"><a href="#响应报文：响应头部有哪些？" class="headerlink" title="响应报文：响应头部有哪些？"></a>响应报文：响应头部有哪些？</h3><ol>
<li>Age：推算资源创建经过时间 </li>
<li>ETag：资源的匹配信息 </li>
<li>Location：让客户端重定向至指定URI </li>
<li>Last-modified：资源的最后修改日期时间 </li>
<li>Expires：实体主体过期的日期时间 </li>
<li>Content-Type：实体主体的媒体类型 </li>
</ol>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p> 100：表示服务器端接收到请求，可继续发送请求 </p>
<p> 101：切换协议，一般是将http协议切换到更高版本； </p>
<p> 200：请求成功 OK </p>
<p> 201：服务器端接收到请求，并成功创建了一个新资源； </p>
<p> 204：请求成功，但响应报文中不含实体的主体部分； </p>
<p> 205：请求成功，但响应报文中不含实体的主体部分，但与204的区别是要求客户端重置内容； </p>
<p> 206：进行范围请求，成功处理了部分内容； </p>
<p> 300：多种选择，请求的资源可包括多个位置，服务器端返回资源特征和响应的地址列表。 </p>
<p> 301：永久重定向； </p>
<p> 302：临时重定向； </p>
<p> 303：表示资源存在着另一个URL，应使用GET方法获取资源； </p>
<p> 304：未作修改的，浏览器端自上次请求以来，请求的条件和内容并未发生改变，服务器端返回304状态码，成为if-modified-since的http标头。 </p>
<p> 307：临时重定向，和302含义类似，但期望客户端保持请求方法不变向新的地址发出请求。 </p>
<p> 400：请求报文存在语法错误； </p>
<p> 401：表示发送的请求需要通过http认证的身份验证信息； </p>
<p> 403：对于请求资源的访问，被服务器拒绝； </p>
<p> 404：在服务器上没有找到请求的资源； </p>
<p> 500：服务器端在执行请求时发生了错误</p>
<p> 501：表示服务器不支持请求所需的某个功能； </p>
<p> 503：表示服务器在超负荷或正在停机维护，无法处理请求。 </p>
<h3 id="GET和POST的区别？"><a href="#GET和POST的区别？" class="headerlink" title="GET和POST的区别？"></a>GET和POST的区别？</h3><ol>
<li>get主要是向服务器端请求获取数据，不会对服务器端数据进行修改。而post主要用于提交数据，会对数据有所更新。 </li>
<li>get在浏览器回退时是无害的，post需要重新提交。 </li>
<li>get请求可以缓存，因为它并不更新数据库，因为可以缓存到本地中下次请求时直接从缓存中获取，而post不能缓存。 </li>
<li>post相对于get来说较为安全，因为get请求包含在url中，会被浏览器保存记录且易于暴露窃取。而post较为安全。 </li>
<li>因为url有长度限制，因此get的传递参数内容有长度限制，而post无长度限制，post可以通过req.body来传输比get更多的数据。 </li>
<li>post请求发送两次，第一次先发送header，服务器端响应100表示继续发送，第二次再发送data，服务器响应200 ok。而get请求一次。 </li>
<li>post支持更多的编码类型而不会对数据类型限制。 </li>
</ol>
<h3 id="HTTP-CSP内容安全策略"><a href="#HTTP-CSP内容安全策略" class="headerlink" title="HTTP CSP内容安全策略"></a>HTTP CSP内容安全策略</h3><p>内容安全策略主要是限制资源获取，并报告资源获取越权。 </p>
<p>可以再http头部设置Content-Security-Policy: default-src http: https：表示只允许通过http、https的方式加载资源； </p>
<p>还可以通过meta标签内设置http-equiv=’Content-Security-Policy’； </p>
<h3 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a>HTTP2</h3><p>相比于http1来说大幅度提高了web的性能。并且采用二进制的格式传输，取代了http1的文本格式，二进制格式解析更高效。多路复用替代了http1中的阻塞机制，所有的相同域名请求都通过同一个TCP连接并发完成。 </p>
<p>二进制传输： </p>
<p>HTTP2中的加强性能的核心点在于此，大幅度提高了web性能。采用二进制格式传输，取代了http1中的文本格式，二进制格式解析更高效。 </p>
<p>多路复用： </p>
<ol>
<li>在http1中，并发多个请求需要多个TCP连接，浏览器为了控制资源会有6-8个TCP连接限制。 </li>
<li>在http2中，首先同域名下所有通信都在单个连接上完成，消除了因多个TCP连接而带来的延迟和内存消耗。单个连接上可以并行交错的请求和响应，之间互不干扰。 </li>
<li>在HTTP2中有两个非常重要的概念，分别是帧和流，帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。多路复用就是在一个TCP连接中可以存在多个流，也就是可以发送多个请求，通过对帧的标识知道属于哪个请求，通过这个技术，可以避免http旧版本中的队头阻塞问题，极大的提高传输性 </li>
</ol>
<p>Header压缩： </p>
<p>在http1中，我们使用文本的形式传输header，在header携带cookies的情况下，可能每次都要重复传输几百到几千的字节。 </p>
<p>而在http2中，使用header压缩可以减少每次传输的大小，在两端维护了索引表，用于记录出现过的header，在之后的传输过程中就可以传输已经记录过的header键名，对端收到数据后就可以通过键名找到对应的值。 </p>
<p>服务器端Push：</p>
<p>在http2中，服务器可以再客户端某个请求之后主要推送其他资源。 </p>
<p>例如某些资源客户端是一定会请求的，这时就可以采取服务器端push技术，提前给客户端推送必要的资源，这样就可以节省一些请求时的开销减少一些延迟时间。</p>
<h2 id="7-HTTPS"><a href="#7-HTTPS" class="headerlink" title="7. HTTPS"></a>7. HTTPS</h2><p> http默认端口为80，对于传输采用不加密的方式，而https默认端口为443，对于传输的数据进行加密传输。 </p>
<h3 id="对称加密："><a href="#对称加密：" class="headerlink" title="对称加密："></a>对称加密：</h3><p> 又称私钥加密，即信息的发送方和接收方使用同一个密钥去加密和解密数据，对称加密的特点是算法公开，加密和解密的速度快，适合于大数据量进行加密。加密过程中的私钥与解密过程中的私钥是同一个密钥，因此成为对称加密，由于对称加密的算法公开，因此密钥一旦被泄漏，那么密文就很容易被破解，所以对称加密的缺点是密钥安全管理困难。 </p>
<h3 id="非对称加密："><a href="#非对称加密：" class="headerlink" title="非对称加密："></a>非对称加密：</h3><p> 又称为公钥加密，与对称加密相比，安全性更高，非对称加密使用一对密钥，分别为公钥和私钥，且二者成对出现，私钥被自己保存，不能对外泄露，公钥指的是公共的密钥，任何人都可以获取。用公钥和密钥中的任何一个进行加密，用另一个进行解密。缺点是加密和解密的时间长，速度慢，只适合对少量数据进行加密。 </p>
<h3 id="HTTPS通信过程："><a href="#HTTPS通信过程：" class="headerlink" title="HTTPS通信过程："></a>HTTPS通信过程：</h3><p> HTTPS协议=HTTP协议+SSL/TLS协议，HTTPS为了兼顾安全与效率，同时使用了对称加密和非对称加密。具体是数据是利用对称加密进行传输，而对称加密的过程需要客户端的一个密钥，为了确保能把密钥安全传输到服务器端，采用非对称加密的方式去对该密钥再进行加密传输，总的来说，就是对数据进行对称加密，而对称加密所需的密钥通过非对称加密传输。 </p>
<h3 id="HTTPS请求过程：共四次握手"><a href="#HTTPS请求过程：共四次握手" class="headerlink" title="HTTPS请求过程：共四次握手"></a>HTTPS请求过程：共四次握手</h3><ol>
<li>首先用户向服务器端发送HTTPS请求，请求到服务器端的443端口上。 </li>
<li>服务器端有一对密钥，分别为公钥和私钥，私钥由服务器端自身保存并且不可泄露，公钥可以传递给任何人。 </li>
<li>服务器端向客户端发送公钥 </li>
<li>客户端接收到公钥之后，首先检测公钥是否合法，如果不合法则此次HTTPS传输无效，如果公钥合格，就会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们成它为客户端密钥，主要是为了和服务器端上的密钥进行区分，然后用服务器端传递过来的公钥对这个客户端密钥进行非对称加密，这样客户端密钥就变成了密文，然后再传递给服务器端。 </li>
<li>服务器端接收到密文之后，用私钥对其进行非对称加密，获取到明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，然后将加密后的密文再传递给客户端。 </li>
<li>客户端接收到服务器端传递过来的密文，用客户端密钥进行对称解密，得到服务器端传递过来的数据。 </li>
</ol>
<h2 id="8-Restful"><a href="#8-Restful" class="headerlink" title="8. Restful"></a>8. Restful</h2><p> 表述性状态转移，一组架构约束条件和原则。如果一个架构符合Rest的约束条件和原则，我们就称它为Restful架构。 </p>
<p> 基本概念：在restful中，一切的内容都被认为是一种资源。每个资源都由URI唯一标识。使用统一的接口处理资源请求（POST/PUT/GET/DELETE/HEAD）。无状态（每次请求之前是无关联，没有session） </p>
<p> HEAD：主要用于确认URL的有效性以及资源更新的日期时间等。 </p>
<p> PATCH：新引入的，对PUT方法的补充，用来对已知资源进行局部更新。</p>
<h2 id="9-资源表述"><a href="#9-资源表述" class="headerlink" title="9. 资源表述"></a>9. 资源表述</h2><p> 客户端获取的是资源的表述，资源在外界的具体呈现，可以有多种表述形式，在客户端和服务器端之间传送的也是资源的表述，而不是资源本身。文本资源可以采用html、xml、json等格式，图片可以采用jpg、png展现出来。 </p>
<p> 资源的表述包括数据和描述数据的元数据，例如content-type就是元数据属性。 </p>
<p> 客户端如何知道服务器端提供哪种表述形式呢？ </p>
<p> 可以通过HTTP内容协商，客户端可以通过在请求头中通过Accept请求一种特定格式的表述，服务器端则通过Content-Type告诉客户端资源的表述形式。</p>
<h2 id="10-TCP"><a href="#10-TCP" class="headerlink" title="10. TCP"></a>10. TCP</h2><p> TCP又叫传输控制协议，是面向连接的，可靠的，基于字节流的传输协议。在基于TCP进行通信时，通信双方需要先建立一个TCP连接，<strong>建立连接需要经过三次握手，断开连接需要经过四次握手</strong>。 </p>
<p> TCP头部一些字段： </p>
<ul>
<li>序列号（seq）：这个序号保证了TCP传输的报文是有序的，对端可以通过序号来拼接报文字段。 </li>
<li>确认号：这个序号表示数据接接收端期望接收的下一个字节的编号是多少， </li>
<li>窗口大小（Window Size）：表示还能接收多少字节的数据，用于流量控制。 </li>
<li>标识符： <ul>
<li>ACK=1：该字段为表示确认号字段是有效的，此外TCP还规定在连接建立后传送的所有报文必须将ACK设为1. </li>
<li>SYN=1：当SYN=1，ACK=0时，表示当前报文段是一个连接请求报文，当SYN=1，ACK=1时，表示当前报文段是一个同意建立连接的应答报文。 </li>
<li>FIN=1：该字段为一表示此报文段是一个释放连接的请求报文。 </li>
</ul>
</li>
</ul>
<h3 id="三次握手："><a href="#三次握手：" class="headerlink" title="三次握手："></a>三次握手：</h3><ol>
<li>第一次握手：SYN=1，seq=x。客户端向服务器端发起连接请求报文段，该报文中包含自身的数据通讯初始序号，请求发送后，客户端进入SYN-SENT状态。 </li>
<li>第二次握手：SYN=1，ACK=1，确认序号=x+1，seq=y。服务器端收到连接请求之后，如果同意连接则会发送一个应答，该应答中也会包含自身的数据通讯初始号，发送完成后便进入SYN-RECEIVED状态。 </li>
<li>第三次握手：ACK=1，确认序号=y+1，seq=x+1。客户端收到连接同意的应答后，还要向服务器端发送一个确认报文，客户端发送完这个报文段后便进入到ESTABLISHED状态，服务器端收到这个应答后也进入ESTABLISHED状态，此时连接建立成功。 </li>
</ol>
<h4 id="为什么不用两次握手？"><a href="#为什么不用两次握手？" class="headerlink" title="为什么不用两次握手？"></a>为什么不用两次握手？</h4><p> 原因有二： </p>
<ol>
<li>如果只有两次握手，那么服务器端不会知道是否<a href>客户端</a>能够建立连接，会对网络造成性能上的浪费。 </li>
<li>如果只有两次握手，当第一次客户端向服务器端发送的连接请求若没有丢失而是被阻塞在网络中会产生错误。这样客户端长时间没有接受到服务器端传递过来的连接确认报文会再次发起请求连接报文给服务器，那么等到阻塞的报文畅通后，服务器端会响应给客户端，因为只有两次握手这样就又会建立起连接，但这个请求已经报废了，会重复连接对网络资源的浪费。那若有三次握手，则客户端即使收到服务器的确认报文也会认为这是报废的请求，而不会再次发起确认给服务器就不会建立连接，由于服务器收不到确认，就知道客户端没有请求连接。 </li>
</ol>
<h3 id="四次挥手："><a href="#四次挥手：" class="headerlink" title="四次挥手："></a>四次挥手：</h3><ol>
<li>第一次挥手：如果客户端认为数据发送完成，会向服务器端发送数据发送完成的请求字段。 </li>
<li>第二次挥手：服务器收到连接释放请求，会告诉应用层要释放TCP连接，然后会发送ACK包给客户端，进入CLOSE_WAIT状态，表示客户端到服务器的连接已经释放，不接受客户端发送的数据了。但TCP连接是双向的，所以服务器依旧可以发送数据给客户端。 </li>
<li>第三次挥手：服务器端如果还有数据没发送完毕会继续发送，完毕后会向客户端发送连接释放请求，然服务器端进入LAST-ACK状态。 </li>
<li>第四次挥手：客户端收到释放请求后，会向服务器发送确认应答，此时客户端进入TIME-WAIT阶段，这个状态会持续2MSL（最大生存期，指报文段在网络中生存的时间，超时会被抛弃）时间，若在该时间内没有服务器的重发请求的话，就进入CLOSED状态，当服务器端接收到确认应答后也进入CLOSED状态。 </li>
</ol>
<h4 id="为什么第四次挥手中客户端进入TIME-WAIT状态要持续2MSL时间后再进入CLOSED状态？"><a href="#为什么第四次挥手中客户端进入TIME-WAIT状态要持续2MSL时间后再进入CLOSED状态？" class="headerlink" title="为什么第四次挥手中客户端进入TIME-WAIT状态要持续2MSL时间后再进入CLOSED状态？"></a>为什么第四次挥手中客户端进入TIME-WAIT状态要持续2MSL时间后再进入CLOSED状态？</h4><p>为了保证服务器能收到客户端的确认应答，若客户端发完确认应答之后直接进入CLOSED状态，若果客户端的确认应答因为网络问题一直没有到达，那么就会造成服务器端不能正常关闭。若服务器端没有收到应答信息，会向客户端<strong>发送超时重传</strong>，此时客户端在2MSL时间内再次收到服务器的连接释放请求，便回再向服务器端重新发送应答信息。 </p>
<h2 id="11-超时重传（ARQ）协议"><a href="#11-超时重传（ARQ）协议" class="headerlink" title="11. 超时重传（ARQ）协议"></a>11. 超时重传（ARQ）协议</h2><h4 id="停止等待ARQ："><a href="#停止等待ARQ：" class="headerlink" title="停止等待ARQ："></a>停止等待ARQ：</h4><p> 当发送端向接收端发送一个报文之后，都要停止等待接收端返回的确认报文，并启动一个定时器，如果在定时器时间内收到对端应答就取消定时器并发送下一段报文。 </p>
<p> 如果报文传输的过程丢失，这时候超时就会再次发送丢包的数据直到对端响应，所以需要每次都备份发送的数据。传输效率低，在良好的网络环境下每次都要发送报文都得等待对端的ACK </p>
<h4 id="连续ARQ："><a href="#连续ARQ：" class="headerlink" title="连续ARQ："></a>连续ARQ：</h4><p> 在连续ARQ中，发送端拥有一个发送窗口，可以在没有收到应答的情况下持续发送窗口内的数据，这样相比停止等待ARQ协议来说减少了等待时间，提高了效率。 </p>
<h4 id="滑动窗口："><a href="#滑动窗口：" class="headerlink" title="滑动窗口："></a>滑动窗口：</h4><p> 发送端窗口包括已发送但还没收到应答的数据和可以发送但是未发送的数据。发送端窗口是由接收窗口剩余大小决定的，接收方会把当前接收窗口的剩余大小写入应答报文，发送端收到应答后根据该值和当前网络拥塞情况发送窗口的大小，所以发送窗口的大小是不断变化的。当发送端接收到应答报文中，会随之将窗口进行滑动。滑动窗口实现了流量控制机制，接收方通过报文告知发送方还可以发送多少数据，从而保证接收方能够来得及接收数据。 </p>
<h4 id="流量控制机制："><a href="#流量控制机制：" class="headerlink" title="流量控制机制："></a>流量控制机制：</h4><p> 客户端通过发送速率的调整来保证接收方来得及接收，若发送的速率大于接收的速率，就会造成报文段的丢失。接收方主要是通过接收窗口来告诉发送方自己所能接收的大小，发送方根据接收方的接收窗口的大小来调整发送窗口的大小，以此来达到控制发送速率的目的。 </p>
<h4 id="拥塞处理机制："><a href="#拥塞处理机制：" class="headerlink" title="拥塞处理机制："></a>拥塞处理机制：</h4><p> 主要是根据网络中的拥塞情况来控制发送方数据的发送速率，如果网络处于拥塞状态，发送方就减小发送的速率，这样一方面可以避免增加网络中的拥塞程度，另一方面也是为了避免网络拥塞可能造成的报文段丢失。 </p>
<p> TCP的拥塞控制机制主要使用了四个机制，分别是慢启动、拥塞避免、快速重传和快速恢复。 </p>
<p> 慢启动的基本思想是，就是在传输开始时发送方并不知道网络中的拥塞程度，因此先以较低的速率发送，先进性试探性发送请求，当接收到确认报文后就将发送窗口大小×2，以此类推以指数级速率增长，但不能没有限制，所以有一个阈值限制，当窗口的大小超过阈值限制时就会启动拥塞避免算法。 </p>
<p> 拥塞避免算法是每过一个往返时间窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢调整大小到最佳值。若在传输的过程中定时器超时，这时候TCP会认为网络拥塞了，会马上进入以下步骤：将阈值设置为原来的一半，然后将拥塞窗口的值设为减半后的阈值，然后开始执行阻塞避免算法，使得拥塞窗口缓慢地加性增大。 </p>
<p> 快速重传：一旦接受端收到的报文出现失序的情况，接受端只会回复最后一个顺序正确的报文序号，如果收到三个重复的ACK，无需等待定时器超时再重发而是启动快速重传。</p>
<h2 id="12-UDP"><a href="#12-UDP" class="headerlink" title="12. UDP"></a>12. UDP</h2><p> 用户数据报协议，UDP是一个无连接的，不可靠的，基于数据报的传输协议。应用场景：当强调输出性能而非完整性时，如音频和多媒体的实时传输，有个视频流传协议的实时传输就是基于UDP封装而来的。 </p>
<h3 id="不可靠性"><a href="#不可靠性" class="headerlink" title="不可靠性"></a>不可靠性</h3><ol>
<li>UDP是无连接的，也就是说不需要建立和断开连接。 </li>
<li>UDP是不可靠的，它不会去备份数据，也不关心对方是否能收到数据。 </li>
<li>UDP没有拥塞控制，一直以恒定的速度发送数据，即使网络条件不好，也不进行速率调整，这样造成的弊端就是在网络条件不好时可能导致丢包。 </li>
</ol>
<h3 id="高效性"><a href="#高效性" class="headerlink" title="高效性"></a>高效性</h3><ol>
<li>因为UDP没有TCP那么复杂，不需要保证数据不丢失且有序到达，所以UDP的头部开销小，因为传输数据报文时是很高效的。 </li>
<li>传输方式支持一对多，多对一，多对多，一对一的方式，也就是说UDP提供了单播、多播、广播的功能。 </li>
</ol>
<h2 id="13-从输入URL到页面加载完成的过程"><a href="#13-从输入URL到页面加载完成的过程" class="headerlink" title="13. 从输入URL到页面加载完成的过程"></a>13. 从输入URL到页面加载完成的过程</h2><ol>
<li>在浏览器地址栏输入URL </li>
<li>首先判断是否有永久重定向（301） </li>
<li>浏览器查看资源是否有强缓存，若命中强缓存就直接从缓存中使用，若协商缓存则需要到服务器进行校验资源是否可用。 <ul>
<li>HTTP1.0提供expires，值为一个绝对时间表示缓存过期时间 </li>
<li>HTTP1.1增加了一个cache-control：max-age，值为以秒为单位的最大缓存过期时间。还有no-cache，no-store，分别表示可以缓存但会立即失效和不能缓存。 </li>
</ul>
</li>
<li>浏览器解析URL获取协议，主机，端口，path。 </li>
<li>浏览器组装一个HTTP（GET）请求报文。 </li>
<li>DNS解析，查找过程如下： <ul>
<li>首先查找浏览器缓存； </li>
<li>第二查找本机缓存 </li>
<li>第三查找hosts文件 </li>
<li>第四路由器缓存 </li>
<li>第五ISP DNS缓存 </li>
<li>第六DNS查询（递归查询、迭代查询） </li>
</ul>
</li>
<li>端口建立TCP连接，三次握手： <ol>
<li>客户端发送一个TCP的SYN=1，seq=x的连接请求到服务器端。 </li>
<li>服务器端返回SYN=1，ACK=x+1，Seq=Y的确认连接字段。 </li>
<li>客户端收到确认连接字段后发生ACK=Y+1，seq=z </li>
</ol>
</li>
<li>TCP连接建立后发起HTTP请求 </li>
<li>服务器接收到请求并解析，将请求转发到服务程序。 </li>
<li>服务器检查HTTP请求头部是否有缓存验证信息，如果缓存未过期，返回304状态码 </li>
<li>处理程序读取完整请求并准备HTTP响应，同时可能需要查询数据库等操作 </li>
<li>服务器将相应报文通过TCP连接发送会浏览器。 </li>
<li>浏览器接收到HTTP响应，根据情况选择是否关闭TCP连接，若关闭的话四次挥手。 <ol>
<li>浏览器端首先向服务器端发送数据已发送完毕的报文 </li>
<li>服务器端接收到之后，返回确认报文同意浏览器停止发送数据，但此时服务器端依旧可以接收未接收完的数据，并且可以返回数据给浏览器端。 </li>
<li>服务器端将所有数据返回给客户端之后，向客户端发送请求连接释放报文。 </li>
<li>客户端收到连接释放报文后，向服务器端返回确认连接释放报文。 </li>
</ol>
</li>
<li>浏览器接收到服务端的响应报文后，会检查响应状态码，根据不同的状态码处理不同的情况。 </li>
<li>如果资源可以缓存，进行缓存。 </li>
<li>将响应内容进行解码。 </li>
<li>根据资源类型决定如何处理。 </li>
<li>若资源类型为html类型，解析html文档，构建DOM树，并下载相关资源，构造CSSOM树，执行js脚本。 </li>
<li>首先构造DOM树 </li>
<li>解析过程中如果遇到图片、样式表、js文件便启动下载 </li>
<li>构建CSSOM树 </li>
<li>根据DOM树和CSSOM树构建渲染树： <ol>
<li>从DOM树的根节点遍历所有可见节点。 </li>
<li>对每一个节点找到恰当的CSSOM规则并应用 </li>
<li>发布可视节点的内容和计算样式 </li>
</ol>
</li>
<li>js脚本解析： <ol>
<li>浏览器创建document对象并解析html，将解析的文本和节点添加到文档中。 </li>
<li>html解析器遇到没有defer和async属性的script时，将他们添加到文档中，然后去执行脚本语句。在脚本下载和执行时html解析器会暂停。直到script下载和执行完毕 </li>
<li>当解析器遇到async属性的script时，开始下载脚本但会继续解析文档，当脚本下载完毕时就会立刻回过头去执行该脚本，但是解析器不会停下来等它下载。 </li>
<li>当解析器遇到defer属性的script时，defer脚本会在文档解析完毕时按照顺序执行，并且可以访问完整文档。 </li>
<li>浏览器在document对象上触发DOMContentLoaded事件 </li>
<li>此时文档完全解析完成，浏览器可能还在等待图片等内容加载，等待这些内容完成载入并且所有异步脚本完成载入和执行之后，window会触发loaded事件 </li>
</ol>
</li>
<li>显示页面（html解析过程中会逐步显示页面）。</li>
</ol>
<h2 id="14-缓存"><a href="#14-缓存" class="headerlink" title="14. 缓存"></a>14. 缓存</h2><h3 id="1-强缓存："><a href="#1-强缓存：" class="headerlink" title="1. 强缓存："></a>1. 强缓存：</h3><p> 强缓存就是直接向浏览器缓存中查找结果，并且根据该结果的缓存规则决定是否使用该缓存的过程。主要有三种情况：</p>
<ol>
<li><p>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器端发起请求。</p>
</li>
<li><p>存在该缓存结果和缓存标识，但结果已失效，只返回该缓存标识，强制缓存失效，则使用协商缓存。</p>
</li>
<li><p>存在该缓存结果和缓存标识，结果仍有效，使用强制缓存。 </p>
<p>控制强制缓存的http头部字段为expires和cache-control。 </p>
<p>Expires：是http1.0中控制缓存的字段，值为服务器返回请求结果缓存的到期时间，是一个绝对值。缺点是假如客户端和服务器端时间不同步，那么就产生误差，则强制缓存有效时间不准确。 </p>
<p>Cache-Control：是到了http1.1中，Expires被Cache-Control取代，主要取值为： </p>
</li>
<li><p>no-cache：客户端缓存内容，但是否使用缓存则需要经过协商缓存来验证决定。 </p>
</li>
<li><p>no-store：所有内容都不会被缓存。 </p>
</li>
<li><p>max-age：缓存内容将在多少秒失效。 </p>
</li>
<li><p>public：所有内容都会被缓存（包括客户端和服务器端） </p>
</li>
<li><p>private：所有内容只有客户端可以缓存，是cache-control的默认值。 </p>
</li>
</ol>
<h3 id="2-协商缓存"><a href="#2-协商缓存" class="headerlink" title="2. 协商缓存"></a>2. 协商缓存</h3><p> 协商缓存就是浏览器缓存中的缓存标识失效，即强制缓存失效后，浏览器携带缓存标识向服务器端发起请求。由服务器根据缓存标识决定是否使用协商缓存，主要有两种情况 </p>
<ol>
<li><p>协商缓存生效，返回304状态码，即该自愿无更新。 </p>
</li>
<li><p>协商缓存失效，返回200状态码和请求结果，即该资源更新了返回更新后的资源。 </p>
<p>协商缓存的标识也是在响应报文的HTTP头部中和请求结果一起返回给浏览器端，主要字段有Last-Modified、If-Modified-Since和Etag、If-None-Match。其中Etag、If-None-Match比Last-Modified、If-Modified-Since优先级高。 </p>
</li>
<li><p>Last-Modified/If-Modified-Since </p>
<ol>
<li>Last-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间。 </li>
<li>If-Modified-Since是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到这个请求头和该资源在服务器的最后修改时间进行对比，若服务器的资源修改时间大于If-Modified-Since，则说明资源被更新，需要重新返回资源，状态码为200，否则则返回304，代表资源无更新，可继续使用缓存文件。 </li>
</ol>
</li>
<li><p>Etag/If-None-Match：</p>
<ol>
<li>Etag是服务器响应请求时，返回当前资源文件的唯一标识并由服务器端产生。</li>
<li>If-None-Match是客户端再次发起请求时，携带上次请求返回的唯一标识Etag值，通过此字段告知服务器该资源上次请求返回的唯一标识值，服务器收到后与该资源在服务器的Etag进行对比，若一致则说明资源无更新，返回304状态码，若不一致说明资源更新，返回更新的资源以及200状态码。</li>
</ol>
</li>
</ol>
<h2 id="15-跨域"><a href="#15-跨域" class="headerlink" title="15. 跨域"></a>15. 跨域</h2><p> 同源策略：端口、域名、协议相同。目的是为了保证用户信息的安全，防止恶意网站窃取数据。 </p>
<h3 id="限制范围："><a href="#限制范围：" class="headerlink" title="限制范围："></a>限制范围：</h3><p> Cookies、LocalStorage、IndexDB无法读取；DOM无法获取；AJAX请求不能发送。 </p>
<h3 id="CORS跨域资源请求"><a href="#CORS跨域资源请求" class="headerlink" title="CORS跨域资源请求"></a>CORS跨域资源请求</h3><p> 浏览器在请求一个跨域资源时，如果是ajax请求会在请求头部添加一个origin字段，但它目前还不知道目标服务器端是否允许跨域请求，浏览器向服务器端发送ajax请求，如果服务器端返回的头中有Access-Control-Allow-Origin字段，并且值为允许访问的网站或者*字符的话，就允许跨域请求，否则会把请求内容忽略掉，并且在控制台报错。 </p>
<h3 id="CORS限制"><a href="#CORS限制" class="headerlink" title="CORS限制"></a>CORS限制</h3><p> 允许的请求方法：GET \ POST \ HEAD </p>
<p> 允许的content-type：text/plain, multipart/form-data, application/x-www-form-urlencoded。其他请求方式和其他content-type需要通过域请求验证后然后才能发送 </p>
<h3 id="CORS预请求"><a href="#CORS预请求" class="headerlink" title="CORS预请求"></a>CORS预请求</h3><p> 跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站有权访问哪些资源。服务器在HTTP头部加入允许请求的方法和content-type后，其他指定的方法和content-type就可以成功请求了。 </p>
<p> ‘Access-control-allow-headers’: ‘允许Content-type’ </p>
<p> ’Access-Control-Allow-Methods‘：’允许的请求方法‘ </p>
<p> ’Access-Control-Max-Age‘：’预请求允许其他方法和类型传输的时间‘ </p>
<h3 id="JSONP跨域"><a href="#JSONP跨域" class="headerlink" title="JSONP跨域"></a>JSONP跨域</h3><p> 浏览器上虽然有同源限制，但是像script标签，link标签，img标签，iframe标签这种在标签上通过src地址来加载一些内容的时候浏览器是允许进行跨域请求的。 </p>
<p> 所以JSONP的原理就是： </p>
<ul>
<li>创建一个script标签，这个script标签的src就是请求的地址 </li>
<li>这个script标签插入到DOM中，浏览器就根据src地址访问服务器资源 </li>
<li>​    返回的资源是一个文本，但是因为是在script标签中，浏览器会执行它。   </li>
<li>​    而这个文本恰好是函数调用的形式，也就是函数名（数据），浏览器会把它当做JS代码来执行调用这个函数。   </li>
<li>​    只要提前约定好这个函数名，并且这个函数存在于window对象中，就可以把数据传递给处理函数。</li>
</ul>
<h1 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h1><p>希望自己能找到一个好实习，也希望某一点对小伙伴们有所帮助  </p>
<p><a href="https://www.nowcoder.com/discuss/412972?source_id=profile_create&channel=666" target="_blank" rel="noopener">借鉴文章 - 牛客网</a>   </p>
]]></content>
      <tags>
        <tag>面试小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>终于等到你！不蒜子-统计工具和萌萌哒-2D模型~</title>
    <url>/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>✨这里是林大大的小屋子~<br>小屋子也要统计访问量和访问的人数噢~<br>当然！还必不可缺少一位可爱的姑娘<br>来营造小屋中的浪漫气息噢✨</p>
<a id="more"></a>

<blockquote>
<p>先赞后看噢~<br>你们的每一个小小的赞都会给我添加无限的动力✨</p>
</blockquote>
<hr>
<h1 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h1><p>首先，咱们要统计小屋子的访问量和访问人数<br>那么就需要采用工具啦…<br>在此期间，本大大搜索了好多统计的工具<br>最后我还是选用了<strong>不蒜子统计</strong><br>这是为啥嘞~ 让我简单的说明一下吧</p>
<h2 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h2><blockquote>
<p>优点 </p>
<blockquote>
<p>稳定性、控制台展示多模块化数据、搜索来源、更多功能等等   </p>
</blockquote>
<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/1.png" class>
<p>缺点 </p>
<blockquote>
<p>实时更新速度慢<br>最新的百度统计的接口需要token值，获取这个token值有一定的要求</p>
<blockquote>
<p>如（1. 是企业账号直接获取 2.需访问量在500以上，访问IP也有一定要求）<br>总之对小型网站不太友好就是啦~   </p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="谷歌统计"><a href="#谷歌统计" class="headerlink" title="谷歌统计"></a>谷歌统计</h2><blockquote>
<p>优点</p>
<blockquote>
<p>不用说啦！更稳定、功能点更多、可视化等等</p>
</blockquote>
<p>缺点</p>
<blockquote>
<p>人家是国外的，咱们得翻墙！<br>有时候因网络，国内会各种延迟</p>
</blockquote>
</blockquote>
<h2 id="CNZZ"><a href="#CNZZ" class="headerlink" title="CNZZ"></a>CNZZ</h2><blockquote>
<p>优点</p>
<blockquote>
<p>统计功能、搜索来源、数据分析等等</p>
</blockquote>
<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/2.png" class>
<blockquote>
<p>安装容易！并且对小型站点友好噢</p>
</blockquote>
<p>缺点</p>
<blockquote>
<p>样式不好看 <strong>因引入方式特殊的原因</strong> 很难修改固定样式</p>
</blockquote>
<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/3.png" class>
<blockquote>
<p>并且数据格式固定，不能自定义改动<br>数据更新很慢（一般需要10~15分钟更新一次）</p>
</blockquote>
</blockquote>
<p>✨接下来就轮到我们今天的主角啦</p>
<h2 id="不蒜子"><a href="#不蒜子" class="headerlink" title="不蒜子"></a>不蒜子</h2><blockquote>
<p>优点</p>
<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/4.png" class>
<blockquote>
<p>简单方便、可以自定义化各种格式、实时更新数据<br>简单2步就可以安装好这个工具啦！</p>
</blockquote>
<p>缺点</p>
<blockquote>
<p>只有统计访问量、访问人数、阅读量等数据<br>不能可视化、搜索来源等各种智能功能</p>
</blockquote>
</blockquote>
<p><strong>话不多说让我们来安装不蒜子吧</strong></p>
<blockquote>
<p>1.在首页插入脚本</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.在需要的地方引入数据</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>这引入就是原生html标签啦~可以自由最大化地自定义样式！</strong></p>
<p>✨具体官方文章请查看<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子博客</a></p>
<hr>
<h1 id="萌萌哒"><a href="#萌萌哒" class="headerlink" title="萌萌哒"></a>萌萌哒</h1><p>小屋子里有个可爱的小姐姐是一种什么样的感受呢~<br>以前我应该晓不得…<br>现在！！我的感受是！！有点小爽…✨</p>
<p>给你们瞧瞧！</p>
<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/5.png" class>
<p><strong>也想在小屋子里偷偷藏一个小姐姐嘛~<br>来跟我简单走4步</strong></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>1.安装插件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.插入配置<br><strong>以hexo博客为例</strong></p>
<blockquote>
<p>在根目录的_config.yml配置文件中添加</p>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 萌萌哒</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw&#x2F;</span><br><span class="line">  pluginJsPath: lib&#x2F;</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  tagMode: false</span><br><span class="line">  log: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku</span><br><span class="line">  display:</span><br><span class="line">    position: left</span><br><span class="line">    width: 180</span><br><span class="line">    height: 360</span><br><span class="line">    top: -40px</span><br><span class="line">    right: 25px</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.安装模型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.创建配置文件</p>
<blockquote>
<p>1.在根目录下创建文件夹：live2d_models<br>2.在node_modules中搜索：hexo-helper-live2d插件<br>3.在里边查找到刚安装的模型：live2d-widget-model-shizuku<br>4.将live2d-widget-model-shizuku模型文件copy到 live2d_models文件夹下</p>
</blockquote>
</blockquote>
<p>不要忘记重启下博客服务噢<br><strong>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</strong><br>这样！！你也有一位可爱小姐姐啦~</p>
<hr>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>俗话说得好…<br>一根萝卜、一颗白菜各有所爱~<br>正巧你爱的是另一个它该怎么办…<br><strong>好办！！！</strong></p>
<p>以下是本大大辛辛苦苦找的噢</p>
<blockquote>
<p>1.选择模型</p>
</blockquote>
<ol>
<li>epsilon2_1<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/6.gif" class width="150" height="150"></li>
<li>Gantzert_Felixander<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/7.gif" class width="150" height="150"></li>
<li>haru<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/8.gif" class width="150" height="150"></li>
<li>miku<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/9.gif" class width="150" height="150"></li>
<li>ni-j<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/10.gif" class width="150" height="150"></li>
<li>nico<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/11.gif" class width="150" height="150"></li>
<li>nietzche<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/12.gif" class width="150" height="150"></li>
<li>nipsilon<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/13.gif" class width="150" height="150"></li>
<li>nito<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/14.gif" class width="150" height="150"></li>
<li>shizuku<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/15.gif" class width="150" height="150"></li>
<li>tsumiki<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/16.gif" class width="150" height="150"></li>
<li>wanko<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/17.gif" class width="150" height="150"></li>
<li>z16<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/18.gif" class width="150" height="150"></li>
<li>hibiki<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/19.gif" class width="150" height="150"></li>
<li>koharu<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/20.gif" class width="150" height="150"></li>
<li>haruto<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/21.gif" class width="150" height="150"></li>
<li>Unitychan<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/22.gif" class width="150" height="150"></li>
<li>tororo<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/23.gif" class width="150" height="150"></li>
<li>hijiki<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/24.gif" class width="150" height="150">

</li>
</ol>
<blockquote>
<p>2.安装新的模型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save live2d-widget-model-[选择的模型名]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.创建配置文件</p>
<blockquote>
<p>1.将新安装的模型文件：live2d-widget-model-[选择的模型名]模型文件<br>  copy到 live2d_models文件夹下<br>2.更改根目录的_config.yml配置文件中<br>  model: use: live2d-widget-model-[选择的模型名]</p>
</blockquote>
<img src="/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/26.png" class>
<blockquote>
<p>3.重启hexo服务</p>
</blockquote>
</blockquote>
<p><strong>这样我们的萌萌哒就大功告成了噢!</strong></p>
<hr>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p><strong>很开心能与你们分享博客文章哦~</strong><br><a href="https://lin_daren.gitee.io/lindada-blog/2020/06/19/%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%EF%BC%81%E4%B8%8D%E8%92%9C%E5%AD%90-%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%92%8C%E8%90%8C%E8%90%8C%E5%93%92-2D%E6%A8%A1%E5%9E%8B/?_blank">博客原文章✨</a></p>
<hr>
<p><em>若有什么无意之举冒犯了您，麻烦联系我噢~</em><br>要是这篇文章对您有那么一丢丢的帮助<br><a href="https://gitee.com/lin_daren/lindada-blog?_blank" target="_blank" rel="noopener">博客项目✨</a>（点一下哦~）<br>花10秒钟进上边链接帮我的博客点个🌟 吧!<br>(悄悄说~ 点了🌟 的你会更加幸运de ！)  </p>
<p><strong>小屋随时欢迎你们到来噢~</strong><br><strong>也欢迎各位小确幸们的批评和指正~</strong></p>
]]></content>
      <tags>
        <tag>日常小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次vue项目sass-loader的/deep/穿透失败</title>
    <url>/lindada-blog/2020/08/20/%E8%AE%B0%E4%B8%80%E6%AC%A1vue%E9%A1%B9%E7%9B%AEsass-loader%E7%9A%84-deep-%E7%A9%BF%E9%80%8F%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刚刚解决了一个困扰了我一个晚上的bug❌！！<br>起因的这样子的<br>重新要开始一个vue项目，从gitee上拉取<br>之前运行时，一直正正常常~<br>重新 npm install后便一直报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Module build failed (from .&#x2F;node_modules&#x2F;_sass-loader@7.3.1@sass-loader&#x2F;dist&#x2F;cjs.js)</span><br><span class="line"></span><br><span class="line">    &#x2F;deep&#x2F; .el-select, .el-input, .el-cascader &#123;</span><br><span class="line"> ^</span><br><span class="line">      Expected selector.</span><br><span class="line">    ╷</span><br><span class="line">486 │   &#x2F;deep&#x2F; .el-select, .el-input, .el-cascader&#123;</span><br><span class="line">    │   ^</span><br><span class="line">    ╵</span><br></pre></td></tr></table></figure>
<p><strong>所有的/deep/穿透全部报错了！</strong></p>
<a id="more"></a>

<h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><h2 id="重装"><a href="#重装" class="headerlink" title="重装"></a>重装</h2><h3 id="1-重新安装node-sass和sass-loader"><a href="#1-重新安装node-sass和sass-loader" class="headerlink" title="1.重新安装node-sass和sass-loader"></a>1.重新安装node-sass和sass-loader</h3><blockquote>
<p>npm install node-sass sass-loader -S-D</p>
</blockquote>
<p><strong>不行，仍是报错</strong></p>
<h3 id="2-cpm重新安装"><a href="#2-cpm重新安装" class="headerlink" title="2.cpm重新安装"></a>2.cpm重新安装</h3><p>防止npm某些依赖包因网速而下载失败</p>
<blockquote>
<p>cnpm install node-sass<br>cnpm install sass-loader -D</p>
</blockquote>
<p><strong>一样挂了</strong><br>安装时，有两个明显的错误</p>
<img src="/lindada-blog/2020/08/20/%E8%AE%B0%E4%B8%80%E6%AC%A1vue%E9%A1%B9%E7%9B%AEsass-loader%E7%9A%84-deep-%E7%A9%BF%E9%80%8F%E5%A4%B1%E8%B4%A5/1.png" class>  

<h3 id="3-改变下载淘宝源"><a href="#3-改变下载淘宝源" class="headerlink" title="3.改变下载淘宝源"></a>3.改变下载淘宝源</h3><p>防止淘宝源资源老旧被丢弃</p>
<blockquote>
<p>npm config set sass_binary_site=<a href="https://npm.taobao.org/mirrors/node-sass" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node-sass</a></p>
</blockquote>
<p><strong>一样是bug！！接近崩溃</strong></p>
<h2 id="更改样式"><a href="#更改样式" class="headerlink" title="更改样式"></a>更改样式</h2><p>将 /deep/ 更改为::v-deep<br>可以看看思否回答：<a href="https://segmentfault.com/q/1010000020658004" target="_blank" rel="noopener">https://segmentfault.com/q/1010000020658004</a></p>
<p>但该项目是我和师兄一起维护，不能单方面全局改动样式</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在sass-loader的官方文档中提到高版本不支持 /deep/ 穿透<br><strong>所以估计得降低版本</strong></p>
<h2 id="降低版本1"><a href="#降低版本1" class="headerlink" title="降低版本1"></a>降低版本1</h2><blockquote>
<p>npm uninstall sass-loader（卸载当前版本）<br>npm install <a href="mailto:sass-loader@7.3.1">sass-loader@7.3.1</a> –save-dev</p>
</blockquote>
<p>*<em>还是一样报错，不支持 /deep/ *</em></p>
<h2 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h2><p>重新安装了node-sass并且将sass-loader降低至6.0版本</p>
<blockquote>
<p>npm install –save-dev node-sass <a href="mailto:sass-loader@6.0.7">sass-loader@6.0.7</a></p>
</blockquote>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>经常遇到突然重新npm install后<br>某些模块包不支持当前的语法了<br>这次记录提供一个bug解决思路<br>也要时刻关注更新换代即将被遗弃的语法了<br>希望~小伙伴们越来越少bug<br>遇到bug也简简单单解决！  </p>
]]></content>
      <tags>
        <tag>bug小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>林大人的面试小屋-Web安全/操作系统/性能优化</title>
    <url>/lindada-blog/2020/12/29/%E6%9E%97%E5%A4%A7%E4%BA%BA%E7%9A%84%E9%9D%A2%E8%AF%95%E5%B0%8F%E5%B1%8B-Web%E5%AE%89%E5%85%A8-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/12/29/%E6%9E%97%E5%A4%A7%E4%BA%BA%E7%9A%84%E9%9D%A2%E8%AF%95%E5%B0%8F%E5%B1%8B-Web%E5%AE%89%E5%85%A8-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/1.png" class>  
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>总结Web安全/操作系统/性能优化！<br>整理给有需要的小伙伴们 ✨</p>
<a id="more"></a>

<h1 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h1><h2 id="Web安全-1"><a href="#Web安全-1" class="headerlink" title="Web安全"></a>Web安全</h2><blockquote>
<p>私密性：不被非法获取，盗用。<br>可靠性：内容不会被修改、丢失或额外注入。 </p>
</blockquote>
<h2 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h2><h3 id="1-CSRF跨域请求伪造"><a href="#1-CSRF跨域请求伪造" class="headerlink" title="1.CSRF跨域请求伪造"></a>1.CSRF跨域请求伪造</h3><h4 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h4><blockquote>
<p>CSRF指的是跨站请求伪造，攻击者利用相关网站对用户身份的信任来窃取用户信息甚至涉及用户安全。</p>
</blockquote>
<blockquote>
<p>例如用户登录网站A，由于已通过网站A的用户身份验证，因此在没退出的情况下可访问，当用户无意通过恶意网站再次访问网站A时，恶意网站会欺骗网站A，让其误以为是用户本意登录，实质上是恶意网站的一种欺骗行为。 </p>
</blockquote>
<h4 id="CSRF防范"><a href="#CSRF防范" class="headerlink" title="CSRF防范"></a>CSRF防范</h4><ul>
<li>验证refener信息，查看登录来源，但这种方式容易被篡改。 </li>
<li>采用token验证身份信息。服务器端会向<a href>客户端</a>返回一个随机数，作为身份令牌，当再次访问时<a href>客户端</a>将这个随机数存请求参数中，服务器端会检验这个身份令牌是否符合，但这种方式的缺点是我们需要为每个服务端都储存一个token，这样会比较繁琐，同时一般不会只对应一个服务器当我们进行负载平衡时，请求会被转移到其他服务器上，这样就要重新生成token。 </li>
<li>双重cookies方式，服务器端会将cookies返回给<a href>客户端</a>，当<a href>客户端</a>再次发起请求时，会将cookies的信息存放在url参数中，服务器会将cookies中的数据和url中的参数进行对比，来判断是否请求来自于恶意网站，这是利用了攻击者只能访问cookies而不能获取cookies的特点。 </li>
<li>可以对cookies设置Samesite属性，限制cookies不能被第三方所获取。<ol>
<li>Samesite Cookies表示同站Cookies，表示cookies不能被第三方所获取。 <ol>
<li>将Samesite设置为strict时，表示严格模式下，cookis不能被任何第三方所利用。 </li>
<li>将Samesite设置为lax时，表示款式模式下，当请求为get请求时，并且这个请求改变了当前页面或者打开了新的页面，则cookies可以被第三方获取。 </li>
</ol>
</li>
<li>这种方式的缺点是它不支持子域，当从主域跳转到子域时，用户需要重新登录，且兼容性不够好。</li>
</ol>
</li>
</ul>
<h3 id="2-XSS跨站脚本攻击"><a href="#2-XSS跨站脚本攻击" class="headerlink" title="2.XSS跨站脚本攻击"></a>2.XSS跨站脚本攻击</h3><blockquote>
<p>XSS指的是<strong>跨站脚本攻击</strong>，恶意攻击者会通过某种方式对页面中注入额外JS代码，对页面进行修改或是窃取cookies，影响用户体验以及造成用户信息的不安全。</p>
</blockquote>
<h4 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h4><ol>
<li>一种是反射型，攻击者可将恶意代码加载url地址中，当用户操作页面向服务器提交url时，服务器会提取url中的参数包括了恶意代码，并传递给客户端执行时会就执行那些恶意代码，这是反射型。</li>
<li>一种是储存型，攻击者将恶意代码存放在数据库中，当用户将从数据库中获取数据时会获取到那些恶意代码，然后传到浏览器端执行。 </li>
</ol>
<h4 id="XSS防范"><a href="#XSS防范" class="headerlink" title="XSS防范"></a>XSS防范</h4><p>XSS防御可分为在<strong>浏览器端向服务器端请求阶段的防御</strong>和<strong>浏览器端执行代码</strong>时的防御。</p>
<ul>
<li>浏览器端提交代码时：可对代码进行转义处理，但不同的代码提交位置不同因此将所有js代码进行转义处理不是好的方法。 </li>
<li>浏览器端执行代码时：可为http头部设置httponly属性，意味着cookies不能通过js脚本获取，这样保证了cookies的安全性。</li>
<li>还可以使用验证码，防止攻击者伪装成用户进行操作。</li>
<li>还可以使用CSP，为浏览器建立一个白名单，通过白名单告知浏览器哪些资源可以得到访问，防止恶意代码的访问和攻击。 CSP为内容安全策略，两种方式进行设置<ol>
<li>第一种为http头部设置“Content-Security-Policy”</li>
<li>另一种为meta标签内设置http-equiv=”Content-Security-Policy”。 </li>
</ol>
</li>
</ul>
<h3 id="3-SQL注入"><a href="#3-SQL注入" class="headerlink" title="3.SQL注入"></a>3.SQL注入</h3><blockquote>
<p>SQL是一种结构化查询语言，是一种特殊目的的编程语言，是一种数据库查询和结构设计语言，用于存储数据以及查询、添加、修改和删除数据的操作关系型数据库的语言。</p>
</blockquote>
<h4 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h4><blockquote>
<p>SQL注入是攻击者通过用户在进行http请求的过程中注入恶意的SQL代码，当服务器在使用参数构建数据库<br>SQL命令时，恶意的SQL代码也会被一起构建，并在数据库中执行产生意料之外的结果的攻击行为。 </p>
</blockquote>
<h4 id="SQL注入防御"><a href="#SQL注入防御" class="headerlink" title="SQL注入防御"></a>SQL注入防御</h4><blockquote>
<p>永远不要使用动态的方式拼接sql，并不轻易信任用户的输入，不把机密信息直接存放。 </p>
</blockquote>
<h3 id="4-点击劫持"><a href="#4-点击劫持" class="headerlink" title="4.点击劫持"></a>4.点击劫持</h3><h4 id="点击劫持攻击"><a href="#点击劫持攻击" class="headerlink" title="点击劫持攻击"></a>点击劫持攻击</h4><blockquote>
<p>是一种视觉欺骗的手段，指的是攻击者将恶意网站通过iframe放置于页面当中，并且将其外观设置为透明，在底部创建一个按钮之类的引诱用户去点击，随后跳转到恶意网站。 </p>
</blockquote>
<h4 id="点击劫持防范"><a href="#点击劫持防范" class="headerlink" title="点击劫持防范"></a>点击劫持防范</h4><ol>
<li>使用X-FRAME-OPTIONS机制<ol>
<li>DENY表示任何网页都不能使用iframe载入网页</li>
<li>SOMEORIGIN表示符合同源策略的网站可以使用iframe载入网页，如果浏览器使用了这个机制，当用户访问网站时会提示当前网页存在安全隐患，应打开新网页去浏览。</li>
<li>ALLOW-FROM，表示页面可以在指定来源的iframe中展示</li>
</ol>
</li>
<li>通过JS防御</li>
</ol>
<h3 id="5-中间人攻击"><a href="#5-中间人攻击" class="headerlink" title="5.中间人攻击"></a>5.中间人攻击</h3><h4 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h4><blockquote>
<p>是攻击人同时与客户端和浏览器端建立联系，并且让对方认为连接是安全可靠的，但实际上整个连接都被攻击者控制，攻击者可以任意获取连接中的信息并改写信息。通常来说不建议使用公共WiFi，因为很可能就会发生中间人攻击的情况，如果在通信的过程中涉及到了某些私密信息就很有可能会被窃取。</p>
</blockquote>
<h4 id="中间人攻击防范"><a href="#中间人攻击防范" class="headerlink" title="中间人攻击防范"></a>中间人攻击防范</h4><blockquote>
<p>可以通过使用https协议。</p>
</blockquote>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h3><p>进程是资源分配的基本单位，用来管理资源（例如：内存、文件、网络等资源） </p>
<h3 id="进程控制块（PCB）"><a href="#进程控制块（PCB）" class="headerlink" title="进程控制块（PCB）"></a>进程控制块（PCB）</h3><p>描述进程的基本信息和运行状态，所谓的创建进程和撤销进程都是对进程控制块的操作。PCB是描述进程的数据结构。 </p>
<h3 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h3><blockquote>
<p>线程是独立调度的基本单位。一个进程中可以有多个线程，它们共享进程资源。 </p>
</blockquote>
<blockquote>
<p>例如QQ和浏览器是两个进程，浏览器进程中里面有很多线程，例如http请求线程，事件响应线程，渲染线程等等。</p>
</blockquote>
<blockquote>
<p>线程的并发执行使得在浏览器中点击一个新链接从而发起http请求时浏览器还可以响应用户的其他事件。 </p>
</blockquote>
<h3 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h3><ul>
<li>拥有资源：进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。 </li>
<li>调度：线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程内的线程切换到另一个进程中的线程时，会引起进程切换。 </li>
<li>系统开销：由于创建和撤销进程时，系统都要为之分配或回收资源，如内存空间等，所付出的开销远大于创建或撤销线程时的开销，因此线程切换时开销较小。 </li>
<li>通信方面：进程间通信需要进程同步和互斥手段的辅助，以保证数据的一致性，而线程间可以通过直接读写同一进程中的数据段来进行通信。 </li>
</ul>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><ul>
<li><p>死锁概念和产生原因： </p>
<ol>
<li>死锁是指多个进程循环等待对方所占有的资源而出现的僵持等待的局面。 </li>
<li>产生原因是系统提供的资源太少远不能满足并发进程对资源的需求；以及进程推进顺序不合理，互相占有彼此所需要的资源，同时又请求对方所占有的资源，形成死锁。 </li>
</ol>
</li>
<li><p>死锁产生的必要条件 </p>
<ol>
<li>互斥条件：某个资源在某一时刻只能被一个进程所占有执行，而不能同时被两个或两个以上的进程占有。 </li>
<li>不可抢占条件：进程所获得的资源在使用完成之前，其他资源申请的进程不能强行从资源占有者手中夺取资源，而只能由占有进程自行释放才可。 </li>
<li>占有且等待条件：进程至少已经占有了一个资源，但又申请了一个新的被其他进程所占有的资源，此时处于等待状态。 </li>
<li>循环等待条件：若干个进程形成环形链，每个都占有对方所申请的下一个资源。 </li>
</ol>
</li>
<li><p>死锁的处理策略 </p>
<ol>
<li>为了不让系统方法死锁现在，必须破坏产生死锁的四个条件之一，或是可以检测并有能力实现恢复。</li>
</ol>
</li>
</ul>
<h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h3 id="1-CDN的缓存与回源机制解析"><a href="#1-CDN的缓存与回源机制解析" class="headerlink" title="1. CDN的缓存与回源机制解析"></a>1. CDN的缓存与回源机制解析</h3><blockquote>
<p>CDN指的是将源网站的资源缓存到分别在不同地理位置的服务器上，这些服务器存储着数据的副本，因此服务器可以根据哪些服务器与用户距离最近来满足数据的获取。CDN提供快速服务，较少受高流量影响。 </p>
</blockquote>
<blockquote>
<p>CDN往往被用来存放静态资源。静态资源本身具有访问频率高，承接流量大的特点，因此静态资源加载速度始终是前端性能的一个非常关键的指标。<br>首先CDN服务器域名和业务服务器域名不一致。因为同一域名下的所有请求都会携带Cookies，但若我们只想请求一张图片或一个CSS文件，此时每次携带cookies开销会非常大，并且cookies中储存的信息目前并不需要，因此把静态资源和主页面置于不同的域名下，完美地避免了不必要的cookies的出现。 </p>
</blockquote>
<h3 id="2-前端需要注意哪些SEO"><a href="#2-前端需要注意哪些SEO" class="headerlink" title="2. 前端需要注意哪些SEO"></a>2. 前端需要注意哪些SEO</h3><ul>
<li>合理的title，description，keywords：搜索对着三项的权重逐渐减小，title值强调重点即可，重要关键词出现不要超过两次，而且要靠前。description把页面的内容高度概括，长度合适，不可过分堆砌关键词，不同页面的description有所不同。keywords列举出重要关键词即可。 </li>
<li>语义化的html代码，让搜索引擎容易理解网页。 </li>
<li>重要内容html代码放在最前面，因为搜索引擎抓取html顺序是从上至下的，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取。 </li>
<li>重要内容不要用js输出，因为爬虫不会执行js获取内容。 </li>
<li>少用iframe，搜索引擎不会抓取iframe中的内容 </li>
<li>非装饰性图片必须加alt。 </li>
<li>提高网站速度：网站速度是搜索引擎<a href>排序</a>的一个重要指标。 </li>
</ul>
<h3 id="3-webpack中的优化"><a href="#3-webpack中的优化" class="headerlink" title="3. webpack中的优化"></a>3. webpack中的优化</h3><h4 id="有哪些方式可以减少webpack的打包时间？"><a href="#有哪些方式可以减少webpack的打包时间？" class="headerlink" title="有哪些方式可以减少webpack的打包时间？"></a>有哪些方式可以减少webpack的打包时间？</h4><p><strong>1. 优化Loader</strong></p>
<blockquote>
<p>对于Loader来说，影响打包效率首当齐冲必属Babel了。因为babel会将代码转为字符串生成AST，然后对AST继续进行转变最后生成新的代码，项目越大，转化代码越多，效率就越低。当然了，我们是有办法优化的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">	<span class="built_in">module</span>:[</span><br><span class="line">		rules:[</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//js文件才使用babel</span></span><br><span class="line">				test:<span class="string">'\.js$'</span>,</span><br><span class="line">				loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">				<span class="comment">//只在src文件夹下查找</span></span><br><span class="line">				include:[resolve(<span class="string">'src'</span>)],</span><br><span class="line">				<span class="comment">//不会去查找路径</span></span><br><span class="line">				exclude：/node_modules/</span><br><span class="line">			&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于Babel来说，我们肯定是希望只作用在JS代码上的，然后node_modules中使用的代码都是编译过的，所以我们也完全没有必要再去处理一遍…<br>当然这样做还不够，我们还可以将Babel编译过的文件缓存起来，下次只需要编译更改过的代码文件即可，这样我们可以大幅度加快打包时间。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">loader:<span class="string">'babel-loader?cacheDirectory=true'</span></span><br></pre></td></tr></table></figure>

<p><strong>2. HappyPack</strong></p>
<blockquote>
<p>受限于Node是单线程运行的，所以Webpack在打包的过程中也是单线程的，特别是在执行Loader的时候，长时间编译的任务很多，这样就会导致等待的情况。</p>
</blockquote>
<blockquote>
<p>HappyPack可以将Loader的同步执行转换为并行的，这样就能充分利用系统资源来加快打包效率了。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">	loaders:[</span><br><span class="line">		&#123;</span><br><span class="line">			test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">			include:[resolve(<span class="string">'src'</span>)],</span><br><span class="line">			exclude:<span class="regexp">/node_modules/</span>,</span><br><span class="line">			<span class="comment">//id后面的内容下面</span></span><br><span class="line">			loader:<span class="string">'happypack/loader?id=happybabel'</span></span><br><span class="line">		&#125;	</span><br><span class="line">	]</span><br><span class="line">&#125;,</span><br><span class="line">plugins:[</span><br><span class="line">	<span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">		id:<span class="string">'Happybabel'</span>,</span><br><span class="line">		loaders:[<span class="string">'babel-loader?cacheDirectory'</span>],</span><br><span class="line">		<span class="comment">//开启4个线程</span></span><br><span class="line">		threads：<span class="number">4</span>	</span><br><span class="line">	&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>3. DllPlugin</strong></p>
<blockquote>
<p>DllPlugin可以将特定的类库提前打包然后引入。这种方式可以极大的减少打包类库的次数，只有当类库更新版本才有需要重新打包，并且也实现了将公共代码抽离成单独文件的优化方案。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单独配置在一个文件中</span></span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack=<span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="built_in">module</span>.export=&#123;</span><br><span class="line">	entry:&#123;</span><br><span class="line">		<span class="comment">//统一打包类库</span></span><br><span class="line">		vendor:[<span class="string">'react'</span>];	</span><br><span class="line">	&#125;,</span><br><span class="line">	output:&#123;</span><br><span class="line">		path:path.join(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">		filename:<span class="string">'[name].dll.js'</span>,</span><br><span class="line">		library:<span class="string">'[name]-[hash]'</span>	</span><br><span class="line">	&#125;,</span><br><span class="line">	plugins:[</span><br><span class="line">		<span class="keyword">new</span> webpack.Dllplugin(&#123;</span><br><span class="line">			name:<span class="string">'[name]-[hash]'</span>,</span><br><span class="line">			context:__dirname,</span><br><span class="line">			path:path.join(__dirname,<span class="string">'dist'</span>,<span class="string">'[name]-manifest.json'</span>)	</span><br><span class="line">		&#125;)	</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后我们需要指向这个配置文件生成依赖文件，接下来我们需要使用DllReferencePlugin将依赖文件引入项目中</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.conf.js</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">	plugins:[</span><br><span class="line">		<span class="keyword">new</span> webpack.DllRefercePlugin(&#123;</span><br><span class="line">			context:__dirname,</span><br><span class="line">			manifest:<span class="built_in">require</span>(<span class="string">'./dist/vendor-manifest.json'</span>),</span><br><span class="line">		&#125;)</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. 代码压缩</strong></p>
<blockquote>
<p>在webpack3中，我们一般使用UglifyJS来压缩代码，但是这个是单线程运行的，为了加快效率，我们可以使用webpack-parallel-uglify-plugin来运行UglifyJS，从而提交效率。</p>
</blockquote>
<blockquote>
<p>在webpack4中，我们就不需要以上操作了，只需要将mode设置为production就可以默认开启以上功能。代码压缩也是我们必做的性能优化方案，当然我们不知可以压缩JS代码，还可以压缩HTML、CSS代码，并且在压缩JS代码的过程中，我们还可以通过配置实现比如删除console.log这类代码的功能。</p>
</blockquote>
<p><strong>5. 一些小的优化点</strong></p>
<ul>
<li>reslove.extensions:用来表明文件后缀名列表，默认查找顺序是[’.js’,’.json’],如果你的导入文件没有添加后缀就会按照这个顺序查找文件。我们应该尽可能减少后缀列表长度，然后将出现频率高的后缀排在前面。</li>
<li>resolve.alias:可以通过别名的方式来映射一个路径，能让webpack更快找到路径</li>
<li>module.noParse:如果你确定一个文件下没有其他依赖，就可以使用该属性让webpack不扫描该文件，这种方式对于大型类库很有帮助</li>
</ul>
<h4 id="有哪些方式可以让webpack打出来的包更小？"><a href="#有哪些方式可以让webpack打出来的包更小？" class="headerlink" title="有哪些方式可以让webpack打出来的包更小？"></a>有哪些方式可以让webpack打出来的包更小？</h4><p><strong>1. 按需加载</strong></p>
<blockquote>
<p>相比大家在开发SPA项目的时候，项目中都会在十几甚至更多的路由页面。如果我们将这些页面全部打包进入一个JS文件的话，虽然将多个请求合并了，但是同样也加载了很多并不需要的代码，耗费了更长的时间。<br>那么为了首页能更快地呈现给用户，我们肯定希望首页能加载文件体积越小越好，这时候我们就可以使用按序加载，将每个路由页面单独为一个文件，当然不仅仅路由可以按需加载，对于loadash这种大型类库同样可以使用这个功能。按需加载的底层机制都是当使用的时候再去下载的对应文件，返回一个Promise，当Promise成功以后去执行回调。、</p>
</blockquote>
<p><strong>2. Scope Hoisting</strong></p>
<blockquote>
<p>Scope Hoisting会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。<br>比如我们希望打包两个文件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a=<span class="number">1</span></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./text.js'</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于这种情况，我们打包出来的代码会类似这样</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">	<span class="comment">/*0*/</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span>(<span class="params">module,exports,require</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//...	</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*1*/</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> (<span class="params">module,exports,require</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//...	</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>但是如果我们使用Scope Hoisting的话，代码就会尽可能的合并到一个函数中去，也就变成了这样的类似代码</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">	<span class="comment">/*0*/</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> (<span class="params">module,exports,require</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//...</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样的打包方式生成的代码明显比之前少很多，如果在webpack4中你希望开启这个功能，只需要启用optimization.concatenateModules就可以了。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">	optimaization:&#123;</span><br><span class="line">		concatenateModules:<span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure>

<p><strong>3. Tree Shaking</strong></p>
<blockquote>
<p>Tree Shaking可以实现删除项目中未被引用的代码，比如：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a=<span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b=<span class="number">2</span></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于以上情况，test文件中的变量b如果没有在项目中使用到的话，就不会被打包到文件中。如果你使用webpack4的话，开启生产环境就会自动启动这个优化功能。</p>
</blockquote>
<h3 id="4-编写高性能的JavaScript"><a href="#4-编写高性能的JavaScript" class="headerlink" title="4. 编写高性能的JavaScript"></a>4. 编写高性能的JavaScript</h3><h5 id="1-为什么要将js放在body尾部？"><a href="#1-为什么要将js放在body尾部？" class="headerlink" title="1.为什么要将js放在body尾部？"></a>1.为什么要将js放在body尾部？</h5><ol>
<li>JS引擎是独立于渲染引擎存在的。js代码在文档的何处插入，就在何处执行。当html解析器遇到一个script标签时，就会暂停渲染，将控制权交给js引擎，js引擎对内联的js代码会直接执行，对外部js文件还要先获取到脚本再进行执行。等js引擎运行完毕浏览器又会把控制权还给渲染引擎，继续CSSOM和DOM的构建。 </li>
<li>如果js放在header中，浏览器会阻塞并等待js加载完毕并执行。 </li>
<li>如果js在body尾部，浏览器会进行一次提前渲染，从而提前首屏出现时间。 </li>
</ol>
<h5 id="2-非核心代码的异步加载？"><a href="#2-非核心代码的异步加载？" class="headerlink" title="2. 非核心代码的异步加载？"></a>2. 非核心代码的异步加载？</h5><ol>
<li>动态脚本加载：使用js创建一个script标签然后插入到页面中 </li>
<li>defer属性：整个html解析完之后才执行，如果是多个就按照顺序执行 </li>
<li>async属性：加载完之后立即执行，如果是多个，执行和加载顺序无关。 </li>
</ol>
<h5 id="3-使用节流与防抖"><a href="#3-使用节流与防抖" class="headerlink" title="3. 使用节流与防抖"></a>3. 使用节流与防抖</h5><h5 id="4-懒加载"><a href="#4-懒加载" class="headerlink" title="4. 懒加载"></a>4. 懒加载</h5><h3 id="5-浏览器渲染"><a href="#5-浏览器渲染" class="headerlink" title="5. 浏览器渲染"></a>5. 浏览器渲染</h3><h4 id="1-浏览器的解析过程："><a href="#1-浏览器的解析过程：" class="headerlink" title="1.浏览器的解析过程："></a>1.浏览器的解析过程：</h4><ul>
<li>解析HTML构建DOM树，并行请求CSS/image/js </li>
<li>CSS文件下载完毕，开始构建CSSOM树 </li>
<li>CSSOM树构建完成后，和DOM一起生成渲染树 </li>
<li>布局（layout）：计算出每个节点在屏幕中的位置 </li>
<li>显示（painting）：页面渲染到屏幕上 </li>
</ul>
<h4 id="2-DOM树和渲染树的区别："><a href="#2-DOM树和渲染树的区别：" class="headerlink" title="2.DOM树和渲染树的区别："></a>2.DOM树和渲染树的区别：</h4><blockquote>
<p>DOM树与HTML标签是一一对应的，包括head和隐藏标签<br>渲染树不包括head和隐藏元素，每个节点都有对应的css属性 </p>
</blockquote>
<h4 id="3-css会阻塞DOM解析吗？"><a href="#3-css会阻塞DOM解析吗？" class="headerlink" title="3.css会阻塞DOM解析吗？"></a>3.css会阻塞DOM解析吗？</h4><blockquote>
<p>对于一个HTML文档来说，不管是内联还是外联的CSS，都会阻碍后序的DOM渲染，但不会阻塞后序的DOM解析。 </p>
</blockquote>
<blockquote>
<p>当css文件放在head标签中时，虽然css解析也会阻塞后序dom的渲染，但是在解析css的同时也在解析dom，所以等到css解析完毕就会逐步的渲染页面了。 </p>
</blockquote>
<h4 id="4-重绘和回流（重排）的区别和关系？"><a href="#4-重绘和回流（重排）的区别和关系？" class="headerlink" title="4.重绘和回流（重排）的区别和关系？"></a><strong>4.重绘和回流（重排）的区别和关系？</strong></h4><blockquote>
<p>重绘：当渲染树中的元素外观（颜色）发生改变时，不影响布局时产生重绘<br>回流：当渲染树中的元素的布局（尺寸，位置，隐藏\状态改变）发生改变时产生回流 </p>
</blockquote>
<p><strong>回流一定引起重绘，而重绘不一定引起回流</strong> </p>
<blockquote>
<p>什么时候回触发回流：DOM结构中的各元素都有自己的盒子，这些都需要浏览器根据各种样式来计算并根据结果将它们放置在页面的对应位置上 这个过程叫回流 </p>
</blockquote>
<ul>
<li>添加或删除可见的DOM元素 </li>
<li>元素位置改变 </li>
<li>元素的尺寸改变（包括内外边距、边框厚度、宽度、高度等属性的改变） </li>
<li>内容改变 </li>
<li>页面渲染器初始化 </li>
<li>浏览器窗口尺寸改变 </li>
</ul>
<p>注意：JS获取布局属性值（例如：offsetLeft、scrollTop、getComputedStyle等）也会引起回流，因为浏览器需要通过回流计算最新值 </p>
<h4 id="5-如何最小化重绘和回流？"><a href="#5-如何最小化重绘和回流？" class="headerlink" title="5.如何最小化重绘和回流？"></a>5.如何最小化重绘和回流？</h4><ol>
<li>需要对DOM元素进行复杂的操作时，可以先隐藏（display：none），操作完成后再显示 </li>
<li>需要创建多个DOM节点时，使用DocumentFragment创建完成之后将节点不断的添加到DocumentFragment中，然后一次性的加入到documenet，或者使用字符串拼接方式构建好对应html后再使用innerHTML来修改页面 </li>
<li>将布局属性赋值给变量，这样不用每次需要的时候都重新计算一次布局属性，例如将var left = elem.offsetLeft，这样多次使用left只会产生一次回流 </li>
<li>避免使用table布局，因为table元素一旦触发回流就会导致table里所有的其他元素回流 </li>
<li>避免使用css表达式，因为每次调用都会重新计算值，包括加载页面 </li>
<li>尽量使用css属性简写 用border代替border-width border-style border-color </li>
<li>批量修改样式 例如用elem.className代替elem.style.xxx </li>
</ol>
<h3 id="6-雅虎军规"><a href="#6-雅虎军规" class="headerlink" title="6. 雅虎军规"></a>6. 雅虎军规</h3><h4 id="网络部分："><a href="#网络部分：" class="headerlink" title="网络部分："></a>网络部分：</h4><ul>
<li>尽量减少HTTP请求数：合并文件、雪碧图、使用小图base64 </li>
<li>减少DNS查询：开启DNS预解析。html<a href>源码</a>在下载完成后，会解析页面的包含链接的标签，提前查询对应的域名。对于访问过的页面，浏览器会记录一份域名列表，当再次打开时，会在html下载的同时去解析DNS </li>
<li>使用CDN内容分发网络静态资源服务器 </li>
<li>避免重定向 </li>
<li>杜绝404状态码 </li>
</ul>
<h4 id="缓存："><a href="#缓存：" class="headerlink" title="缓存："></a>缓存：</h4><ul>
<li>配置ETag，是服务器和浏览器用来决定浏览器缓存中组件与源服务器中的组件是否匹配的一种机制。 </li>
<li>添上Expires和Cache-Control HTTP头部 </li>
<li>使用外链的方式引入JS和CSS </li>
</ul>
<h4 id="内容部分"><a href="#内容部分" class="headerlink" title="内容部分"></a>内容部分</h4><ul>
<li>按需加载组件 </li>
<li>预加载组件 </li>
<li>减少DOM元素的数量 </li>
<li>尽量少用iframe </li>
<li>压缩JavaScript和CSS（代码层面） </li>
</ul>
<h4 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h4><ul>
<li>避免使用CSS表达式 </li>
<li>尽量选择link标签 </li>
<li>避免使用滤镜 </li>
<li>把样式表放在顶部 </li>
</ul>
<h4 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h4><ul>
<li>把脚本放在底部 </li>
<li>去除重复脚本 </li>
<li>减少DOM访问 </li>
</ul>
<h4 id="图片部分"><a href="#图片部分" class="headerlink" title="图片部分"></a>图片部分</h4><ul>
<li>选用合适的图片格式 </li>
<li>雪碧图中间少留空白 </li>
<li>不要用HTML缩放图片，用小图的时候去加载小图。 </li>
<li>用小的可缓存的favicon.ico </li>
</ul>
<h4 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h4><ul>
<li>清除不必要的cookies，cookies尽可能的小，设置好合适的有效期。 </li>
<li>把静态资源放在不含cookie的域下，当浏览器发送对静态图像的请求时，cookie也会一起发送，而服务器根本不需要这些cookie。 </li>
</ul>
<h4 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h4><ul>
<li>保证所有组件都小于25k </li>
<li>把组件打包到一个复合文档里 </li>
</ul>
<h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><ul>
<li>开启Gzip压缩 </li>
<li>对Ajax用get请求 </li>
<li>尽早清空缓存区 </li>
<li>使用CDN（内容分发网络）</li>
</ul>
<h1 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h1><p>希望自己能找到一个好实习，也希望某一点对小伙伴们有所帮助  </p>
<p><a href="https://www.nowcoder.com/discuss/412972?source_id=profile_create&channel=666" target="_blank" rel="noopener">借鉴文章 - 牛客网</a>   </p>
]]></content>
      <tags>
        <tag>面试小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>记录常见的Http状态码</title>
    <url>/lindada-blog/2020/07/30/%E8%AE%B0%E5%BD%95%E5%B8%B8%E8%A7%81%E7%9A%84Http%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<p>记录常见的http状态码的小知识点</p>
<img src="/lindada-blog/2020/07/30/%E8%AE%B0%E5%BD%95%E5%B8%B8%E8%A7%81%E7%9A%84Http%E7%8A%B6%E6%80%81%E7%A0%81/1.png" class>  

<blockquote>
<p>状态码由<strong>3位数字</strong>和<strong>原因短语</strong>组成<br>如：200 OK</p>
</blockquote>
<a id="more"></a>

<h1 id="状态码分类表"><a href="#状态码分类表" class="headerlink" title="状态码分类表"></a>状态码分类表</h1><blockquote>
<p>1xx</p>
<blockquote>
<pre><code>Informational（信息性状态码）  </code></pre></blockquote>
<p>2xx</p>
<blockquote>
<pre><code>Success（成功状态码）</code></pre></blockquote>
<p>3xx</p>
<blockquote>
<pre><code>Redirection（重定向）</code></pre></blockquote>
<p>4xx</p>
<blockquote>
<pre><code>Client error（客户端错误）</code></pre></blockquote>
<p>5xx</p>
<blockquote>
<pre><code>Server Error（服务器错误）</code></pre></blockquote>
</blockquote>
<h1 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h1><h2 id="1xx"><a href="#1xx" class="headerlink" title="1xx"></a>1xx</h2><blockquote>
<p>100    Continue    继续。客户端应继续其请求</p>
</blockquote>
<blockquote>
<p>101    Switching Protocols    切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</p>
</blockquote>
<h2 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h2><blockquote>
<p>200    OK：表示从客户端发送给服务器的请求被正常处理并返回；</p>
</blockquote>
<blockquote>
<p>201    Created    已创建。成功请求并创建了新的资源</p>
</blockquote>
<blockquote>
<p>202    Accepted    已接受。已经接受请求，但未处理完成</p>
</blockquote>
<blockquote>
<p>205    Reset Content    重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</p>
</blockquote>
<blockquote>
<p>206    Partial Content    部分内容。服务器成功处理了部分GET请求</p>
</blockquote>
<h2 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h2><blockquote>
<p>301 Moved Permanently：永久性重定向，表示请求的资源被分配了新的URL，之后应使用更改的URL；</p>
</blockquote>
<blockquote>
<p>302 Found：临时性重定向，表示请求的资源被分配了新的URL，希望本次访问使用新的URL；</p>
</blockquote>
<pre><code>301与302的区别：前者是永久移动，后者是临时移动（之后可能还会更改URL）</code></pre><blockquote>
<p>303 See Other：表示请求的资源被分配了新的URL，应使用GET方法定向获取请求的资源；</p>
</blockquote>
<pre><code>302与303的区别：后者明确表示客户端应当采用GET方式获取资源</code></pre><blockquote>
<p>304 Not Modified：表示客户端发送附带条件（是指采用GET方法的请求报文中包含if-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部）的请求时，服务器端允许访问资源，但是请求为满足条件的情况下返回改状态码；</p>
</blockquote>
<blockquote>
<p>305    Use Proxy    使用代理。所请求的资源必须通过代理访问</p>
</blockquote>
<blockquote>
<p>307 Temporary Redirect：临时重定向，与303有着相同的含义，307会遵照浏览器标准不会从POST变成GET；（不同浏览器可能会出现不同的情况）；</p>
</blockquote>
<h2 id="4xx"><a href="#4xx" class="headerlink" title="4xx"></a>4xx</h2><blockquote>
<p>400 Bad Request：表示请求报文中存在语法错误；</p>
</blockquote>
<blockquote>
<p>401 Unauthorized：未经许可，需要通过HTTP认证；</p>
</blockquote>
<blockquote>
<p>403 Forbidden：服务器拒绝该次访问（访问权限出现问题）</p>
</blockquote>
<blockquote>
<p>404 Not Found：表示服务器上无法找到请求的资源，除此之外，也可以在服务器拒绝请求但不想给拒绝原因时使用；</p>
</blockquote>
<blockquote>
<p>405    Method Not Allowed    客户端请求中的方法被禁止</p>
</blockquote>
<blockquote>
<p>408    Request Time-out    服务器等待客户端发送的请求时间过长，超时</p>
</blockquote>
<h2 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h2><blockquote>
<p>500    Inter Server Error：表示服务器在执行请求时发生了错误，也有可能是web应用存在的bug或某些临时的错误时；</p>
</blockquote>
<blockquote>
<p>501    Not Implemented    服务器不支持请求的功能，无法完成请求</p>
</blockquote>
<blockquote>
<p>503    Server Unavailable：表示服务器暂时处于超负载或正在进行停机维护，无法处理请求；</p>
</blockquote>
<blockquote>
<p>505    HTTP Version not supported    服务器不支持请求的HTTP协议的版本，无法完成处理</p>
</blockquote>
<hr>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p><strong>文章借鉴于<br><a href="https://blog.csdn.net/banana960531/article/details/85621865?_blank" target="_blank" rel="noopener">转载原文</a><br><a href="https://www.nowcoder.com/tutorial/96/24304825a0c04ea9a53cdb09cb664834?_blank" target="_blank" rel="noopener">牛客前端面试宝典</a><br>本人作为记录收录</strong></p>
<hr>
<p><a href="https://gitee.com/lin_daren/lindada-blog?_blank" target="_blank" rel="noopener">博客项目✨</a>（点一下哦~）<br>花10秒钟进上边链接帮我的博客点个🌟 吧!<br>(悄悄说~ 点了🌟 的你会更加幸运de ！)  </p>
<p><strong>小屋随时欢迎你们到来噢~</strong><br><strong>也欢迎各位小确幸们的批评和指正~</strong></p>
]]></content>
      <tags>
        <tag>http小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>（第一二章）我一字一行地重读红宝书</title>
    <url>/lindada-blog/2021/02/28/%EF%BC%88%E7%AC%AC%E4%B8%80%E4%BA%8C%E7%AB%A0%EF%BC%89%E6%88%91%E4%B8%80%E5%AD%97%E4%B8%80%E8%A1%8C%E5%9C%B0%E9%87%8D%E8%AF%BB%E7%BA%A2%E5%AE%9D%E4%B9%A6/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>历经两个多月断断续续地读完了JavaScript的经典书籍<strong>红宝书</strong> -《JavaScript高级程序设计（第4版）</p>
<p>详细地读完一遍后发觉整本书知识点全而泛，乍一想每一章的细节，还是略显模糊。</p>
<p>于是督促自己计划编写每一章的着重点再次加深印象和理解，顺便记录自己的所学所想所悟。方便自身利用电脑的快速搜索关键词来进行快速定位和学习，也希望能帮助到有需要的同学们哈。</p>
<p>若是想要系统仔细的学习，当然还是看原书比较好，我也是强烈推荐的噢！这里内容只当个人复习和总结。</p>
<p><em>提示: 一些个人主观认为不重要或不流行的章节将进行删减</em></p>
<a id="more"></a>
<h1 id="1-什么是-JavaScript"><a href="#1-什么是-JavaScript" class="headerlink" title="1. 什么是 JavaScript"></a>1. 什么是 JavaScript</h1><p>1995年问世，其目的是为了实现在客户端即可处理某些基本的验证。</p>
<p>JavaScript已被公认为主流的变成语言，能够实现复杂的计算与交互，包括闭包、匿名函数，甚至元编程等特性。</p>
<p>从简单的出入验证脚本到强大的变成语言，因此这一章就是为了真正学好用好JavaScript来理解其本质、历史及局限性。</p>
<h2 id="1-1-简短的历史回顾"><a href="#1-1-简短的历史回顾" class="headerlink" title="1.1 简短的历史回顾"></a>1.1 简短的历史回顾</h2><p>1995年，网景一位名叫 Brendan Eich 的工程师开发叫 Mocha（后来改名为LiveScript） 的脚本语言，在服务器端叫 LiveWire。</p>
<p>网景将 LiveScript 改名为 JavaScript（搭上当时Java的顺风车）。</p>
<p>1996年，由于 JavaScript1.0 的成功，IE开发了JScript。以至于当时出现两个版本的 JavaScript（Navigator 中的 JavaScript 和 IE 中的 JScript）</p>
<p>1997年，欧洲计算机制造商协会（Ecma）为了标准化一门通用、跨平台、厂商而打造出 ECMAScript 这个新的脚本语言标准。</p>
<p>1998年，ISO 和 IEC 两大组织也将 ECMAScript 采纳为标准，至此各大浏览器均以 ECMAScript 作为自己 JavaScript 实现的依据</p>
<h2 id="1-2-JavaScript-实现"><a href="#1-2-JavaScript-实现" class="headerlink" title="1.2 JavaScript 实现"></a>1.2 JavaScript 实现</h2><p>JavaScript包括</p>
<ul>
<li>核心（ECMAScript）</li>
<li>文档对象模型（DOM）</li>
<li>浏览器对象模型（BOM）</li>
</ul>
<h3 id="1-2-1-ECMAScript"><a href="#1-2-1-ECMAScript" class="headerlink" title="1.2.1 ECMAScript"></a>1.2.1 ECMAScript</h3><p>ECMAScript 即 ECMA-262 定义的语言，Web 浏览器只是 ECMAScript 实现可能存在的一种<strong>宿主环境</strong>。</p>
<p>在基本的层面，它描述这门语言的如下部分:</p>
<ul>
<li>语法</li>
<li>类型</li>
<li>语句</li>
<li>关键字</li>
<li>保留字</li>
<li>操作符</li>
<li>全局对象</li>
</ul>
<p>总的来说 ECMAScript 只是对实现这个规范描述的所有方面的一门语言的称呼</p>
<h3 id="1-2-2-DOM"><a href="#1-2-2-DOM" class="headerlink" title="1.2.2 DOM"></a>1.2.2 DOM</h3><p><strong>文档对象模型（DOM，Document Object Model）</strong>是一个应用编程接口（API），用于在 HTML 中使用扩展的 XML。DOM将整个页面抽象为一组分层节点。HTML 或 XML 页面的每个组成部分都是一种节点，包含不同数据。</p>
<p>开发者可以使用 DOM API 来轻松地删除、添加、替换、修改节点。</p>
<h4 id="1-2-2-1-DOM-是必须的"><a href="#1-2-2-1-DOM-是必须的" class="headerlink" title="1.2.2.1 DOM 是必须的"></a>1.2.2.1 DOM 是必须的</h4><p>为了保持 Web 跨平台的本性，万维网（W3C，World Wide Web Consortium）开始了制定 DOM 标准。</p>
<blockquote>
<p>注意: DOM 并非只能通过 JavaScript 访问，而且确实被其他很多语言实现了。不过对于浏览器来说，DOM 就是使用 ECMAScript 实现的，如何已经成为 JavaScript 语言的一大组成部分</p>
</blockquote>
<ul>
<li>DOM Level 1<ul>
<li>DOM Core: 映射XML文档，从而方便访问和操作文档任意部分的方式。</li>
<li>DOM HTML: 扩展前者，并增加了特定于HTML的对象和方法。</li>
</ul>
</li>
<li>DOM Level 2<ul>
<li>DOM 视图: 描述追踪文档不同视图（如应用CSS样式前后的文档）的接口。</li>
<li>DOM 事件: 描述事件及事件处理的接口。</li>
<li>DOM 样式: 描述处理元素 CSS 样式的接口。</li>
<li>DOM 遍历和范围: 描述遍历和操作 DOM 树的接口。</li>
</ul>
</li>
<li>DOM Level 3<ul>
<li>DOM Load and Save: 以统一的方式加载和保存文档的方法。</li>
<li>DOM Validation: 验证文档的方法。</li>
<li>DOM Core扩展: 支持了所有 XML 1.0的特性，包括 XML Infoset、XPath 和 XML Base。</li>
</ul>
</li>
<li>DOM4: W3C不再按照 Level 来维护 DOM 了，而是作用 DOM Living Standard 来维护，其快照称为 DOM4。<ul>
<li>Mutation Observers: 替代 Mutation Events。</li>
</ul>
</li>
</ul>
<blockquote>
<p>注意: 并没有一个标准叫 DOM Level 0，这只是 DOM 历史中的一个参照点。可以看作 IE4 和 Netscape Navigator 4 中最初支持的 DHTML。</p>
</blockquote>
<h3 id="1-2-3-BOM"><a href="#1-2-3-BOM" class="headerlink" title="1.2.3 BOM"></a>1.2.3 BOM</h3><p><strong>BOM（浏览器对象模型）</strong>用于支持访问和操作浏览器的窗口，开发者可以实现操作浏览器显示页面之外的部分。</p>
<p>总的来说，BOM 主要针对浏览器窗口和子窗口（frame）不过人们通常会把特定于浏览器的扩展都归在 BOM 的范畴内。</p>
<ul>
<li>弹出新浏览器窗口的能力。</li>
<li>移动、缩放和关闭浏览器窗口的能力。</li>
<li>navigator 对象，提供关于浏览器的详尽信息。</li>
<li>location 对象，提供浏览器加载页面的详尽信息。</li>
<li>screen 对象，提供关于铜壶屏幕分辨率的详尽信息。</li>
<li>performance 对象，提供浏览器内存占用、导航行为和时间统计的详尽信息。</li>
<li>对 cookie 的支持。</li>
<li>其他自定义对象，如 XMLHttpRequest 和 IE 的 ActiveXObject。</li>
</ul>
<p>因为 BOM 很多时间内都没有标准，每个浏览器实现的都是自己的 BOM 定义了自己的属性和方法。不过现在有了 HTML5，BOM 的实现细节应该会日趋一致。关于 BOM，后边的章节和详细接招。</p>
<h2 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h2><p>JavaScript 是一门用来与网页交互的脚本语言，包含以下三个部分。</p>
<ul>
<li>ECMAScript: 由 ECMA-262 定义并提供核心功能。</li>
<li>DOM（文档对象模型）: 提供与网页内容交互的方法和接口。</li>
<li>BOM（浏览器对象模型）: 提供与浏览器交互的方法和接口。</li>
</ul>
<p>JavaScript 的这三个部分得到了五大 Web 浏览器（IE、Firefox、Chrome、Safari 和 Opera）不同程度的支持。HTML5 中收录的 BOM 也会因浏览器而异。</p>
<h1 id="2-HTML-中的-JavaScript"><a href="#2-HTML-中的-JavaScript" class="headerlink" title="2. HTML 中的 JavaScript"></a>2. HTML 中的 JavaScript</h1><p>将 JavaScript 引入网页，首先要解决它与网页的主导语言 HTML 的关系问题。也就是引入的同时，不会导致页面在其他浏览器中渲染出问题。</p>
<h2 id="2-1-lt-script-gt-元素"><a href="#2-1-lt-script-gt-元素" class="headerlink" title="2.1 &lt;script&gt; 元素"></a>2.1 &lt;script&gt; 元素</h2><p>早期将 JavaScript 插入 HTML 的主要方法是使用 &lt;script&gt; 元素。这个元素是由网景公司创造出来，并最早在 Netscape Navigator 2 中实现。后来，被正式加入到 HTML 规范。 &lt;script&gt; 有下列8个属性</p>
<ul>
<li>async: 可选。表示应该立即开始下载脚本，但不能阻止其他网页动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。</li>
<li>charset: 可选。使用 src 属性指定的代码字符集。</li>
<li>crossorigin: 可选。配置相关请求的 CORS（跨源资源共享）设置，默认不使用。</li>
<li>defer: 可选。表示在文档解析和显示完成后再执行脚本，只对外部脚本有效（在 IE7 及更早版本中，对行内脚本也可指定）。</li>
<li>integrity: 可选。允许比对接收到的资源和指定的加密签名以验证子资源的完整性，如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN）不会提供恶意内容。</li>
<li>src: 可选。表示包含要执行的代码的外部文件。</li>
<li>type: 可选。替代language，表示代码块中脚本语言的内容类型（也称 MIME 类型）。通常为 “application/x-javascript”，如果该值为 module，则代码会被当成 ES6 模块，而且只有在这个时候代码中才能出现 import 和 export 关键字。</li>
<li>language: 废弃。</li>
</ul>
<p>使用  &lt;script&gt; 的方式有两种:</p>
<ul>
<li><p>嵌入行内 JavaScript 代码，直接把代码放在 &lt;script&gt; 元素中就行:</p>
<ul>
<li><pre><code class="html"><span class="tag">&lt;<span class="name">script</span>&gt;</span>
<span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span><span class="params">()</span> </span>{</span>
<span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'Hi!'</span>);</span>
  }
<span class="tag">&lt;/<span class="name">script</span>&gt;</span>
<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 引入外部文件中的 JavaScript 文件</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;html</span><br><span class="line">    &lt;script src&#x3D;&quot;example.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></span>

- 在 XHTML 文档中，可以忽略结束标签，但在 HTML 文件中不能使用
</code></pre>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>要避免同时使用两种方式，若两者都提供的话，则浏览器只会下载并执行脚本文件，从而忽略行内代码。</p>
<p>不管包含的是什么代码，浏览器都会按照 &lt;script&gt; 在页面中出现的顺序依次解释它们，前提是它们没有使用 defer 和 async 属性。</p>
</blockquote>
<h3 id="2-1-1-标签位置"><a href="#2-1-1-标签位置" class="headerlink" title="2.1.1 标签位置"></a>2.1.1 标签位置</h3><p>过去，所有  &lt;script&gt; 元素都被放在页面的 &lt;head&gt; 标签内。这种做法主要是将外部的 CSS 和 JavaScript 文件都集中放到一起。但问题是<strong>将导致页面必须把 &lt;head&gt; 中的所有外部文件下载、解析和解释完成后，才能开始渲染页面</strong>（页面在浏览器解析到 &lt;body&gt; 的起始标签时开始渲染）。因此现代 Web 应用程序通常将<strong>所有 JavaScript 引用放在  &lt;body&gt; 元素中的页面内容后面。</strong>这样一来，用户会感觉页面加载更快了，因为浏览器显示空白页面的时间短了。</p>
<h3 id="2-1-2-推迟执行脚本"><a href="#2-1-2-推迟执行脚本" class="headerlink" title="2.1.2 推迟执行脚本"></a>2.1.2 推迟执行脚本</h3><p>在  &lt;script&gt; 元素上设置 defer 属性，会告诉浏览器应该立即开始下载（同步），但执行应该推迟，如下列的代码块:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"example1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"example2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>虽然  &lt;script&gt; 元素包含在页面的  &lt;head&gt; 中，但它们会在浏览器解析到结束  &lt;/html&gt; 标签后才会执行。</p>
<blockquote>
<p>defer 属性只对外部脚本文件才有效，在高浏览器版本中会忽略行内脚本的 defer 属性。</p>
<p>将要推迟执行的脚本放在页面的底部会比较好。</p>
<p>对于 XHTML 文档，执行 defer 属性时应该写成 defer=”defer”。</p>
</blockquote>
<h3 id="2-1-3-异步执行脚本"><a href="#2-1-3-异步执行脚本" class="headerlink" title="2.1.3 异步执行脚本"></a>2.1.3 异步执行脚本</h3><p>async 属性与 defer 属性类似，两者都只适用于外部脚本，都会告诉浏览器立即开始下载。不过 async 是异步下载（不能保证次序执行）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"example1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"example2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>async 异步脚本保证会在页面的 load 事件前执行，但可能会在 DOMContentLoaded（参见第17章）之前或之后。</p>
<p>使用 async 会告诉页面你不会使用 document.write，不过好的 Web 开发实践根本就不推荐使用这个方法。</p>
<p>对于 XHTML 文档，执行 defer 属性时应该写成 async=”async”。</p>
</blockquote>
<h3 id="2-1-4-动态加载脚本"><a href="#2-1-4-动态加载脚本" class="headerlink" title="2.1.4 动态加载脚本"></a>2.1.4 动态加载脚本</h3><p>通过 DOM API 来向 DOM 中动态添加 script 元素同样可以加载指定的脚本。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">script.src = <span class="string">'example1.js'</span></span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script)</span><br></pre></td></tr></table></figure>

<p>以这种方式创建的  &lt;script&gt; 元素是以异步方式加载的，相当于添加了 async 属性。可以通过属性 async = false 进行设置为同步加载。</p>
<h2 id="2-2-行内代码与外部文件"><a href="#2-2-行内代码与外部文件" class="headerlink" title="2.2 行内代码与外部文件"></a>2.2 行内代码与外部文件</h2><p>虽然可以直接在 HTML 文件中嵌入 JavaScript 代码，但通常认为最佳实践是尽可能将 JavaScript 代码放在外部文件中。推荐理由如下:</p>
<ul>
<li>可维护性。JavaScript 文件统一保存代码，更容易维护，这样开发者就可以独立于使用它们的 HTML 页面来编辑代码。</li>
<li>缓存。浏览器会根据特定的设置缓存所有外部链接的 JavaScript 文件，这意味着多次使用该同一文件，则该文件只需加载一次。</li>
<li>适应未来。通过把 JavaScript 放在外部文件中，就不必考虑用 XHTML 或注释黑科技来解决兼容问题。</li>
</ul>
<blockquote>
<p>在 SPDY/HTTP2 中，预请求的消耗已显著降低，以轻量、独立 JavaScript 组件形式向客户端送达脚本更具优势。</p>
<p>原因是浏览器会缓存已下载的轻量、独立 JavaScript 文件。</p>
</blockquote>
<h2 id="2-4-lt-noscript-gt-元素"><a href="#2-4-lt-noscript-gt-元素" class="headerlink" title="2.4 &lt;noscript&gt; 元素"></a>2.4 &lt;noscript&gt; 元素</h2><p>  &lt;noscript&gt; 元素，针对早期浏览器不支持 JavaScript 的问题。虽然如今的浏览器已经近乎 100% 支持 JavaScript，但对于禁用 JavaScript 的浏览器来说，这个元素仍然有它的用处。</p>
<ul>
<li>&lt;noscript&gt; 元素一般放在  &lt;body&gt; 元素中，可以包含任何出现在  &lt;body&gt; 中的 HTML 元素，  &lt;script&gt; 除外。</li>
<li>当下列任意两种情况发送时，  &lt;noscript&gt; 元素将发挥作用。否则浏览器将不会渲染  &lt;noscript&gt; 元素。<ul>
<li>浏览器不支持脚本。</li>
<li>浏览器对脚本的支持被关闭。</li>
</ul>
</li>
</ul>
<p>下列是代码🌰片段</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">p</span>&gt;</span>This page requires a JavaScript-enabled browser.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>若该浏览器脚本不可使用，用户将得到提示，否则用户永远不会看到它。</p>
<h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h2><ul>
<li>要包含外部 JavaScript 文件，必须将 src 属性设置为文件的 URL。文件可以跟网页在用一台服务器上，也可以位于完全不同域。</li>
<li>在不使用 defer 和 async 属性的情况下，所有 &lt;script&gt; 元素会依照它们在网页中出现的次序被解释。</li>
<li>对正常脚本而言，为提升用户感受（让页面渲染更快）。应该把 &lt;script&gt; 元素放到页面末尾（ &lt;/body&gt; 标签前一行）</li>
<li>可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行，按次序执行。</li>
<li>可以使用 async 属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载，不能保证按次序执行。</li>
<li>通过使用 &lt;noscript&gt; 可以进行提示该浏览器是否执行并启用脚本。</li>
</ul>
]]></content>
      <tags>
        <tag>红宝书</tag>
      </tags>
  </entry>
  <entry>
    <title>带你入职的精美简历制作（免费获取高大上模版教程）</title>
    <url>/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/</url>
    <content><![CDATA[<p>古时候，我们见字如面！<br>到如今，手上的简历可谓见证我们以往的人生。<br>你是否还在对没有一份精美的简历而忧愁<br>是否羡慕那些大牛们高大上的简历<br>看完这一篇文章！<br>你也能打造属于自己的”完美简历”✨</p>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>先赞后看噢~<br>你们的每一个小小的赞都会给我添加无限的动力✨</p>
</blockquote>
<hr>
<p>为啥我要写这一篇文章呢<br>因为我也在打造自己的”完美简历”<br>为今后面试中呢<br>我手上这一块”敲门砖”可以更硬更强！<br>写一份简历其实不难，上网找简历需要注重哪些内容<br>跟着填充、优化自己的信息就好了<br>可是！单独且不花钱的情况下<br><strong>制作一份专属自己的完美简历</strong><br>实在是！是太难了！！<br>以下是我在制作属于自己简历时的痛点 </p>
<blockquote>
<ul>
<li>网上免费简历模版千篇一律，突不出重点</li>
<li>收费模版太太太贵了！并且些许固定化</li>
<li>找不到满意案例范本来完善自己的简历</li>
<li>排版没有经验，不知道怎么优化简历排版</li>
<li>大多的网上模版都花里胡哨，一点都不高大上  </li>
<li>随时下载PDF文件到本地</li>
<li>不知道怎么高大上地分享自己的作品集</li>
</ul>
</blockquote>
<p>为了解决这些痛点<br>我下定决心，查阅各种资料和网站<br>终于找到了一个很棒的制作精美简历的网站  </p>
<h1 id="CakereSume"><a href="#CakereSume" class="headerlink" title="CakereSume"></a>CakereSume</h1><p><em>很正经地声明: 作者不参杂任何广告因素噢（因为也不知道怎么收取广告费用啥的哈哈）</em></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://www.cakeresume.com/?_blank" target="_blank" rel="noopener">CakereSume</a><br>CakeResume是一个由台湾人开发、设计的线上履历表制作工具<br>它的介面单纯，操作上也不会太困难，只要选择布景主题<br>即可自行修改页面上显示的资讯栏位及相关内容<br>设定好你要使用的链结名称，就能轻松建置一个既正式又不会流于制式的个人履历!  </p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>CakeResume上有许多许多的优秀、精美的案例<br>我们简单来游览一下吧  </p>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/2.png" class title="[left]">
<br>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/3.png" class title="[left]">
<br>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/4.png" class title="[left]">

<p>这里有很多很多大牛们的优秀案例<br>虽然我们还没有实实在在的技能、项目经验、工作经历等等<br><em>慢慢地以后肯定会有的！</em><br>但我们也可以从第一步做起嘛 —— 模仿大牛的”<strong>老坛酸菜牛肉面</strong>“  </p>
<h1 id="制作完美简历"><a href="#制作完美简历" class="headerlink" title="制作完美简历"></a>制作完美简历</h1><h2 id="拥有一个CakeResume账号"><a href="#拥有一个CakeResume账号" class="headerlink" title="拥有一个CakeResume账号"></a>拥有一个CakeResume账号</h2><p>在制作前需要先拥有CakeResume网站的账号噢<br><strong>这个就自行解决啦</strong><br>CakeResume支持很多第三方登录账号噢  </p>
<h2 id="直接开始创建履历"><a href="#直接开始创建履历" class="headerlink" title="直接开始创建履历"></a>直接开始创建履历</h2><h3 id="创建空白履历"><a href="#创建空白履历" class="headerlink" title="创建空白履历"></a>创建空白履历</h3><img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/5.png" class title="[left]">
<blockquote>
<ol>
<li>首先点击右上角，进入 - 自己的主控台</li>
<li>选择左边框 - 我的履历 <em>（可以先完成自己的个人档案噢）</em>  </li>
<li>点击 - 直接制作履历</li>
</ol>
</blockquote>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/6.png" class title="[left]">
<p><strong>在这里就是属于我们的空白履历了</strong><br>右边栏有许多的模版框架<br>可以直接拖动模版来制作自己的履历啦！<br><em>不过也有一些需升级账户后才能使用的模版</em><br><strong>不用担心~ 看小编如何免费获取到大牛的范本吧</strong></p>
<hr>
<h3 id="参考精美履历"><a href="#参考精美履历" class="headerlink" title="参考精美履历"></a>参考精美履历</h3><p>怎么样查看参考大牛们的范本呢  </p>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/7.png" class title="[left]">
<blockquote>
<p>首先我们点击履历范本<br>其次在搜索框中搜索自己的领域或者职位</p>
</blockquote>
<br>

<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/8.png" class title="[left]">
<blockquote>
<p>在这里就可以看到很多相关的优秀简历范本<br>点击就可以查看详情了噢<br><strong>快快挑选自己满意的完美模版吧！</strong></p>
</blockquote>
<p><strong>那如何将模版免费套用自己的简历上呢！</strong><br>接着往下看</p>
<hr>
<h3 id="套用模版"><a href="#套用模版" class="headerlink" title="套用模版"></a>套用模版</h3><p>跟着我简单3步走噢~  </p>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/9.png" class title="[left]">
<blockquote>
<ol>
<li>点击上方小图标，进入作者简历主页 </li>
</ol>
</blockquote>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/10.png" class title="[left]">
<blockquote>
<ol start="2">
<li>打开谷歌开发者工具，选取自己满意的模块，copy下代码</li>
</ol>
</blockquote>
<img src="/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89/11.png" class title="[left]">
<blockquote>
<ol start="3">
<li>点击左边工具栏 - 小图标，粘贴代码，点击OK</li>
</ol>
</blockquote>
<p><strong>我们这就得到了免费的模版噢！</strong><br><strong>喜欢哪个模块，就套用哪个模块</strong><br>✨ 惊不惊喜！满不满意！</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>最后我还想唠嗑几句啰嗦话哈哈<br>其实这离制作一份完美的简历还很远很远<br>尽管我们最终制作出了精美的简历排版<br>可简历其实就是我们过往人生的一张纸、电子纸<br>若是我们过往的人生既不丰富，又不精彩<br>空有一份精美的排版<br>岂不是有点心酸…  </p>
<blockquote>
<p>CakeResume官网其实还有很多的功能<br>这些优秀的功能，就靠你们各取所需啦<br>可别忘了！大牛们简历的内容<br>也是很值得我们今后人生目标参考和学习的噢！  </p>
</blockquote>
<p><strong>很开心能与你们分享博客文章~</strong><br><a href="https://lin_daren.gitee.io/lindada-blog/2020/06/29/%E5%B8%A6%E4%BD%A0%E5%85%A5%E8%81%8C%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%EF%BC%88%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E9%AB%98%E5%A4%A7%E4%B8%8A%E6%A8%A1%E7%89%88%E6%95%99%E7%A8%8B%EF%BC%89?_blank">博客原文章✨</a></p>
<hr>
<p><em>若有什么无意之举冒犯了您，麻烦联系我噢~</em><br>要是这篇文章对您有那么一丢丢的帮助<br><a href="https://gitee.com/lin_daren/lindada-blog?_blank" target="_blank" rel="noopener">博客项目✨</a>（点一下哦~）<br>花10秒钟进上边链接帮我的博客点个🌟 吧!<br>(悄悄说~ 点了🌟 的你会更加幸运de ！)  </p>
<p><strong>小屋随时欢迎你们到来噢~</strong><br><strong>也欢迎各位小确幸们的批评和指正~</strong></p>
]]></content>
      <tags>
        <tag>简历小屋</tag>
      </tags>
  </entry>
  <entry>
    <title>林大人的面试小屋-JS基础</title>
    <url>/lindada-blog/2020/12/29/%E6%9E%97%E5%A4%A7%E4%BA%BA%E7%9A%84%E9%9D%A2%E8%AF%95%E5%B0%8F%E5%B1%8B-JS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<img src="/lindada-blog/2020/12/29/%E6%9E%97%E5%A4%A7%E4%BA%BA%E7%9A%84%E9%9D%A2%E8%AF%95%E5%B0%8F%E5%B1%8B-JS%E5%9F%BA%E7%A1%80/1.png" class>  
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>总结超多常见的JS基础知识点，将网络上大多数文章都看了一遍。<br>再规划一遍，有什么问题都没有答案，自己大部分从掘金查找优质的文章。<br>因为都是零碎的问题，找的问题也太多或大致相同。<br>也就顾及不到什么版权问题，望见谅！嘻嘻<br>为自己大三下实习打好基础！自己要加油！！<br>也整理给有需要的小朋友们 ✨</p>
<a id="more"></a>

<h1 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h1><h2 id="1-js-的基本数据类型-值类型-。"><a href="#1-js-的基本数据类型-值类型-。" class="headerlink" title="1. js 的基本数据类型(值类型)。"></a>1. js 的基本数据类型(值类型)。</h2><h3 id="ES6及之前-5种"><a href="#ES6及之前-5种" class="headerlink" title="ES6及之前(5种)"></a>ES6及之前(5种)</h3><p>String、Number、Boolean、Null、Undefined</p>
<h3 id="ES6之后ES10之前-6种"><a href="#ES6之后ES10之前-6种" class="headerlink" title="ES6之后ES10之前(6种)"></a>ES6之后ES10之前(6种)</h3><p>String、Number、Boolean、Null、Undefined、Symbol</p>
<h3 id="ES10之后-7种"><a href="#ES10之后-7种" class="headerlink" title="ES10之后(7种)"></a>ES10之后(7种)</h3><p>String、Number、Boolean、Null、Undefined、Symbol、BigInt</p>
<h2 id="2-js-的复杂数据类型-引用类型-。"><a href="#2-js-的复杂数据类型-引用类型-。" class="headerlink" title="2. js 的复杂数据类型(引用类型)。"></a>2. js 的复杂数据类型(引用类型)。</h2><p>对象(Object)、数组(Array)、函数(Function)</p>
<h2 id="3-js有几种类型的值"><a href="#3-js有几种类型的值" class="headerlink" title="3. js有几种类型的值"></a>3. js有几种类型的值</h2><h3 id="栈：基本数据类型"><a href="#栈：基本数据类型" class="headerlink" title="栈：基本数据类型"></a>栈：基本数据类型</h3><h3 id="堆：引用数据类型"><a href="#堆：引用数据类型" class="headerlink" title="堆：引用数据类型"></a>堆：引用数据类型</h3><h4 id="两者区别："><a href="#两者区别：" class="headerlink" title="两者区别："></a>两者区别：</h4><h5 id="1-声明变量时不同内存位置不同："><a href="#1-声明变量时不同内存位置不同：" class="headerlink" title="1. 声明变量时不同内存位置不同："></a>1. 声明变量时不同内存位置不同：</h5><p>​    基本数据类型变量的值储存在栈中，这是因为基本数据类型占据的空间内存是固定的，因此可以直接访问。</p>
<p>​    引用数据类型储存在栈中的是变量的地址指针，指向堆中的引用。因为引用数据类型的大小会改变因此不能储存在栈中会影响查找的速率。 </p>
<h5 id="2-访问机制不同："><a href="#2-访问机制不同：" class="headerlink" title="2.访问机制不同："></a>2.访问机制不同：</h5><p>​    在js中是不允许直接访问储存在堆内存中的变量的，能够访问的是堆内存中的地址，然后按照地址去访问引用类型</p>
<p>​    栈中的数据变量是可以直接访问到的。 </p>
<h5 id="3-复制变量时不同："><a href="#3-复制变量时不同：" class="headerlink" title="3.复制变量时不同："></a>3.复制变量时不同：</h5><p>​    栈中的变量复制时会将数值保存为另一个副本，这两者是相互独立的。</p>
<p>​    而堆中的对象进行复制时是将保存着内存地址的变量赋值给另一个变量，两者引用地址相同，它们中任何一个进行修改时都会改变另一个变量。 </p>
<h5 id="4-传递参数时不同："><a href="#4-传递参数时不同：" class="headerlink" title="4.传递参数时不同："></a>4.传递参数时不同：</h5><p>​    传递参数是将变量的值传递给形参，引用数据类型中的值为该变量在堆内存中的地址，</p>
<p>​    因此将引用数据类型作为参数传递时在函数内部对变量进行修改会影响函数外部该引用数据的值。</p>
<h2 id="4-什么是堆？什么是栈？它们之间有什么区别和联系？"><a href="#4-什么是堆？什么是栈？它们之间有什么区别和联系？" class="headerlink" title="4.什么是堆？什么是栈？它们之间有什么区别和联系？"></a>4.什么是堆？什么是栈？它们之间有什么区别和联系？</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>栈和堆的概念来自于从数据结构和操作系统中。 </p>
<p>数据结构中栈为先进后出队列，而堆为优先级队列，<a href>二叉树</a>为典型的堆队列。 </p>
<h3 id="区别和联系"><a href="#区别和联系" class="headerlink" title="区别和联系"></a>区别和联系</h3><h4 id="申请方式"><a href="#申请方式" class="headerlink" title="申请方式"></a>申请方式</h4><ol>
<li>堆：由程序员自己申请并指明大小的</li>
<li>栈：系统自动分配</li>
</ol>
<h4 id="申请大小的限制"><a href="#申请大小的限制" class="headerlink" title="申请大小的限制"></a>申请大小的限制</h4><ol>
<li><p>堆：由低地址到高地址扩展的数据结构，是不连续的内存区域， 这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</p>
</li>
<li><p>栈：在windows下，栈是由高向低地址扩展的数据结构， 是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M，总之是 一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。</p>
</li>
</ol>
<h4 id="申请效率"><a href="#申请效率" class="headerlink" title="申请效率"></a>申请效率</h4><ol>
<li><p>堆：由类似new机制来分配内存，一般速度比较慢，而且容易产生内存碎片，这一点从分配机制上能解释，不过用起来比较方便。</p>
</li>
<li><p>栈：由系统自动分配，速度比较快，而且程序员是无法控制的。</p>
</li>
</ol>
<h4 id="时效性"><a href="#时效性" class="headerlink" title="时效性"></a>时效性</h4><ol>
<li>堆：持久化</li>
<li>栈：临时</li>
</ol>
<h4 id="上下文调用"><a href="#上下文调用" class="headerlink" title="上下文调用"></a>上下文调用</h4><ol>
<li><p>堆：全局</p>
</li>
<li><p>栈：局部</p>
</li>
</ol>
<h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><ol>
<li><p>栈区内存 - 由编译器自动释放，主要储存函数的参数、局部变量等，结束后自动销毁。</p>
</li>
<li><p>堆区内存 - 主要靠程序员手动释放，若没有手动释放，垃圾回收机制会将其回收。</p>
</li>
</ol>
<h2 id="5-内部属性-Class-是什么"><a href="#5-内部属性-Class-是什么" class="headerlink" title="5.内部属性 [[Class]] 是什么"></a>5.内部属性 [[Class]] 是什么</h2><p>所有用<strong>typeof返回为object的变量</strong>都含有一个内部属性[[Class]]，可以看成是<strong>内部的分类</strong></p>
<p>利用Object.prototype.toString.call()可返回该分类。 </p>
<p>例如Object.prototype.toString.call([]) 返回<strong>[[Object Array]]</strong></p>
<h2 id="6-介绍-js-有哪些内置对象"><a href="#6-介绍-js-有哪些内置对象" class="headerlink" title="6.介绍 js 有哪些内置对象"></a>6.介绍 js 有哪些内置对象</h2><p><strong>js中的内置对象指的是在操作前由js定义的存在于全局作用域中的全局值属性、函数对象、以及可实例化的构造函数。</strong></p>
<p>全局值属性例如NaN、null等，函数有parseInt、parseFloat等</p>
<p>可实例化其他对象的构造函数Number、Boolean、Function等以及还有Date、数学对象Math等。</p>
<h2 id="7-undefined-与-undeclared-的区别"><a href="#7-undefined-与-undeclared-的区别" class="headerlink" title="7.undefined 与 undeclared 的区别"></a>7.undefined 与 undeclared 的区别</h2><ol>
<li>已在全局中声明但还没有赋值的变量返回undefined</li>
<li>未声明的变量是undeclared。会报错返回is not defined。</li>
</ol>
<h2 id="8-null-和-undefined-的区别"><a href="#8-null-和-undefined-的区别" class="headerlink" title="8.null 和 undefined 的区别"></a>8.null 和 undefined 的区别</h2><p><strong>首先null和undefined都是基本数据类型。</strong> </p>
<ol>
<li><p>undefined表示变量未定义，null代表的含义是空对象</p>
</li>
<li><p>一般变量未定义的时候会返回undefined，null一般作为变量对象的初始值(类似于占位符)</p>
</li>
<li><p>typeof null 会返回object。</p>
</li>
<li><p>null == undefined 返回true，但三个等号返回false。</p>
</li>
</ol>
<h2 id="9-如何获取安全的-undefined-值"><a href="#9-如何获取安全的-undefined-值" class="headerlink" title="9.如何获取安全的 undefined 值"></a>9.如何获取安全的 undefined 值</h2><p>原因：undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。</p>
<p>想法：表达式 void ___ 没有返回值，因此返回结果是 undefined。</p>
<p>结果：void 并不改变表达式的结果，只是让表达式不返回值。</p>
<p>使用 <strong>void 0 来获得 undefined。</strong></p>
<p>![image-20200928155305342](/Users/lin/Library/Application Support/typora-user-images/image-20200928155305342.png)</p>
<h2 id="10-说几条写-JavaScript-的基本规范"><a href="#10-说几条写-JavaScript-的基本规范" class="headerlink" title="10.说几条写 JavaScript 的基本规范"></a>10.说几条写 JavaScript 的基本规范</h2><p><strong>遵循一些基本规范利于读者阅读以及日后维护</strong></p>
<ol>
<li>变量声明尽量放在作用域的前面，并且var声明时最好给予初始值。 </li>
<li>用 ‘===’ 和 ‘!==’ 来代替 ‘==’ 和 ‘!=’。 </li>
<li>不要给内置对象的原型对象上添加方法，例如Array，Object，Function等。 </li>
<li>代码中出现地址、时间等常量用<strong>变量</strong>来代替。 </li>
<li>switch语句必须带有default分支。 </li>
<li>if和for语句要有大括号。</li>
</ol>
<h2 id="11-JavaScript原型，原型链？-有什么特点"><a href="#11-JavaScript原型，原型链？-有什么特点" class="headerlink" title="11.JavaScript原型，原型链？ 有什么特点"></a>11.JavaScript原型，原型链？ 有什么特点</h2><p>在JavaScript中我们使用构造函数创建一个实例对象时</p>
<p>每个构造函数内部都有一个<strong>prototype</strong>属性，这个属性是一个对象 =&gt; <strong>原型对象</strong></p>
<p>实例对象内部的 <strong>proto</strong> 属性指向构造函数的<strong>原型对象</strong>并且该原型对象也可看成其他构造函数的实例，这个<strong>proto属性链</strong>就是<strong>原型链</strong>。</p>
<p>当我们要查找实例对象身上的某个属性及方法时，若该实例对象身上没有，可沿着proto属性一级一级向上找，直至<strong>Object.prototype</strong>。  </p>
<p><strong>特点：JavaScript中是利用引用来进行传递的，当我们修改了某一原型的属性时，所有继承都会被修改。</strong></p>
<h2 id="12-JavaScript-获取原型的方法"><a href="#12-JavaScript-获取原型的方法" class="headerlink" title="12. JavaScript 获取原型的方法"></a>12. JavaScript 获取原型的方法</h2><p><code>function R(){}
let one=new R();</code></p>
<ol>
<li><code>console.log(Object.getPrototypeOf(one));    // 官方推荐</code></li>
<li><code>console.log(one.proto);</code></li>
<li><code>console.log(one.constructor.proto);</code></li>
</ol>
<h2 id="13-在-js-中不同进制数字的表示方式"><a href="#13-在-js-中不同进制数字的表示方式" class="headerlink" title="13. 在 js 中不同进制数字的表示方式"></a>13. 在 js 中不同进制数字的表示方式</h2><ol>
<li><strong>0X、0x</strong>开头的为16进制</li>
<li><strong>0O、0o</strong>开头的为8进制</li>
<li><strong>0B、0b</strong>开头的为2进制</li>
</ol>
<h2 id="14-js-中整数的安全范围是多少"><a href="#14-js-中整数的安全范围是多少" class="headerlink" title="14. js 中整数的安全范围是多少"></a>14. js 中整数的安全范围是多少</h2><p>安全整数指的是<strong>该整数转换为二进制时精度不会丢失</strong>。</p>
<p>最大值指的是<strong>2的53次幂-1</strong>，超过安全整数范围在计算时会有误差。</p>
<p>在ES6中被定义为<strong>Number.MAX_SAFE_INTEGER</strong>和<strong>Number.MIN_SAFE_INTEGER</strong>。当超过整数范围时会返回<strong>infinity</strong>。</p>
<h2 id="15-typeof-NaN-的结果是什么"><a href="#15-typeof-NaN-的结果是什么" class="headerlink" title="15.typeof NaN 的结果是什么"></a>15.typeof NaN 的结果是什么</h2><ol>
<li>typeof NaN会返回 <strong>number</strong>。</li>
<li>NaN是一个特殊值，它与自身不相等，<strong>NaN !=NaN  =&gt; true</strong></li>
</ol>
<h2 id="16-isNaN-和-Number-isNaN-函数的区别"><a href="#16-isNaN-和-Number-isNaN-函数的区别" class="headerlink" title="16.isNaN 和 Number.isNaN 函数的区别"></a>16.isNaN 和 Number.isNaN 函数的区别</h2><p><strong>isNaN接收参数时会尝试将其转化为数值型再判断</strong></p>
<p>因此传入的不能转换为数值的会返回<strong>true</strong>，但<strong>非数值型也会返回true</strong>，影响了NaN的判断。 </p>
<p>Number.isNaN会<strong>先判断其是否为Number</strong>，然后在进行isNaN判断。判断更为准确。</p>
<h2 id="17-Array-构造函数只有一个参数值时的表现"><a href="#17-Array-构造函数只有一个参数值时的表现" class="headerlink" title="17.Array 构造函数只有一个参数值时的表现"></a>17.Array 构造函数只有一个参数值时的表现</h2><p>Array构造函数只有一个参数值时会让其视为创建数组的长度length值，而非充当一个元素。</p>
<p>但创建出来的数组依然是个<strong>空数组</strong>，<strong>但有预设长度值</strong>。</p>
<h2 id="18-其他值到字符串的转换规则"><a href="#18-其他值到字符串的转换规则" class="headerlink" title="18.其他值到字符串的转换规则"></a>18.其他值到字符串的转换规则</h2><p><strong>规范的 9.8 节中定义了抽象操作 toString() ，它负责处理非字符串到字符串的强制类型转换。</strong></p>
<ol>
<li>Null 和 Undefined 类型 ，null 转换为 “null”，undefined 转换为 “undefined”，</li>
<li>Boolean 类型，true 转换为 “true”，false 转换为 “false”。</li>
<li>Number 类型的值直接转换，不过那些<strong>极小和极大的数字会使用指数形式</strong>。</li>
<li>Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。</li>
<li>对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()） 来返回<strong>内部属性 [[Class]] 的值</strong>，如”[object Object]”。如果对象有自己的 toString() 方法，字符串化时就会 调用该方法并使用其返回值。</li>
</ol>
<h2 id="19-其他值到数字值的转换规则"><a href="#19-其他值到数字值的转换规则" class="headerlink" title="19.其他值到数字值的转换规则"></a>19.其他值到数字值的转换规则</h2><ol>
<li><p>undefined返回NaN。</p>
</li>
<li><p>null返回0.</p>
</li>
<li><p>true返回1，false返回0.</p>
</li>
<li><p>字符串类型的值转换为数值型如同利用Number()，若字符串中含有<strong>非数字型返回NaN</strong>，<strong>空字符串返回0</strong>.</p>
</li>
</ol>
<h2 id="20-其他值到布尔类型的值的转换规则"><a href="#20-其他值到布尔类型的值的转换规则" class="headerlink" title="20.其他值到布尔类型的值的转换规则"></a>20.其他值到布尔类型的值的转换规则</h2><p>转换为<strong>false</strong>的有六种：</p>
<p><strong>null、undefined、false、””、NaN、+0、-0</strong></p>
<p>其余为<strong>true</strong></p>
<h2 id="21-和-的-valueOf-和-toString-的结果是什么"><a href="#21-和-的-valueOf-和-toString-的结果是什么" class="headerlink" title="21.{} 和 [] 的 valueOf 和 toString 的结果是什么"></a>21.{} 和 [] 的 valueOf 和 toString 的结果是什么</h2><ol>
<li><p>{}的valueOf为<strong>{}</strong>，toString为<strong>[Object Object]</strong></p>
</li>
<li><p>[]的valueOf为<strong>[]</strong>, toString为<strong>“”</strong></p>
</li>
</ol>
<h2 id="22-什么是假值对象？"><a href="#22-什么是假值对象？" class="headerlink" title="22.什么是假值对象？"></a>22.什么是假值对象？</h2><p>在某些情况下，浏览器在一些常规的js基础上自行创建的一些对象</p>
<p>这些对象强制转换为布尔值时为false</p>
<p>例如document.all为一个伪数组，表示页面中所有元素的数组，由DOM提供给js使用。</p>
<h2 id="23-操作符的作用？"><a href="#23-操作符的作用？" class="headerlink" title="23. ~ 操作符的作用？"></a>23. ~ 操作符的作用？</h2><ol>
<li>~表示<strong>按位取反</strong></li>
<li>~~可以用于<strong>取整</strong></li>
</ol>
<h2 id="24-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？"><a href="#24-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？" class="headerlink" title="24.解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？"></a>24.解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？</h2><ol>
<li>解析字符串中的数字允许含有非数字，例如parseInt解析字符串时会返回开头的数值，若第一个字符为非数字，则返回NaN</li>
<li>类型转换Number（）解析字符串时字符中不能含有不合法字符。否则返回NaN.</li>
</ol>
<h2 id="25-操作符什么时候用于字符串的拼接？"><a href="#25-操作符什么时候用于字符串的拼接？" class="headerlink" title="25. + 操作符什么时候用于字符串的拼接？"></a>25. + 操作符什么时候用于字符串的拼接？</h2><ol>
<li>当+操作符前后两个变量至少一个为字符串时，两者用+连接为字符串拼接。</li>
<li>若两者都为数字，则会数字加法运算。</li>
<li>而除了+以外的其他运算符，只要其中一方为数字，另一方就会转换为数字。</li>
</ol>
<h2 id="26-什么情况下会发生布尔值的隐式强制类型转换？"><a href="#26-什么情况下会发生布尔值的隐式强制类型转换？" class="headerlink" title="26.什么情况下会发生布尔值的隐式强制类型转换？"></a>26.什么情况下会发生布尔值的隐式强制类型转换？</h2><p><strong>条件判断语句的时候</strong></p>
<p>例如在if语句中进行判断时会转换为布尔值，还有while语句。三项表达式。for（ ； ； ）中的第二项。逻辑运算符||和&amp;&amp;进行判断时。</p>
<h2 id="27-和-amp-amp-操作符的返回值？"><a href="#27-和-amp-amp-操作符的返回值？" class="headerlink" title="27. || 和 &amp;&amp; 操作符的返回值？"></a>27. || 和 &amp;&amp; 操作符的返回值？</h2><ol>
<li>首先会对第一项进行布尔值强制类型转换。 </li>
<li>运用||运算符时，当第一项为true，则直接返回true，当第一项为false，则返回第二项的布尔值 </li>
<li>运动&amp;&amp;运算符时，当第一项为true，则返回第二项的布尔值，当第一项为false，则直接返回false。</li>
</ol>
<h2 id="28-Symbol-值的强制类型转换？"><a href="#28-Symbol-值的强制类型转换？" class="headerlink" title="28. Symbol 值的强制类型转换？"></a>28. Symbol 值的强制类型转换？</h2><ol>
<li>symbol值可以进行<strong>显性类型转换</strong> 但不能进行隐形类型转换会报错。</li>
<li>symbol值不能转换为数值型，但可以转化为布尔值，不管是显性还是隐性都是<strong>true</strong>。</li>
</ol>
<h2 id="29-操作符的强制类型转换规则？"><a href="#29-操作符的强制类型转换规则？" class="headerlink" title="29.== 操作符的强制类型转换规则？"></a>29.== 操作符的强制类型转换规则？</h2><ol>
<li>字符串和数值型进行==比较时，将字符串转换为数值型再进行比较。 </li>
<li>其他类型跟布尔值进行比较时，先将布尔值转换为数值型，再进行其他比较。 </li>
<li>NaN和本身取==时为false </li>
<li>null == undefined 为true </li>
<li>如果两个操作值都是对象，则需比较两者是否为同一个引用对象。</li>
</ol>
<h2 id="30-如何将字符串转化为数字，例如-‘12-3b’"><a href="#30-如何将字符串转化为数字，例如-‘12-3b’" class="headerlink" title="30.如何将字符串转化为数字，例如 ‘12.3b’?"></a>30.如何将字符串转化为数字，例如 ‘12.3b’?</h2><ol>
<li>使用Number（）方法，但前提是所包含的字符串不包含不合法字符。</li>
<li>parseInt（）方法，取整。</li>
<li>parseFloat（）方法，浮点数</li>
<li>隐式类型转换</li>
</ol>
<h2 id="31-如何将浮点数点左边的数每三位添加一个逗号，如-12000000-11-转化为『12-000-000-11』"><a href="#31-如何将浮点数点左边的数每三位添加一个逗号，如-12000000-11-转化为『12-000-000-11』" class="headerlink" title="31.如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为『12,000,000.11』?"></a>31.如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为『12,000,000.11』?</h2><p><strong>使用正则表达式方法</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function format(number)&#123;  return number &amp;&amp; number.replace(&#x2F;(\d)(?&#x3D;(\d&#123;3&#125;+\.))&#x2F;g, function($1, $2, $3)&#123;  return $2 + &#39;,&#39;;  &#125;) &#125;</span><br></pre></td></tr></table></figure>

<p> ?=pattern 表示匹配到pattern的开始位置的字符，例如window(?=95|98|2000|xp)，可以匹配到window2000中的window。 </p>
<h2 id="32-生成随机数的各种方法？"><a href="#32-生成随机数的各种方法？" class="headerlink" title="32. 生成随机数的各种方法？"></a>32. 生成随机数的各种方法？</h2><p><strong>Math.random()</strong></p>
<h2 id="33-如何实现数组的随机排序"><a href="#33-如何实现数组的随机排序" class="headerlink" title="33. 如何实现数组的随机排序"></a>33. 如何实现数组的随机排序</h2><ol>
<li><p>随机抽取数组元素到新数组中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomsort</span>(<span class="params">arr</span>)</span>&#123;  </span><br><span class="line">	<span class="keyword">var</span> newarr = [];  </span><br><span class="line">  <span class="keyword">while</span>(arr.length &gt; <span class="number">0</span>)&#123;   </span><br><span class="line">    <span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*arr.length);   </span><br><span class="line">    newarr.push(arr[index]);   </span><br><span class="line">    arr.splice(index, <span class="number">1</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> newarr; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>随机交换数组内的元素（洗牌法） </p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomsort</span>(<span class="params">arr</span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> temp,  leng = arr.length,  tempindex;  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; leng; i++)&#123;  </span><br><span class="line">    tempindex = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(leng - i) + i);  </span><br><span class="line">    temp = arr[i];  </span><br><span class="line">    arr[i] = arr[tempindex];  </span><br><span class="line">    arr[tempindex] = temp;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> arr; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="34-javascript-创建对象的几种方式？"><a href="#34-javascript-创建对象的几种方式？" class="headerlink" title="34. javascript 创建对象的几种方式？"></a>34. javascript 创建对象的几种方式？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.最直白的方式：字面量模式创建</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'大大'</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  sex: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用系统构造函数创建</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">obj.name = <span class="string">'大大'</span></span><br><span class="line">obj.age: <span class="number">20</span>,</span><br><span class="line">obj.sex: <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.工厂模式创建</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, sex</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  p.name = name;</span><br><span class="line">  p.age = age;</span><br><span class="line">  p.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"大大1"</span>, <span class="number">20</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">"大大2"</span>, <span class="number">18</span>, <span class="string">'男'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.自定义构造函数创建</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"大大1"</span>, <span class="number">20</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"大大2"</span>, <span class="number">18</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="comment">/** 这种方法与工厂模式创建有几个不同点：</span></span><br><span class="line"><span class="comment">1.函数名Person是大写，而工厂模式的函数creatPerson是小写（俗成约定）;</span></span><br><span class="line"><span class="comment">2.该方法没有return语句，而工厂函数创建有return；</span></span><br><span class="line"><span class="comment">3.该方法直接将属性和方法赋值给了this对象，而工厂模式没有出现this对象；</span></span><br><span class="line"><span class="comment">4.该方法通过new操作符来实例化一个对象，而工厂模式实例化对象直接调用函数即可。**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.原型模式创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"大大1"</span>, <span class="number">20</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"大大2"</span>, <span class="number">18</span>, <span class="string">'男'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="35-js-继承的几种实现方式？"><a href="#35-js-继承的几种实现方式？" class="headerlink" title="35. js 继承的几种实现方式？"></a>35. js 继承的几种实现方式？</h2><ol>
<li><p>原型链继承：将子构造函数的原型对象指向父构造函数的实例对象，那么子构造函数的实例对象可继承父类上的属性及方法。缺点是创建子类时不能向父类传参，并且父类原型上的所有引用类型可应用到所有实例对象上。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.name = name;  </span><br><span class="line">  <span class="keyword">this</span>.age = age; </span><br><span class="line">&#125; </span><br><span class="line">Father.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">skill</span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.skill = skill; </span><br><span class="line">&#125; </span><br><span class="line">Child.prototype = <span class="keyword">new</span> Father(<span class="string">'zhangsan'</span>, <span class="number">20</span>); </span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">'dance'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(child.getName());</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造函数继承：通过在子类中使用对父构造函数使用call方法来调用，并且修改this指针指向子类，同时可以传递参数。优点：避免了引用类型的属性被所有实例共享，也解决了不能传参的问题。缺点是因为方法都在构造函数中定义了，因此每次创建实例时都要创建一遍方法。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.name = name;  </span><br><span class="line">  <span class="keyword">this</span>.age = age;  </span><br><span class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">this</span>.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age, skill</span>)</span>&#123;  </span><br><span class="line">  Father.call(<span class="keyword">this</span>, name, age);  </span><br><span class="line">  <span class="keyword">this</span>.skill = skill </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">'zhangsan'</span>, <span class="number">20</span>, <span class="string">'dance'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(child.getName())</span><br></pre></td></tr></table></figure>
</li>
<li><p>组合继承：通过结合了原型链继承和构造函数继承。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.name = name;  </span><br><span class="line">  <span class="keyword">this</span>.age = age; </span><br><span class="line">&#125; </span><br><span class="line">Father.prototype.money = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'100000'</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age, skill</span>)</span>&#123;  </span><br><span class="line">  Father.call(<span class="keyword">this</span>, name, age);  </span><br><span class="line">  <span class="keyword">this</span>.skill = skill; </span><br><span class="line">&#125; </span><br><span class="line">Child.prototype = <span class="keyword">new</span> Father(); </span><br><span class="line">Child.prototype.constructor = Child; </span><br><span class="line">Child.prototype.exam = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'i want to have an exam'</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">'zhangsan'</span>, <span class="number">20</span>, <span class="string">'dance'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(child.money())</span><br></pre></td></tr></table></figure>
</li>
<li><p>原型式继承：将以参数形式传入的对象作为创建对象的原型。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatObj</span>(<span class="params">o</span>)</span>&#123;  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;  </span><br><span class="line">  F.prototype = o;  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> person = &#123;  </span><br><span class="line">  name: <span class="string">'zhangsan'</span>,  </span><br><span class="line">  age: <span class="number">20</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> person1 = creatObj(person); </span><br><span class="line"><span class="keyword">var</span> person2 = creatObj(person); </span><br><span class="line">person1.name = <span class="string">'lisi'</span>; </span><br><span class="line"><span class="built_in">console</span>.log(person1.name, person2.name);</span><br></pre></td></tr></table></figure>
</li>
<li><p>寄生式继承 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.name = name;  </span><br><span class="line">  <span class="keyword">this</span>.age = age; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>)</span>&#123;  </span><br><span class="line">  Father.call(<span class="keyword">this</span>, name, age); </span><br><span class="line">&#125; (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> Super = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;  </span><br><span class="line">  Super.prototype = Father.prototype;  </span><br><span class="line">  Child.prototype = <span class="keyword">new</span> Super(); </span><br><span class="line">&#125;)() </span><br><span class="line">Child.prototype.constructor = Child; </span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">'Tom'</span>, <span class="number">20</span>); </span><br><span class="line"><span class="built_in">console</span>.log(child.name)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="37-Js原型什么是prototype、proto、constructor？-Javascript-的作用域链？"><a href="#37-Js原型什么是prototype、proto、constructor？-Javascript-的作用域链？" class="headerlink" title="37.Js原型什么是prototype、proto、constructor？ Javascript 的作用域链？"></a>37.Js原型什么是prototype、<strong>proto</strong>、constructor？ Javascript 的作用域链？</h2><ol>
<li><p>什么是prototype、<strong>proto</strong>、constructor？</p>
<ol>
<li><strong>proto</strong>是原型属性，对象特有的属性，是<strong>对象指向另外一个对象</strong>（就是第二点的原型对象），一般是<strong>实例对象</strong>的属性，如arr.<strong>proto</strong></li>
<li>prototype是原型对象，构造函数特有的属性，是<strong>构造函数指向的对象</strong>，如Array.prototype</li>
<li>constructor是原型对象用于指回构造函数的属性，是<strong>对象指向函数</strong>的，如Array.prototype.constructor</li>
</ol>
</li>
<li><p>作用域链是<strong>保证执行函数时变量对象的有序访问，是指向变量对象的有序列表</strong></p>
<p>变量对象包含执行函数内所有的变量和函数，通过作用域链我们可以查找<strong>外部函数的变量和函数</strong></p>
<p>当我们执行函数时会首先查找执行上下文中的变量，若没有则沿着作用域链向上查找，直至全局上下文中查找全局变量。</p>
</li>
</ol>
<h2 id="38-谈谈-This-对象的理解。"><a href="#38-谈谈-This-对象的理解。" class="headerlink" title="38. 谈谈 This 对象的理解。"></a>38. 谈谈 This 对象的理解。</h2><p><strong>this是函数执行上下文中的一个属性，它指向最后一次调用该函数的对象。</strong> </p>
<ol>
<li><p>函数调用时，若函数不是一个对象的属性，当其调用时this指向全局对象。 </p>
</li>
<li><p>方法调用时，若方法为一个对象中的方法，调用该方法时this指向这个对象。 </p>
</li>
<li><p>当函数通过构造函数用new来创建时，执行前会创建一个实例对象，这个函数的this指向该实例。 </p>
</li>
<li><p>通过运用call、apply、bind方法来改变函数的this指向</p>
<ol>
<li>call方法第一个参数为改变this指向的对象，后面的参数为传递的参数</li>
<li>apply与call的区别是传递的参数为数组</li>
<li>bind方法与call和apply的区别是不会立即调用函数，先将函数与this指向绑定，返回改变了this指向的新函数，等到待执行时再调用。这个函数的this指向除了用new构造函数来改变，其余都不会改变。 </li>
</ol>
<p>优先级：这四种模式中，使用new构造函数的优先级最高，其次是call、apply、bind调用函数，然后是方法调用模式，最后是函数调用模式。</p>
</li>
</ol>
<h2 id="39-eval-是做什么的？"><a href="#39-eval-是做什么的？" class="headerlink" title="39. eval 是做什么的？"></a>39. eval 是做什么的？</h2><p>eval方法是将传递的字符以js语法去解析执行。</p>
<p>应该尽量避免使用eval语法，因为是非消耗性能，第一次解析js语法，第二次执行js语句。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装一个eval方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eval</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一个变量指向Function，防止有些前端编译工具报错</span></span><br><span class="line">  <span class="keyword">const</span> Fn = <span class="built_in">Function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Fn(<span class="string">'return '</span> + fn)()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="40-什么是-DOM-和-BOM？"><a href="#40-什么是-DOM-和-BOM？" class="headerlink" title="40. 什么是 DOM 和 BOM？"></a>40. 什么是 DOM 和 BOM？</h2><ol>
<li>DOM是<strong>文档对象模型</strong>，它是将文档看成一个对象，这个对象主要定义了文档的方法和接口。在DOM中，文档的各个组件可以通过Object.attribute来获取，根对象是document。</li>
<li>BOM是<strong>浏览器对象模型</strong>，它是将浏览器看成是一个对象，这个对象中定义了浏览器的方法和接口。它除了可以访问文档组件以外还可以访问浏览器窗口组件，例如导航条navigator，历史记录history等等。</li>
</ol>
<h2 id="41-写一个通用的事件侦听器函数。"><a href="#41-写一个通用的事件侦听器函数。" class="headerlink" title="41. 写一个通用的事件侦听器函数。"></a>41. 写一个通用的事件侦听器函数。</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// event(事件)工具集</span></span><br><span class="line">markyun.Event = &#123;</span><br><span class="line">    <span class="comment">// 页面加载完成后</span></span><br><span class="line">    readyEvent : <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fn==<span class="literal">null</span>) &#123;</span><br><span class="line">            fn=<span class="built_in">document</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="built_in">window</span>.onload = fn;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                oldonload();</span><br><span class="line">                fn();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span></span><br><span class="line">    <span class="comment">// 参数： 操作的元素, 事件名称, 事件处理程序</span></span><br><span class="line">    addEvent : <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">            <span class="comment">//事件类型、需要执行的函数、是否捕捉</span></span><br><span class="line">            element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">            element.attachEvent(<span class="string">'on'</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                handler.call(element);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">'on'</span> + type] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 移除事件</span></span><br><span class="line">    removeEvent : <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">            element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.datachEvent) &#123;</span><br><span class="line">            element.detachEvent(<span class="string">'on'</span> + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="comment">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span></span><br><span class="line">    stopPropagation : <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ev.stopPropagation) &#123;</span><br><span class="line">            ev.stopPropagation();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ev.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取消事件的默认行为</span></span><br><span class="line">    preventDefault : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            event.returnValue = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取事件目标</span></span><br><span class="line">    getTarget : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span></span><br><span class="line">    getEvent : <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ev = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">if</span> (!ev) &#123;</span><br><span class="line">            <span class="keyword">var</span> c = <span class="keyword">this</span>.getEvent.caller;</span><br><span class="line">            <span class="keyword">while</span> (c) &#123;</span><br><span class="line">                ev = c.arguments[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (ev &amp;&amp; Event == ev.constructor) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                c = c.caller;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="42-事件是什么？IE-与火狐的事件机制有什么区别？-如何阻止冒泡？"><a href="#42-事件是什么？IE-与火狐的事件机制有什么区别？-如何阻止冒泡？" class="headerlink" title="42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？"></a>42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？</h2><ol>
<li><p>事件是<strong>用户操作网页过程中的交互动作</strong></p>
<ol>
<li>例如鼠标点击事件click，鼠标移动事件mousemove等等</li>
<li>除了用户触发外还可以是文档加载，例如页面滚动事件scroll</li>
<li>事件可以封装成一个event对象，包含了事件对象的所有信息和可以对事件的操作。 </li>
</ol>
</li>
<li><p>IE可以支持事件冒泡，火狐可以同时支持两种事件模型，即事件冒泡和事件捕获。 </p>
</li>
<li><p>event.stopPropogation或者ie下的event.cancelBubble = true。</p>
</li>
</ol>
<h2 id="43-三种事件模型是什么？"><a href="#43-三种事件模型是什么？" class="headerlink" title="43. 三种事件模型是什么？"></a>43. 三种事件模型是什么？</h2><p>事件是指用户操作页面过程中触发或者是浏览器触发的交互动作，有三种事件模型。 </p>
<ol>
<li>DOM0事件模型，该事件模型没有事件流的概念，这种模型不会传播，它可以直接定义监听函数也可以通过js属性来定义监听函数。 </li>
<li>IE事件模型，该事件模型涉及两个事件流，执行阶段和冒泡阶段，首先会监听并触发目标事件，然后会依次冒泡到最外层document，所经过的节点依次判断是否绑定了事件，若有则触发。可以通过attachEvent来监听事件，可以监听多个函数并按顺序执行。 </li>
<li>DOM2事件模型，该事件模型涉及三个事件流，捕获阶段、执行阶段和冒泡阶段，捕获阶段为从document依次向下传播，检查每个节点是否绑定了相关事件，若有则触发。后两者与IE两个阶段相同。可以通过addEventListener来监听事件，第三个参数用来判断捕获和冒泡的顺序。</li>
</ol>
<h2 id="44-事件委托是什么？"><a href="#44-事件委托是什么？" class="headerlink" title="44.事件委托是什么？"></a>44.事件委托是什么？</h2><p>事件委托的本质是<strong>通过事件冒泡使父节点能够监听到子节点的事件</strong>，从而产生事件函数。也就是将监听函数绑定在子节点的父节点上，这样不必为每个子节点都绑定监听事件，父节点可以通过事件对象定位到子节点目标上。</p>
<p>例如当我们动态创建子节点时，动态创建的子节点也可以有监听事件，可以利用事件委托的形式将监听函数绑定在父节点上，可以减少内存上的消耗。</p>
<h2 id="45-“1”-“2”-“3”-map-parseInt-答案是多少？"><a href="#45-“1”-“2”-“3”-map-parseInt-答案是多少？" class="headerlink" title="45. [“1”, “2”, “3”].map(parseInt) 答案是多少？"></a>45. [“1”, “2”, “3”].map(parseInt) 答案是多少？</h2><p>答案：<strong>[1, NaN, NaN]。</strong></p>
<p>parseInt方法是将数值转为整数型，接收两个参数，分别为val和radix，即数值和基数，基数范围为2~36之间，并且数值不能大于基数值，这样才能正确返回整数型。</p>
<p>map方法传递了三个参数，分别为value，index，array，默认第三个参数被省略。</p>
<p>这样数组传递给parseInt的参数分别为1-0，2-1，3-2，因为数值不能大于基数，所以后两项返回为NaN，第一项由于基数是0，所以默认为10，返回1。</p>
<h2 id="46-什么是闭包，为什么要用它？"><a href="#46-什么是闭包，为什么要用它？" class="headerlink" title="46. 什么是闭包，为什么要用它？"></a>46. 什么是闭包，为什么要用它？</h2><p><strong>闭包是指有权访问另一个函数内变量的函数，例如在函数内创建另一个函数，内部函数能够访问到外部函数局部变量。</strong> </p>
<p> 闭包用途： </p>
<ol>
<li>函数外部可以访问函数内部的变量，通过闭包函数，我们可以在函数外部调用闭包函数在外部获取到函数内部的变量。 </li>
<li>另一个作用是将已经运行结束的函数上下文中的变量对象保存在内存中，通过闭包函数保存了对变量对象的引用，因此这个变量对象<strong>不会被回收</strong>。</li>
</ol>
<h2 id="47-javascript-代码中的-“use-strict”-是什么意思-使用它区别是什么？"><a href="#47-javascript-代码中的-“use-strict”-是什么意思-使用它区别是什么？" class="headerlink" title="47. javascript 代码中的 “use strict”; 是什么意思 ? 使用它区别是什么？"></a>47. javascript 代码中的 “use strict”; 是什么意思 ? 使用它区别是什么？</h2><p>use strict指的是<strong>严格模式下执行js语句</strong>。</p>
<p>主要是消除了一些不规范的语法，提高了解析执行的效率，保证了代码的安全运行。</p>
<p>禁止使用with语句，不允许this指向全局对象，对象不能有重名的属性等。</p>
<h2 id="48-如何判断一个对象是否属于某个类？"><a href="#48-如何判断一个对象是否属于某个类？" class="headerlink" title="48. 如何判断一个对象是否属于某个类？"></a>48. 如何判断一个对象是否属于某个类？</h2><ol>
<li>通过使用<strong>instanceof</strong>运算符来判断对象构造函数的原型对象是否出现在原型链上的某个位置。</li>
<li><strong>Object.prototype.toString.call</strong>来返回[[Class]]属性。</li>
</ol>
<h2 id="49-instanceof-的作用？"><a href="#49-instanceof-的作用？" class="headerlink" title="49. instanceof 的作用？"></a>49. instanceof 的作用？</h2><p>instanceof运算符用于判断<strong>构造函数的原型对象是否在对象原型链上的某个位置</strong>。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手写方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance</span>(<span class="params">left, right</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> proto = <span class="built_in">Object</span>.getPrototypeOf(left);</span><br><span class="line">    <span class="keyword">var</span> prototype = right.prototype;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!proto) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(proto === prototype)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        proto = <span class="built_in">Object</span>.getPrototypeOf(proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="50-new-操作符具体干了什么呢？如何实现？"><a href="#50-new-操作符具体干了什么呢？如何实现？" class="headerlink" title="50. new 操作符具体干了什么呢？如何实现？"></a>50. new 操作符具体干了什么呢？如何实现？</h2><p>对于构造函数通过new创建一个新实例对象，在内存上开辟了一个新空间，同时将实例对象的proto属性指向构造函数的prototype原型对象。</p>
<p>并且将构造函数的属性通过this指向new创建出的实例对象。</p>
<p>判断函数的<strong>返回值类型</strong>，如果是值类型就返回<strong>创建的对象</strong>，如果是引用类型就返回<strong>引用类型对象</strong>。</p>
<h2 id="51-Javascript-中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？"><a href="#51-Javascript-中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？" class="headerlink" title="51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？"></a>51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</h2><p><strong>hasOwnProperty</strong>方法，该方法用于查找对象身上自身特点的属性，而不去查找原型上的属性，会将原型上的属性忽略掉。</p>
<h2 id="52-对于-JSON-的了解？"><a href="#52-对于-JSON-的了解？" class="headerlink" title="52. 对于 JSON 的了解？"></a>52. 对于 JSON 的了解？</h2><p>JSON是一种基于文本的<strong>轻量级的数据交换格式</strong>，它可以被任何编程语言读取并交换数据格式。 </p>
<p>在项目开发中我们常用JSON来进行前后端数据的传递，我们在前端将数据转换为JSON字符串的格式传递给后端，后端接收到数据后通过将其转换为特定的数据结构来进行处理。 </p>
<p>因为JSON是基于js语法的，但两者有很大差别，<strong>JSON格式更为严格</strong>，例如不能使用方法属性，且属性用双引号。 </p>
<p> js中提供了<strong>两种方法</strong>来对JSON格式进行处理</p>
<ol>
<li>是<strong>JSON.stringify</strong>将JSON数据结构转变为JSON字符串的模式。 </li>
<li>是<strong>JSON.parse</strong>方法将JSON字符串格式转变为js数据结构，若接收到的数据不是JSON字符串格式就会报错，例如我们在后端接收到JSON字符串格式的数据，可以通过JSON.parse将其转变为js数据结构再进行数据处理。</li>
</ol>
<h2 id="52-forEach-call-“-”-function-a-a-style-outline-”1px-solid-”-Math-random-1-lt-lt-24-toString-16-能解释一下这段代码的意思吗？"><a href="#52-forEach-call-“-”-function-a-a-style-outline-”1px-solid-”-Math-random-1-lt-lt-24-toString-16-能解释一下这段代码的意思吗？" class="headerlink" title="52. [].forEach.call((“*”),function(a){a.style.outline=”1px solid #”+(~~(Math.random()*(1&lt;&lt;24))).toString(16)}) 能解释一下这段代码的意思吗？"></a>52. [].forEach.call((“*”),function(a){a.style.outline=”1px solid #”+(~~(Math.random()*(1&lt;&lt;24))).toString(16)}) 能解释一下这段代码的意思吗？</h2><p>我们可以在控制台中通过()来获取相应的元素，类似于document.querySelectorAll()方法。这行代码的意思就是对页面中所有元素进行遍历，对每个元素设置一个outline样式，样式的颜色为一个随机颜色，Math.random()(1&lt;&lt;24)表示0<del>2^24-1之间的随机数，</del>表示取反，~~表示两次取反表示为取整操作，toSting(16)为转换为16进制的整数。</p>
<h2 id="54-js-延迟加载的方式有哪些？"><a href="#54-js-延迟加载的方式有哪些？" class="headerlink" title="54. js 延迟加载的方式有哪些？"></a>54. js 延迟加载的方式有哪些？</h2><p>js代码在解析和执行时会阻塞页面的渲染，阻碍dom向下执行，因此我们希望能够延迟js加载，从而使页面性能更好更加流畅。 <strong>是一种优化方案</strong></p>
<ol>
<li>可以通过在script标签添加<strong>defer</strong>属性，表面页面自上而下执行时若遇到js脚本时不会阻塞页面向下执行，而是加载js脚本和页面解析同时进行，当页面元素全部解析完毕时再按照js脚本的顺序执行js语句。 </li>
<li>可以通过在script标签添加<strong>async</strong>属性，它和defer属性的不同是等到js脚本加载完毕就回过头去执行js代码，而不会等到所有页面元素加载完毕，是<strong>异步进行</strong>的，js脚步不会按照顺序执行，哪个先加载完毕就先执行哪个js代码。 </li>
<li>可以利用<strong>定时器</strong>延迟js脚本的加载。 </li>
<li>将js脚本放在<strong>html页面的底部</strong>。 </li>
<li>可以使用<strong>动态创建script标签</strong>的方式，我们可以对文档的加载事件进行监听，当页面元素全部加载完毕时再动态创建script标签，进行外部js脚本的外链。</li>
</ol>
<h2 id="55-Ajax-是什么-如何创建一个-Ajax？"><a href="#55-Ajax-是什么-如何创建一个-Ajax？" class="headerlink" title="55. Ajax 是什么? 如何创建一个 Ajax？"></a>55. Ajax 是什么? 如何创建一个 Ajax？</h2><p>Ajax属于<strong>异步通信</strong>，通过XMLHTTPRequest创建xhr，从服务器xml文档中获取数据，并更新到页面局部，不必刷新整个页面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">   <span class="comment">//设置默认对象 </span></span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">        type: <span class="string">'get'</span>,</span><br><span class="line">        url: <span class="string">''</span>,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将传入参数对象与默认对象合并</span></span><br><span class="line">    <span class="built_in">Object</span>.assign(defaults, options);</span><br><span class="line">    <span class="keyword">var</span> params = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> defaults.data)&#123;</span><br><span class="line">        params += attr + <span class="string">'='</span> + defaults.data[attr] + <span class="string">'&amp;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    params = params.substr(<span class="number">0</span>, params.length);</span><br><span class="line">    <span class="keyword">if</span>(defaults.type == <span class="string">'get'</span>)&#123;</span><br><span class="line">        <span class="keyword">default</span>.url = <span class="keyword">default</span>.url + <span class="string">'?'</span> + params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHTTPRequest();</span><br><span class="line">    xhr.open(defaults.type, defaults.url);</span><br><span class="line">    <span class="keyword">if</span>(defaults.type == <span class="string">'post'</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> contentType = defaults.headers[<span class="string">'Content-Type'</span>];</span><br><span class="line">        xhr.setResquestHeader(<span class="string">'Content-Type'</span>, contentType);</span><br><span class="line">        <span class="keyword">if</span>(contentType == <span class="string">'application/json'</span>)&#123;</span><br><span class="line">            xhr.send(<span class="built_in">JSON</span>.stringify(defaults.data));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xhr.send(params);</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> contentType = xhr.getResquestHeader(<span class="string">'Content-Type'</span>);</span><br><span class="line">        <span class="keyword">var</span> responseText = xhr.responseText;</span><br><span class="line">        <span class="keyword">if</span>(contentType.includes(<span class="string">'application/json'</span>))&#123;</span><br><span class="line">            responseText = <span class="built_in">JSON</span>.parse(responseText);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">            defaults.success(responseText, xhr);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            defaults.error(responseText, xhr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="56-谈一谈浏览器的缓存机制？"><a href="#56-谈一谈浏览器的缓存机制？" class="headerlink" title="56. 谈一谈浏览器的缓存机制？"></a>56. 谈一谈浏览器的缓存机制？</h2><p>浏览器的缓存机制指的是浏览器能够在一定时间内保存接收到的web资源的副本，当在有效事件内，如果浏览器再次发起相同请求，则直接从缓存中获取数据，不必再向服务器端请求。有效的缓解了服务器端压力以及加快了性能 </p>
<p> <strong>缓存机制可以分为强缓存和协商缓存。</strong></p>
<h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>在缓存有效时间内，可以直接从缓存中获取资源，不必向服务器端发起请求。</p>
<p>强缓存有效时间可以通过设置http头部中的<strong>expries</strong>和<strong>cache-control</strong>来设置。</p>
<h4 id="expries"><a href="#expries" class="headerlink" title="expries"></a>expries</h4><p>是http1.0中的属性，它通过设置服务器端绝对时间来控制缓存的有效时间，但它的缺点是浏览器端和服务器端可能时间不一致，这就导致了缓存有效时间的误差。</p>
<h4 id="cache-control"><a href="#cache-control" class="headerlink" title="cache-control"></a>cache-control</h4><p>可以通过http1.1中的cache-control来控制，它提供了很多不同的控制信息</p>
<ol>
<li>max-age用来指定缓存有效最大时间，这是一个相对时间，相比于第一次浏览器端请求，过了一定时间后缓存失效。还有private用来控制缓存只能被客户端获取，不能被代理服务端获取。</li>
<li>no-store表示资源不能被缓存</li>
<li>no-cache表示可以被缓存但是会立即失效，每次都要向服务器端发起请求。</li>
</ol>
<p><strong>cache-control的优先级大于expries。</strong> </p>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>策略是浏览器首先向服务器端发送请求，若请求内容和条件自上次请求以来没有发生修改则返回304状态码，如果发生了修改则返回最新修改的资源。</p>
<p>协商缓存也可以通过<strong>两种方式</strong>来设置</p>
<h4 id="last-modify"><a href="#last-modify" class="headerlink" title="last-modify"></a>last-modify</h4><p>第一个是通过设置响应头中的last-modify属性，返回了资源最后一次修改时间，当浏览器再次发起请求时请求头中会带有if-modify-since属性，属性值即为last-modify的值，服务器将获取到的这个头部值与最后一次修改资源的时间进行比较，若发生修改则返回新的资源，若没有修改则告知浏览器使用缓存中的内容。</p>
<p>但这个方式有缺陷就是last-modify的值只能精确到秒级，如果某些资源在一秒之内修改多次，那么文件发生了修改而last-modify没有发生改变。</p>
<h4 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h4><p>因此第二种方式是通过设置响应头中的ETag值，它保存了资源的唯一标识符，当资源发生修改时，ETag也会发生改变。</p>
<p>当浏览器端向服务器端发起请求时，会在请求头中添加if-none-match头部，值为返回的ETag值，服务器端会根据这个值与对应文件的ETag值进行对比判断是否发生了修改。</p>
<p><strong>ETag的优先级会高于last-modify。</strong> </p>
<p> 强缓存和协商缓存都是当缓存命中时直接使用缓存文件，区别是<strong>协商缓存需要先向服务器端发起一次请求</strong>。</p>
<p>当强缓存命中时会直接使用缓存资源，若未命中则向服务器端发起请求</p>
<p>使用协商缓存，若协商缓存命中则告知浏览器使用缓存资源，若未命中则将最新修改过后的资源返回给浏览器端。</p>
<h2 id="57-Ajax-解决浏览器缓存问题？"><a href="#57-Ajax-解决浏览器缓存问题？" class="headerlink" title="57. Ajax 解决浏览器缓存问题？"></a>57. Ajax 解决浏览器缓存问题？</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>ajax能提高页面载入的速度主要的原因是ajax能实现局部刷新，通过局部刷新机制减少了重复数据的载入，也就是说在载入数据的同时将数据缓存到内存中，一旦数据被加载其中，<strong>只要没有刷新页面，这些数据就会一直被缓存在内存中</strong>，当我们提交 的URL与历史的URL一致时，就不需要提交给服务器，也就是不需要从服务器上面去获取数据。那么，我们得到还是最开始缓存在浏览器中的数据。虽然降低了服务器的负载提高了用户的体验，但是我们不能获取最新的数据。<strong>为了保证我们读取的信息都是最新的，我们就需要禁止他的缓存功能。</strong></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li>在ajax发送请求前加上 anyAjaxObj.setRequestHeader(“If-Modified-Since”,”0”)。<ol>
<li>原理：<strong>If-Modified-Since:0</strong> 故意让缓存过期</li>
</ol>
</li>
<li>在ajax发送请求前加上 anyAjaxObj.setRequestHeader(“Cache-Control”,”no-cache”)。 <ol>
<li>原理：直接禁用缓存机制</li>
</ol>
</li>
<li>在URL后面加上一个随机数： “fresh=” + Math.random();。 <ol>
<li>原理：<strong>强行让每次的请求地址不同</strong></li>
</ol>
</li>
<li>在URL后面加上时间搓：”nowtime=” + new Date().getTime();。<ol>
<li>原理：<strong>强行让每次的请求地址不同</strong></li>
</ol>
</li>
<li>如果是使用jQuery，直接这样就可以了$.ajaxSetup({cache:false})。<ol>
<li>原理：不设置ajax缓存</li>
</ol>
</li>
</ol>
<h2 id="58-同步和异步的区别？"><a href="#58-同步和异步的区别？" class="headerlink" title="58. 同步和异步的区别？"></a>58. 同步和异步的区别？</h2><p>同步指的是代码自上而下按顺序执行，并且等待当前代码返回值或消息之后再继续执行下一条语句，此时程序是处于<strong>阻塞状态</strong>的，只有当前代码返回值后才能继续向下执行。 </p>
<p>异步指的是代码不会按照同步的方式等待当前向系统请求后返回消息之后再向下执行，它会在代码请求的时候直接执行之后的语句，不会等待消息的返回，<strong>不会造成程序阻塞</strong>。等到消息返回后再处理之前异步的程序。</p>
<h2 id="59-什么是浏览器的同源政策？"><a href="#59-什么是浏览器的同源政策？" class="headerlink" title="59. 什么是浏览器的同源政策？"></a>59. 什么是浏览器的同源政策？</h2><p>同源政策指的是<strong>协议、域名以及端口号</strong>任意一个不相同则为非同源，非同源之间不能通过js获取到其他网站的cookies、localstorage等，以及不能通过js操作其他网站的DOM，并且不能通过ajax进行跨域请求。 </p>
<p>同源政策保证了用户信息的安全，但它不限制浏览器，对于img，script等html元素不会进行同源政策限制。（跨域JSONP原理）因为这些操作不会通过响应结果而带来安全性的问题。</p>
<h2 id="60-如何解决跨域问题？"><a href="#60-如何解决跨域问题？" class="headerlink" title="60. 如何解决跨域问题？"></a>60. 如何解决跨域问题？</h2><ol>
<li>JSONP方式来解决跨域请求，事先定义一个回调函数，然后通过动态创建script标签的方式并添加src属性，属性值为非同源服务器端链接。在服务器端接收到传递过来的函数名和参数信息，进行处理最终向浏览器端传递调用函数的js代码，该js代码是定义好的全局函数的调用因此会立即执行。 </li>
<li>CORS跨域请求，目前浏览器端都会支持该跨域请求，只需在服务器端的头部设置<strong>Access-Control-Allow-Origin</strong>，值为允许访问该服务器的非同源网站，若允许所有非同源网站的话，值设为*。 </li>
<li>websocket协议，该协议没有同源政策。</li>
</ol>
<h2 id="61-服务器代理转发时，该如何处理-cookie？"><a href="#61-服务器代理转发时，该如何处理-cookie？" class="headerlink" title="61. 服务器代理转发时，该如何处理 cookie？"></a>61. 服务器代理转发时，该如何处理 cookie？</h2><p><a href="https://blog.csdn.net/robertzhouxh/article/details/11568031" target="_blank" rel="noopener">https://blog.csdn.net/robertzhouxh/article/details/11568031</a></p>
<h2 id="62-简单谈一下-cookie-？"><a href="#62-简单谈一下-cookie-？" class="headerlink" title="62. 简单谈一下 cookie ？"></a>62. 简单谈一下 cookie ？</h2><p>我理解的是cookie是服务器端创建的用于<strong>维护会话状态信息的数据</strong>，当客户端向服务器发起请求时，服务器端创建cookie并且将sessionid储存于cookies中发送给客户端，等到之后每次客户端向服务器端发起请求时，都会携带cookies用于服务器进行验证，用户是否为登录状态。cookies<strong>不能用于跨域请求</strong>。 </p>
<p>服务器端可以使用<strong>set-cookies</strong>来设置cookies信息，其中expries用于设置cookies过期时间，<strong>httponly</strong>用于禁止js脚本获取到cookies（CSRF的一种防范），只能被服务器访问。除此之外还有domain、path、secure。</p>
<h2 id="63-模块化开发怎么做？"><a href="#63-模块化开发怎么做？" class="headerlink" title="63. 模块化开发怎么做？"></a>63. 模块化开发怎么做？</h2><p>对于模块化开发的理解是，不同模块实现了不同功能的一组方法，随着程序越来越复杂，模块化开发越来越重要。减少了维护的成本，提升了效率 。</p>
<h2 id="64-js-的几种模块规范？"><a href="#64-js-的几种模块规范？" class="headerlink" title="64. js 的几种模块规范？"></a>64. js 的几种模块规范？</h2><ol>
<li>commonJS：主要应用于服务器端，通过module.exports将模块进行导出，暴露出模块接口，通过require引入模块，实现模块的导入。commonJS是同步执行的，因为涉及到的文件方法缓存在本地磁盘中因此读取时不会发生阻碍，同步执行不会产生代码的拥堵现象。 <ol>
<li>如果<code>module.exports</code>是基本数据类型，和语言本身一样属于复制，在另一个模块中可以对该模块输出的变量重新赋值，并且不会影响其他模块的变量值。</li>
<li>对于复杂的数据类型，例如<code>Array</code>，<code>Object</code>属于浅拷贝，即同时指向一个内存空间，因此对一个模块的值的改变可以影响另一个模块。</li>
<li>当使用<code>require</code>命令加载同一个模块时，不会再执行该模块，而是取到缓存之中的值，也就是说，<code>CommonJS</code>模块无论加载多少次，都会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存/该模块输出为对象且改变该模块的输出中的属性值</li>
<li>循环加载：<code>CommonJS</code>属于加载时执行，即脚本代码在<code>require</code>时候就会全部执行，一旦出现某个模块被循环加载，只输出(此处的输出代表只在另一个模块中导入循环加载模块的已经执行的已输出内容，即exports中的变量)已经执行的部分，未执行的部分不输出</li>
</ol>
</li>
<li>AMD：如果在浏览器端采用<code>CommonJS</code>的模块规范，则会一直等待，直到模块加载完毕。这样就会导致浏览器处于’假死’状态。故浏览器端的模块，不能采用’同步加载’，只能采用’异步加载’。<ol>
<li><code>Asynchronous Module Definition（AMD）</code>：异步模块定义</li>
<li><code>AMD</code>使用时需要引入第三方的库文件：<code>RequireJS</code></li>
<li>在浏览器端模块化开发</li>
<li>在<code>RequireJS</code>推广过程中对模块定义的规范化产出</li>
<li>推崇依赖前置：<strong>在定义模块的时候就要声明其依赖的模块，并且会立即加载其依赖的模块。</strong></li>
<li>对于依赖的模块，<code>AMD</code>是提前执行，不过<code>RequireJS</code>从<code>2.0</code>开始，也改成可以延迟执行。</li>
<li>适合在浏览器环境中异步加载模块，可以并行加载多个模块</li>
<li>提高了开发成本，并且不能按需加载，而是必须提前加载所有的依赖。</li>
<li><code>AMD</code>支持<code>CMD</code>写法，在写时需要引入<code>SeaJS</code>库文件。但更推荐是依赖前置。</li>
<li><code>AMD</code> 的<code>API</code>默认是一个当多个用，<code>CMD</code>的<code>API</code>严格区分，推崇职责单一。比如<code>AMD</code>里，<code>require</code>分全局<code>require</code>和局部<code>require</code>，都叫 <code>require</code>。<code>CMD</code>里，没有全局<code>require</code>，而是根据模块系统的完备性，提供<code>seajs.use</code>来实现模块系统的加载启动。CMD里，每个API都简单纯粹。</li>
</ol>
</li>
<li>CMD：通用模块定义。它解决的问题和AMD规范是一样的，只不过在模块定义方式和模块加载时机上不同，CMD也需要额外的引入第三方的库文件，<code>SeaJS</code><ol>
<li><code>CMD</code>是<code>SeaJS</code>在推广过程中对模块定义的规范化产出</li>
<li>推崇依赖就近，只有在用到某一模块的时候才会按需加载。</li>
<li>延迟执行</li>
<li><code>CMD</code>的<code>API</code>严格区分，推崇职责单一</li>
</ol>
</li>
<li>ES6模块规范：使用import和export方式来输出和导入模块。 <ol>
<li>ES6模块中的值属于动态只读引用，即不能在引用时改变模块的导出值。</li>
<li>对于只读来说，即不允许修改引入变量的值，import的变量是只读的，不论是基本数据类型还是复杂数据类型。当模块遇到import命令时，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。</li>
<li>对于动态来说，原始值发生变化，import加载的值也会发生变化。不论是基本数据类型还是复杂数据类型。</li>
<li>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量</li>
<li><code>CommonJS</code>和<code>AMD</code>都只能在运行时确定模块之间的依赖关系。在代码1中，其实质是整体加载<code>fs</code>模块（即加载<code>fs</code>模块的全部方法），生成一个对象导出，即<code>_fs</code>。然后再获取其中的<code>stat,exists,reafFile</code>方法使用。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。</li>
<li><code>ES6</code>模块化是编译时加载。由于<code>ES6</code>导出的不是对象，而是通过<code>export</code>命令显式指定输出的代码，再通过<code>import</code>命令输入。在代码2中，其实质是从<code>fs</code>模块中加载三个方法，不需要加载其中的所有方法，这种加载称为“编译时加载”或者静态加载，即 ES6 可以在编译时就完成模块加载。效率要比 CommonJS 模块的加载方式高。当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。</li>
</ol>
</li>
</ol>
<h2 id="65-AMD和-CMD-规范的区别？"><a href="#65-AMD和-CMD-规范的区别？" class="headerlink" title="65. AMD和 CMD 规范的区别？"></a>65. AMD和 CMD 规范的区别？</h2><ol>
<li><p>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.</p>
</li>
<li><p>AMD 推崇依赖前置，CMD 推崇依赖就近。看代码</p>
<ol>
<li><pre><code class="js"><span class="comment">// AMD </span>
define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>{  <span class="comment">// 依赖必须一开始就写好</span>
    a.doSomething()
    <span class="comment">// ...</span>
    b.doSomething()
    <span class="comment">// ...</span>
}) 

<span class="comment">// CMD</span>
define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>{   
    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)   
    a.doSomething()    
    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>)   
    b.doSomething()    
    ... 
})

&lt;!--￼<span class="number">13</span>--&gt;
&lt;div&gt;我是文本&lt;br/&gt;&lt;<span class="regexp">/div&gt;</span>
<span class="regexp"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> innerHTML内部html：我是文本  </span><br><span class="line"></span><br><span class="line"> outerHTML外部html：&lt;div&gt;我是文本 &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">## 73. .call() 和 .apply() 的区别？ </span><br><span class="line"></span><br><span class="line"> 两者作用相同，只是传入的**参数形式**不一样，call第一个参数为this指向对象，第二个参数之后为依次向函数内部传入的参数。apply第一个参数为this指向的对象，第二个参数为向函数传入的参数数组。</span><br><span class="line"></span><br><span class="line">## 74. JavaScript类数组对象的定义？ </span><br><span class="line"></span><br><span class="line">类数组指的是拥有数组的length属性和索引下标，类数组与数组类似，但不能使用数组的方法。 </span><br><span class="line"></span><br><span class="line"> 可以通过以下几种方式来使**类数组拥有数组的方法**： </span><br><span class="line"></span><br><span class="line">1. 通过call调用数组的slice方法来实现转换： </span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;js</span><br><span class="line">   Array.prototype.slice.call(arrayLike);</span><br></pre></td></tr></table></figure></span></code></pre>
</li>
</ol>
</li>
<li><p>通过call调用数组的splice方法来实现转换： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.prototype.splice.call(arrayLike, 0);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过apply调用函数的concat方法来实现转换： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.prototype.concat.apply([], arrayLike);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过Array.from来实现转换： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.from(arrayLike);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="75-数组和对象有哪些原生方法，列举一下？"><a href="#75-数组和对象有哪些原生方法，列举一下？" class="headerlink" title="75. 数组和对象有哪些原生方法，列举一下？"></a>75. 数组和对象有哪些原生方法，列举一下？</h2><ol>
<li>数组和字符串的转换方法：toString()、join() </li>
<li>数组尾部操作方法：push()，pop()，push参数可以为多个 </li>
<li>数组头部操作方法：shift()，unshift() </li>
<li>数组重排序的方法: reverser() sort() </li>
<li>数组连接的方法：concat() 返回的是拼接好的数组，不影响原数组 </li>
<li>数组截取方法：slice(start, end) 用于截取数组中的一部分进行返回 不影响原数组 </li>
<li>数组删除方法：splice(start, number) 用于删除数组中的指定项 返回被删除的数组，影响原数组 </li>
<li>every() some() forEach() filter() map() </li>
<li>reduce()</li>
</ol>
<h2 id="76-数组的-fill-方法？"><a href="#76-数组的-fill-方法？" class="headerlink" title="76. 数组的 fill 方法？"></a>76. 数组的 fill 方法？</h2><p>数组的fill方法可以用一个固定值填充数组从起始索引到终止索引的全部元素。fill接收三个参数，固定值，起始索引，终止索引。其中起始索引和终止索引可省略，默认为0和this对象的length值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.fill(value, startIndex, endIndex)</span><br></pre></td></tr></table></figure>

<h2 id="77-…-的长度？"><a href="#77-…-的长度？" class="headerlink" title="77. […] 的长度？"></a>77. […] 的长度？</h2><p>对应数组的长度</p>
<h2 id="78-JavaScript-中的作用域与变量声明提升？"><a href="#78-JavaScript-中的作用域与变量声明提升？" class="headerlink" title="78. JavaScript 中的作用域与变量声明提升？"></a>78. JavaScript 中的作用域与变量声明提升？</h2><p>变量声明提升是指对变量的声明提升到了当前作用域的顶部。这是js中的作用域相关，当代码在执行前会有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象，当访问到一个变量时会到当前作用域的执行上下文中去查找变量对象，作用域的首部就是当前执行上下文中的变量对象，包括函数的形参、所有函数和声明的变量。</p>
<h2 id="79-如何编写高性能的-Javascript-？"><a href="#79-如何编写高性能的-Javascript-？" class="headerlink" title="79. 如何编写高性能的 Javascript ？"></a>79. 如何编写高性能的 Javascript ？</h2><ol>
<li>遵循严格模式：”use strict”;</li>
<li>将js脚本放在页面底部，加快渲染页面;</li>
<li>将js脚本成组打包，减少请求;</li>
<li>使用非阻塞方式下载js脚本;</li>
<li>尽量使用局部变量来保存全局变量;</li>
<li>尽量减少使用闭包;</li>
<li>使用window对象属性方法时省略window;</li>
<li>尽量减少对象成员嵌套;</li>
<li>缓存DOM节点的访问;</li>
<li>通过避免使用eval和function()构造器;</li>
<li>给setTimeout()和setInterval()传递函数而不是字符作为参数;</li>
<li>尽量使用直接量创建对象和数组;</li>
<li>最小化重绘(repaint)和回流(reflow);</li>
</ol>
<h2 id="80-简单介绍一下-V8-引擎的垃圾回收机制"><a href="#80-简单介绍一下-V8-引擎的垃圾回收机制" class="headerlink" title="80. 简单介绍一下 V8 引擎的垃圾回收机制"></a>80. 简单介绍一下 V8 引擎的垃圾回收机制</h2><ol>
<li>标记清除：定期对带有标记的变量进行清除，首先会将全局中所有变量进行标记，然后将被一些对象引用或者即将被引用的变量清除标记，剩下的就是等到垃圾回收机制销毁的变量。 </li>
<li>引用计数：判断一个变量是否有对象引用它，如果没有对象引用就清除这个变量。</li>
</ol>
<h2 id="81-哪些操作会造成内存泄漏？"><a href="#81-哪些操作会造成内存泄漏？" class="headerlink" title="81. 哪些操作会造成内存泄漏？"></a>81. 哪些操作会造成内存泄漏？</h2><p>内存泄漏指的是，系统中的内存空间不断的缩小，这是因为不断的有变量占用内存空间得不到释放。 </p>
<ol>
<li>未声明的局部变量，会产生全局变量，使这个变量一直存在于内存中无法被回收。 </li>
<li>闭包：当不合理的使用闭包时，会造成一些变量一直留在函数中无法得到释放。 </li>
<li>我们获取到一个DOM元素的引用，而当这个元素被删除使，一直保留着这个元素的引用，因此一直占用内存空间得不到释放。 </li>
<li>我们若设置了定时器而没有清除它，如果定时器的循环函数一直有对外部变量的引用的话，那么这个变量会一直保存在内存中得不到释放。</li>
</ol>
<h2 id="82-需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？"><a href="#82-需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？" class="headerlink" title="82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？"></a>82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？</h2><p>popStatus + ajax。</p>
<h2 id="83-如何判断当前脚本运行在浏览器还是-node-环境中？（阿里）"><a href="#83-如何判断当前脚本运行在浏览器还是-node-环境中？（阿里）" class="headerlink" title="83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）"></a>83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）</h2><p>this === ‘window’ ? ‘brower’ : ‘node’;</p>
<p>若全局global对象为window则在浏览器运行否则在node环境</p>
<h2 id="84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别？浏览器会如何解析它们？"><a href="#84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别？浏览器会如何解析它们？" class="headerlink" title="84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器会如何解析它们？"></a>84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器会如何解析它们？</h2><p>如果说放在body的封闭之前，将会阻塞其他资源的加载。<br>如果放在body封闭之后，不会影响body内元素的加载。</p>
<p>body之前的任何位置都会解析进head里边，之后的都会解析进body里边。</p>
<h2 id="85-移动端的点击事件的有延迟，时间是多久，为什么会有？-怎么解决这个延时？"><a href="#85-移动端的点击事件的有延迟，时间是多久，为什么会有？-怎么解决这个延时？" class="headerlink" title="85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？"></a>85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？</h2><p>移动端的点击事件有<strong>300ms的延迟</strong>，这是因为<strong>移动端有双击放大功能</strong>，有300ms的延迟是为了等待是否有第二次点击来进行屏幕放大，若300ms内没有第二次点击再认为是点击事件。解决：可以再view标签内设置禁止缩放属性，也可以设置屏幕为理想尺寸大小，同时还可以使用fastClick库。 </p>
<p>点击穿透：是因为移动端的点击事件有300ms的延迟，touch之后300ms内响应click，这样可能会误点到元素底部的某个元素。解决方案：只用touch，若只用click的话每次点击都会有延迟现象。</p>
<h2 id="86-什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？"><a href="#86-什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？" class="headerlink" title="86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？"></a>86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？</h2><p>前端路由指的是不同路由对应的不同功能的页面交给前端来做，之前是服务器通过url的不同来返回不同的页面。 </p>
<p>一般单页面应用时候适合前端路由，大部分页面结构不改变，只改变部分结构。 </p>
<p>前端路由优点：不必向服务器端请求，缓解了服务器端压力，用户体验好，页面流畅。 </p>
<p>前端路由缺点：单页面应用无法记住之前滚动过得位置，也无法在前进后退过程中记住滚动的位置。 </p>
<p>前端路由有两种实现方式，一种是hash，另一种是history.pushState。pushState为浏览器添加一条历史记录，添加完后可以使用history.state获取。并且在history模式下，前端的url必须与向后端传递的url保持一致。</p>
<h2 id="87-如何测试前端代码么？-知道-BDD-TDD-Unit-Test-么？-知道怎么测试你的前端工程么-mocha-sinon-jasmin-qUnit-？"><a href="#87-如何测试前端代码么？-知道-BDD-TDD-Unit-Test-么？-知道怎么测试你的前端工程么-mocha-sinon-jasmin-qUnit-？" class="headerlink" title="87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)？"></a>87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)？</h2><p><a href="https://juejin.im/post/6844903889397874696" target="_blank" rel="noopener">https://juejin.im/post/6844903889397874696</a></p>
<h2 id="88-检测浏览器版本版本有哪些方式？"><a href="#88-检测浏览器版本版本有哪些方式？" class="headerlink" title="88. 检测浏览器版本版本有哪些方式？"></a>88. 检测浏览器版本版本有哪些方式？</h2><p> 第一种是window.navigator.userAgent方式来获取，但这种方式不准确因为可能会被改写。 </p>
<p> 第二种是功能检测，也是每个浏览器独有的特性来检测，例如ie下的ActiveXObject。</p>
<h2 id="89-什么是-Polyfill-？"><a href="#89-什么是-Polyfill-？" class="headerlink" title="89. 什么是 Polyfill ？"></a>89. 什么是 Polyfill ？</h2><p>Polyfill用于实现浏览器并不支持的原生API代码。</p>
<h2 id="90-使用-JS-实现获取文件扩展名？"><a href="#90-使用-JS-实现获取文件扩展名？" class="headerlink" title="90. 使用 JS 实现获取文件扩展名？"></a>90. 使用 JS 实现获取文件扩展名？</h2><ol>
<li>利用索引下标来截取<strong>stringObject.lastIndexOf(substr)</strong> - 查找返回substr字符（串）在string里面最后一次出现的下标，找不到的话返回-1<ol>
<li>stringObject.substr(startindex[,length]) - 截取字符串，若无length参数时，直接截取到字符串末尾</li>
<li>stringObject.substring(startIndex,[stopIndex]) - 截取字符串 （startIndex:开始下标 stop 可缺省 表示要结束的下标[该下标的字符不会被截取！]）</li>
</ol>
</li>
<li><strong>stringObject.split(sep)</strong> - 分割字符串,将字符串以指定的分隔符分割为一个数组</li>
</ol>
<h2 id="91-介绍一下-js-的节流与防抖？"><a href="#91-介绍一下-js-的节流与防抖？" class="headerlink" title="91. 介绍一下 js 的节流与防抖？"></a>91. 介绍一下 js 的节流与防抖？</h2><p>在页面中如果持续触发一个事件会对性能不利，例如页面滚动、鼠标移动等若持续触发会造成事件冗余，也为页面加载带来负担。</p>
<ol>
<li><p>持续触发事件时，保证一定时间段内只调用一次事件处理函数。节流通俗解释就比如我们水龙头放水，阀门一打开，水哗哗的往下流，秉着勤俭节约的优良传统美德，我们要把水龙头关小点，最好是如我们心意按照一定规律在某个时间间隔内一滴一滴的往下滴。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prev = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">if</span> (now - prev &gt;= delay) &#123;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">      prev = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, throttle(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timeout !== <span class="literal">null</span>) </span><br><span class="line">                clearTimeout(timeout);</span><br><span class="line">        timeout = setTimeout(fn, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滚动事件</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, debounce(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="92-Object-is-与原来的比较操作符-“-”、“-”-的区别？"><a href="#92-Object-is-与原来的比较操作符-“-”、“-”-的区别？" class="headerlink" title="92. Object.is() 与原来的比较操作符 “===”、“==” 的区别？"></a>92. Object.is() 与原来的比较操作符 “===”、“==” 的区别？</h2><p> ==表示在比较前可以进行类型转换，===表示严格比较，若类型不同会直接返回false </p>
<p> Object.is()与===类似，但处理了一些特殊情况，比如+0和-0不再相对，NaN和自身是相等的。</p>
<h2 id="93-escape-encodeURI-encodeURIComponent-有什么区别？"><a href="#93-escape-encodeURI-encodeURIComponent-有什么区别？" class="headerlink" title="93. escape,encodeURI,encodeURIComponent 有什么区别？"></a>93. escape,encodeURI,encodeURIComponent 有什么区别？</h2><ol>
<li><p>escape和它们不是同一类</p>
<p>简单来说，escape是对字符串(string)进行编码(而另外两种是对URL)，作用是让它们在所有电脑上可读。<br>编码之后的效果是%XX或者%uXXXX这种形式。<br>其中 ASCII字母  数字  @*/+   这几个字符不会被编码，其余的都会。<br>最关键的是，当你需要对URL编码时，请忘记这个方法，这个方法是针对字符串使用的，不适用于URL。</p>
</li>
<li><p>最常用的encodeURI和encodeURIComponent</p>
<p>对URL编码是常见的事，所以这两个方法应该是实际中要特别注意的。</p>
<p>它们都是编码URL，唯一区别就是编码的字符范围，其中</p>
<p>encodeURI方法不会对下列字符编码  <strong>ASCII字母  数字  ~!@#$&amp;*()=:/,;?+’</strong></p>
<p>encodeURIComponent方法不会对下列字符编码 <strong>ASCII字母  数字  ~!*()’</strong></p>
<p>所以encodeURIComponent比encodeURI编码的范围更大。</p>
<p>实际例子来说，encodeURIComponent会把 http://  编码成  http%3A%2F%2F 而encodeURI却不会。</p>
</li>
</ol>
<ol start="3">
<li><p>什么场合应该用什么方法</p>
<p>1、如果只是编码字符串，不和URL有半毛钱关系，那么用escape。</p>
<p>2、如果你需要编码整个URL，然后需要使用这个URL，那么用encodeURI。</p>
<p>3、当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。</p>
</li>
</ol>
<h2 id="94-Unicode-和-UTF-8-之间的关系？"><a href="#94-Unicode-和-UTF-8-之间的关系？" class="headerlink" title="94. Unicode 和 UTF-8 之间的关系？"></a>94. Unicode 和 UTF-8 之间的关系？</h2><p>scii、latin、gbk、Big5、unicode都是字符集，用字节来表示字符，除了ascii是1个字节表示字符外，<br>其它都是使用2个字节表示字符。</p>
<p>为了统一，国际标准化组织 ISO，制定unicode用2个字节来统一全世界所有字符。</p>
<p>美国人不同意，因为unicode是2个字节，相比他之前的scii的1个字节，增加了1倍的储存空间。于是国际标准化组织提出了一种方案，用UTF-8对unicode进行压缩，由2个字节压缩为1个字节。中文转换以后 3 个字节（中文比较特殊，压缩后反而占内存变3个字节，占空间增大），UTF-8 转换过程中会最终生成的是  1-6 个字节不等的数据</p>
<p><strong>所以说UTF-8是Unicode的压缩，也就是编码。</strong></p>
<p><strong>unicode码是字符串类型，只存在内存中</strong></p>
<p>传输（网络）或者存储（硬盘）必须进行编码，如UTF-8 / UTF-16 / UTF-32 / GBK / GB2312(字节，是二进制数据)</p>
<h2 id="95-js-的事件循环是什么？"><a href="#95-js-的事件循环是什么？" class="headerlink" title="95. js 的事件循环是什么？"></a>95. js 的事件循环是什么？</h2><p><a href="https://juejin.im/post/6844903653396971533" target="_blank" rel="noopener">https://juejin.im/post/6844903653396971533</a></p>
<h2 id="96-js-中的深浅拷贝实现？"><a href="#96-js-中的深浅拷贝实现？" class="headerlink" title="96. js 中的深浅拷贝实现？"></a>96. js 中的深浅拷贝实现？</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//浅拷贝的实现 只拷贝对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCope</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!object || <span class="keyword">typeof</span> object !== <span class="string">'object'</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//根据object的类型进行判断新建一个数组还是对象</span></span><br><span class="line">    <span class="keyword">let</span> newObject = <span class="built_in">Array</span>.isArray(object) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> object)&#123;</span><br><span class="line">        <span class="keyword">if</span>(object.hasOwnProperty(k))&#123;</span><br><span class="line">            newObject[k] = object[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//深拷贝的实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCope</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!object || <span class="keyword">typeof</span> object !== <span class="string">'object'</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> newObject = <span class="built_in">Array</span>.isArray(object) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> object)&#123;</span><br><span class="line">        <span class="keyword">if</span>(object.hasOwnProperty(k))&#123;</span><br><span class="line">            newObject[k] = </span><br><span class="line">                <span class="keyword">typeof</span> object[k] === <span class="string">'object'</span> ? deepCope(object[k]) : object[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="97-手写-call、apply-及-bind-函数"><a href="#97-手写-call、apply-及-bind-函数" class="headerlink" title="97. 手写 call、apply 及 bind 函数"></a>97. 手写 call、apply 及 bind 函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手写call</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'type error'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//获取参数</span></span><br><span class="line">    <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>),</span><br><span class="line">        result = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//判断context是否传入 若没传入则设为window</span></span><br><span class="line">    context = context || <span class="built_in">window</span>;</span><br><span class="line">    <span class="comment">//将调用函数设为对象的方法</span></span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line">    result = context.fn(...args);</span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手写apply</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'type error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">    context = context || <span class="built_in">window</span>;</span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>[<span class="number">1</span>])&#123;</span><br><span class="line">        result = context.fn(...arguments[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = context.fn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手写bind</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params">newObject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'type error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> args = [...arguments].slice(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> that.apply(newObject, args.concat([...arguments]))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="98-函数柯里化的实现"><a href="#98-函数柯里化的实现" class="headerlink" title="98. 函数柯里化的实现"></a>98. 函数柯里化的实现</h2><p> 函数柯里化是指将一种使用多个参数的函数转换为一系列单个参数函数的调用。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;手写函数柯里化</span><br><span class="line">function curry(fn, args)&#123;</span><br><span class="line">    &#x2F;&#x2F;获取函数需要的总参数长度</span><br><span class="line">    let leng &#x3D; fn.length;</span><br><span class="line">    args &#x3D; args || [];</span><br><span class="line">    return function()&#123;</span><br><span class="line">        let subargs &#x3D; args.slice(0);</span><br><span class="line">        for( let i &#x3D; 0; i &lt; arguments.length; i++)&#123;</span><br><span class="line">            subargs.push(arguments[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;判断此时subargs是否已经满足函数需要的参数长度需求</span><br><span class="line">        if(subargs.length &gt;&#x3D; leng)&#123;</span><br><span class="line">            return fn.apply(this, subargs)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return curry.call(this, fn, subargs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function fn(a,b,c)&#123;</span><br><span class="line">    return a+b+c;</span><br><span class="line">&#125;</span><br><span class="line">var newCurry &#x3D; curry(fn, 1);</span><br><span class="line">newCurry(2);</span><br><span class="line">newCurry(3);</span><br></pre></td></tr></table></figure>

<h2 id="99-为什么-0-1-0-2-0-3？如何解决这个问题？"><a href="#99-为什么-0-1-0-2-0-3？如何解决这个问题？" class="headerlink" title="99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？"></a>99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？</h2><p> 在计算机中，运算是转换为二进制再进行计算的，js是以64位双精度格式来进行计算的，只有53位有效数字，之后的数字会被截掉，因此产生了误差。 </p>
<p>所以解决0.1 + 0.2 != 0.3的办法，用原生提供的方式就是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>((<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">10</span>)) === <span class="number">0.3</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="100-原码、反码和补码的介绍"><a href="#100-原码、反码和补码的介绍" class="headerlink" title="100. 原码、反码和补码的介绍"></a>100. 原码、反码和补码的介绍</h2><p>原码是计算机中对数字的二进制的定点表示方法，首位为符号位，其余为数值位。 </p>
<p>正数的反码和补码都和原码一样，负数的反码首位为1，数值位为原码取反，补码为反码加1</p>
<h2 id="101-toPrecision-和-toFixed-和-Math-round-的区别？"><a href="#101-toPrecision-和-toFixed-和-Math-round-的区别？" class="headerlink" title="101. toPrecision 和 toFixed 和 Math.round 的区别？"></a>101. toPrecision 和 toFixed 和 Math.round 的区别？</h2><p> toPrecision用于处理精度，从左至右第一个不为0的数开始数起。 </p>
<p> toFixed用于处理小数点后精度的个数，从小数点处开始数起，末尾精度四舍五入计算。结果为字符型。 </p>
<h2 id="108-什么是-MVVM？比之-MVC-有什么区别？什么又是-MVP-？"><a href="#108-什么是-MVVM？比之-MVC-有什么区别？什么又是-MVP-？" class="headerlink" title="108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？"></a>108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？</h2><p>MVC是分离Model、View和Controller的交互模式，Controller主要用于控制用户与应用的响应操作，当页面节点发生变化时，会通过监听函数执行操作，并对Model进行更改，然后再去通知View层更新。 </p>
<p>MVP和MVC的不同是MVP使用了presenter，MVC应用的是观察者模式，来实现当Model层发生变化时来更新View，因为View没有暴露给Controller接口，因此不能控制View的更新，这样View和Model层耦合在一起，而MVP实现了两者的解耦，presenter将View和Model绑定在一起实现同步更新，而MVVM将MVP的同步更新给自动化了。</p>
<p>MVVM中指的是Model、View和ViewMode，用来实现视图与数据分离的状态，View是指视图区域，用于页面渲染，展示数据。Model用于存储数据和数据的逻辑交互功能。ViewModel属于连接两者的纽带，当数据变化时，ViewModel监听到数据变化响应给View更新视图，当页面节点变化时，ViewModel响应给Model进行数据的更新。利用双向数据绑定同步更新View和Model。 </p>
<h2 id="109-vue-双向数据绑定原理？"><a href="#109-vue-双向数据绑定原理？" class="headerlink" title="109. vue 双向数据绑定原理？"></a>109. vue 双向数据绑定原理？</h2><p> 实现MVVM的双向数据绑定，应用的是数据劫持结合订阅者发布者模式。首先监听者对数据属性进行监听通过Object.defineProperty()来劫持各个属性上的getter和setter，当数据变化时通知给订阅者，并且触发响应的监听回调来更新视图。MVVM作为一个数据接口还会有一个解析器，对每个元素节点的指令进行扫描和解析，并根据模板指令替换数据，进行初始化页面，同时绑定相应的更新函数，订阅数据变化，添加监听数据的订阅者，一旦数据有变化收到通知更新视图，这就实现了数据变化更新视图，视图变化更新数据的双向数据绑定。</p>
<h2 id="110-Object-defineProperty-介绍？"><a href="#110-Object-defineProperty-介绍？" class="headerlink" title="110. Object.defineProperty 介绍？"></a>110. Object.defineProperty 介绍？</h2><p>Obect.defineProperty()方法有三个参数，第一个参数为需要定义属性的对象，第二个参数是需要定义的属性，第三个参数是描述符，属性的描述符有四个属性：value（属性的值）、writable（可读写）、enumerable（可枚举）、configurable（属性是否可配置修改）。</p>
<h2 id="111-使用-Object-defineProperty-来进行数据劫持有什么缺点？"><a href="#111-使用-Object-defineProperty-来进行数据劫持有什么缺点？" class="headerlink" title="111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？"></a>111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？</h2><p>有些对数据的操作用这种方式无法进行数据劫持，比如对数组数据的修改和给对象新增属性。Vue3.0中可用proxy对对象进行代理实现，从而实现数据劫持，但兼容性不好，因为是ES6的语法。</p>
<h2 id="112-什么是-Virtual-DOM？为什么-Virtual-DOM-比原生-DOM-快？"><a href="#112-什么是-Virtual-DOM？为什么-Virtual-DOM-比原生-DOM-快？" class="headerlink" title="112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？"></a>112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？</h2><p>当页面发生更新变化时，原生DOM更新的开销比较大，因此使用JS代码进行生成一个虚拟DOM，当数据发生更新时，会生成新的虚拟DOM，然后和之前的虚拟DOM进行对比，利用<a href="https://juejin.im/post/6844903607913938951" target="_blank" rel="noopener">diff算法</a>比较出两者的差异，然后将两者对应节点的不同结合到原生DOM树上完成更新。 </p>
<p> 使用虚拟DOM可以节约性能，提升操作效率，节省开销。避免使用原生DOM而带来的变化产生的回流与重绘。提升开发时的可维护性。</p>
<h2 id="113-如何比较两个-DOM-树的差异？"><a href="#113-如何比较两个-DOM-树的差异？" class="headerlink" title="113. 如何比较两个 DOM 树的差异？"></a>113. 如何比较两个 DOM 树的差异？</h2><p>利用<a href="https://juejin.im/post/6844903607913938951" target="_blank" rel="noopener">diff算法</a>来比较两个DOM树的差异。两棵DOM树完全比较的时间度为O（n^3），在前端过程中我们一般不跨层级的移动元素，为了将时间度降为最低，比较两棵树的同一层级的节点。首先会对两棵树进行一个深度遍历，并且对每个节点标上序号。当深度遍历一个DOM树的时候，当遍历到一个节点会对比另一个DOM树的节点，如果有差异就保存到一个对象中。</p>
<h2 id="114-什么是-requestAnimationFrame-？"><a href="#114-什么是-requestAnimationFrame-？" class="headerlink" title="114. 什么是 requestAnimationFrame ？"></a>114. 什么是 requestAnimationFrame ？</h2><p>requestAnimationFrame是专门为浏览器解决js执行动画的api，我们知道动画效果是通过一帧一帧连续变化而形成的效果，如果我们用定时器来执行动画的话，会因为定时器属于异步函数而可能在规定时间之后执行，因为js是单线程的，所以异步队列要等同步任务执行完毕后再执行回调函数，这样就不能保证动画的流畅性。这时可以利用requestAnimationFrame来解决，它接收一个参数为动画执行函数，例如 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animation</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span><br><span class="line">    div.style.width = <span class="built_in">parseInt</span>(div.style.width) + <span class="number">1</span> + <span class="string">'px'</span>;</span><br><span class="line">    <span class="keyword">if</span>(div.style.width &lt; <span class="number">200</span>)&#123;</span><br><span class="line">        requestAnimationFrame(animation)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">requestAnimationFrame(animation);</span><br></pre></td></tr></table></figure>

<h2 id="115-谈谈你对-webpack-的看法"><a href="#115-谈谈你对-webpack-的看法" class="headerlink" title="115. 谈谈你对 webpack 的看法"></a>115. 谈谈你对 webpack 的看法</h2><p>使用webpack的主要目的就是为了简化项目依赖的管理，它将所有资源看成是一个模块，将所有逻辑代码看成是一个整体，从打包入口着手，将项目所需的依赖通过loader和plugin进行处理，然后输出一个能通过浏览器解析的js代码。webpack主要有四个核心的概念，分别是entry、output、loader和plugin。 </p>
<p> entry是指项目打包的入口，在这个入口中找寻所有依赖文件。 </p>
<p> output是项目打包的出口，打包成一个兼容性的js代码，默认位置为’./dist’。 </p>
<p> loader属于webpack的编译器，是用于处理非JavaScript文件的打包，在对loader进行配置的时候，test用于规定哪些后缀结尾的文件用于打包，内容为正则表达式，use属性用于表示哪个loader用于对test文件进行预处理，常见的有css-loader、style-loader等。 </p>
<p> plugins插件可以用于更广范围的功能，比如文件的压缩、优化、搭建服务器等功能。要使用一个插件先用npm安装，然后再添加到配置文件中使用。 </p>
<h2 id="116-offsetWidth-offsetHeight-clientWidth-clientHeight-与-scrollWidth-scrollHeight-的区别？"><a href="#116-offsetWidth-offsetHeight-clientWidth-clientHeight-与-scrollWidth-scrollHeight-的区别？" class="headerlink" title="116. offsetWidth/offsetHeight, clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？"></a>116. offsetWidth/offsetHeight, clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？</h2><p>offsetWidth/offsetHeight返回一个只读属性，包含元素的border、padding、content以及scrollbar。 </p>
<p>offsetLeft/offsetTop返回元素距离其最近的含有定位的祖先元素offsetParent的左侧距离和顶部距离。 </p>
<p>clientWidth/clientHeight返回一个只读属性，为元素的内部宽度，content+padding。 </p>
<p>clientLeft/clientTop返回元素顶部边框/左侧边框的宽度。 </p>
<p>scrollWidth/scrollHeight只读，返回元素实际的宽度和高度，包括被卷起的高度/宽度。 </p>
<p> scrollLeft/scrollTop返回元素被卷去的上侧距离/左侧距离。</p>
<h2 id="117-谈一谈你理解的函数式编程？"><a href="#117-谈一谈你理解的函数式编程？" class="headerlink" title="117. 谈一谈你理解的函数式编程？"></a>117. 谈一谈你理解的函数式编程？</h2><p>函数式编程是一种编程规范，主要是通过一系列的函数调用来进行一些页面上内容的实现与操作。</p>
<h2 id="118-异步编程的实现方式？"><a href="#118-异步编程的实现方式？" class="headerlink" title="118. 异步编程的实现方式？"></a>118. 异步编程的实现方式？</h2><p> 异步编程的实现可以分为以下几种： </p>
<ol>
<li>回调函数形式：通过回调函数来实现异步编程，让不同的任务按照顺序执行，前一个执行完毕才会执行下一个，但缺点是当任务量比较大时会产生层层嵌套的回调地狱问题，造成代码冗余复杂，难以维护。 </li>
<li>Promise对象：Promise可以解决回调地狱问题，通过new创建一个promise实例对象，接受一个回调函数作为参数，函数中接收两个状态函数分别为resolve和reject，代表状态由等待状态进入执行成功和执行失败状态。返回的promise对象可通过.then进行链式调用来实现后序的函数操作。 </li>
<li>generator，它可以在函数的执行过程中将执行权转移出去，在函数外部还可以将执行权转移回来。当我们遇到异步函数的时候将执行权转移出去，当异步函数执行完毕之后将执行权转移回来。这样我们在函数内部可以将异步语句以同步的方式来书写。 </li>
<li>async和await：普通函数前加上async可以将函数转化为异步函数，返回promise对象，函数内部执行到await语句时，如果语句返回promise对象则等当前语句执行完毕之后再向下执行。</li>
</ol>
<h2 id="119-Js-动画与-CSS-动画区别及相应实现"><a href="#119-Js-动画与-CSS-动画区别及相应实现" class="headerlink" title="119. Js 动画与 CSS 动画区别及相应实现"></a>119. Js 动画与 CSS 动画区别及相应实现</h2><p> CSS动画较为简单，浏览器对CSS动画有很好的的处理，但不易于控制，不够灵活，且兼容性不够好。 </p>
<p> JS动画可以很好的控制动画的灵活性，并且易于控制，并且可以单帧的进行控制操作，功能强大，但代码量大，可用于大型动画项目，若小动画还是css比较适宜。</p>
<h2 id="120-get-请求传参长度的误区"><a href="#120-get-请求传参长度的误区" class="headerlink" title="120. get 请求传参长度的误区"></a>120. get 请求传参长度的误区</h2><p>其实get请求长度并没有限制参数内容长度的说法，同样post传参也没有长度限制，而是get请求一般是通过将参数加在url地址上，而通过浏览器和服务器对url长度有限制，因此get请求传参长度就会有限制，通常不同的浏览器对url长度限制不同。</p>
<h2 id="121-URL-和-URI-的区别？"><a href="#121-URL-和-URI-的区别？" class="headerlink" title="121. URL 和 URI 的区别？"></a>121. URL 和 URI 的区别？</h2><p> URL是统一资源定位符，URI是统一资源标识符，它是一个抽象的概念，是对资源的一个唯一的标识，不管通过什么方式，只要能对资源进行唯一标识，都可称为URI。URL是URI的一种，它是通过地址来对资源进行唯一标识。URN是统一资源名称，同理它也是URI的一种，它是通过名称来对资源进行统一标识。</p>
<h2 id="122-get-和-post-请求在缓存方面的区别"><a href="#122-get-和-post-请求在缓存方面的区别" class="headerlink" title="122. get 和 post 请求在缓存方面的区别"></a>122. get 和 post 请求在缓存方面的区别</h2><p> get类似于查找的过程，用于获取数据，因此它不用每次都向服务器提交请求，可以使用缓存。 </p>
<p> post不同，它一般是用于增加和修改功能，因此它必须每次提交都要向服务器请求，必须与数据库交互，不能使用缓存。 </p>
<p> 缓存只适用于那些不会向修改和添加服务器端数据的请求，一般get都是查找请求，不会更新数据库，因此get适宜用缓存数据，而post会更新数据库，因此不能利用缓存。</p>
<h2 id="123-图片的懒加载和预加载"><a href="#123-图片的懒加载和预加载" class="headerlink" title="123. 图片的懒加载和预加载"></a>123. 图片的懒加载和预加载</h2><p> 图片的懒加载指的是一个延迟加载的功能，在页面加载的过程中，页面中的所有图片不会一次性全部加载出来，而是当页面滚动到当前位置时图片再加载，这样可以减轻页面加载的压力，使页面更为流畅。 </p>
<p> 图片的预加载指的是在页面加载之前图片就已经加载完毕并保存到本地中，当需要渲染的时候直接从本地获取，节省了图片加载的时间。预加载可利用Image创建一个实例对象，通过为image对象设置src属性来实现图片的预加载。懒加载和预加载都提高了网页的性能，一个是延迟甚至是不加载，一个是提前加载，懒加载对服务器端有一定的缓解压力作用，而预加载增加了服务器端的压力。</p>
<h2 id="124-mouseover-和-mouseenter-的区别？"><a href="#124-mouseover-和-mouseenter-的区别？" class="headerlink" title="124. mouseover 和 mouseenter 的区别？"></a>124. mouseover 和 mouseenter 的区别？</h2><p> 两者的区别是是否支持冒泡，两者功能类似，都是鼠标移动到某个元素上时会触发。mouseenter不支持冒泡，因此当鼠标移动到元素的子元素上时，父元素上可触发mouseover和mouseout事件，但不会触发mouseenter和mouseleave事件。</p>
<h2 id="125-js-拖拽功能的实现"><a href="#125-js-拖拽功能的实现" class="headerlink" title="125. js 拖拽功能的实现"></a>125. js 拖拽功能的实现</h2><p> 涉及到三个事件：mousedown、mousemove、mouseup </p>
<p> 在mousedown事件函数中首先获取鼠标点击时的位置，可通过事件对象来获取，event.clientX和event.clientY，以及被拖拽元素的初始位置，可通过offsetLeft和offsetTop获取，并且创建一个鼠标移动事件mousemove，在这个事件函数中，将鼠标的位置-鼠标的初始位置+元素的初始位置 赋值给元素的位置样式，不断的鼠标移动就会不断的去触发这个事件。然后在创建鼠标抬起事件mouseup，在这个事件函数中取消鼠标摁下事件和鼠标移动事件，清除状态。</p>
<h2 id="126-为什么使用-setTimeout-实现-setInterval？怎么模拟？"><a href="#126-为什么使用-setTimeout-实现-setInterval？怎么模拟？" class="headerlink" title="126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？"></a>126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？</h2><p> setInterval计时器是每通过一定时间去执行一个函数，但实际上是每经过一定时间将这个事件添加到任务队列中，等待执行栈中的事件执行完毕之后才从任务队列中获取事件压入执行栈，这样就不能保证是每隔一段时间去执行一个事件了。那么可以通过setTimeout方法来执行，原理是利用递归的方式不断的调用函数来执行setTimeout。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myInterval(fn, wait)&#123;</span><br><span class="line">    var timer &#x3D; &#123;</span><br><span class="line">        flag: true</span><br><span class="line">    &#125;;</span><br><span class="line">    function interval()&#123;</span><br><span class="line">        if(timer.flag)&#123;</span><br><span class="line">            fn();</span><br><span class="line">            setTimeout(interval, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(interval, wait);</span><br><span class="line">    return timer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="127-let-和-const-的注意点？"><a href="#127-let-和-const-的注意点？" class="headerlink" title="127. let 和 const 的注意点？"></a>127. let 和 const 的注意点？</h2><ol>
<li>let和const声明变量时不能变量提升。 </li>
<li>let和const有自己单独的作用域。 </li>
<li>不允许重复声明，重复声明会报错。 </li>
<li>const声明的变量不允许修改其值，const声明的为常量。 </li>
</ol>
<h2 id="128-什么是-rest-参数？"><a href="#128-什么是-rest-参数？" class="headerlink" title="128. 什么是 rest 参数？"></a>128. 什么是 rest 参数？</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rest 参数（形式为...变量名），用于获取函数的多余参数。</span><br></pre></td></tr></table></figure>

<h2 id="129-什么是尾调用，使用尾调用有什么好处？"><a href="#129-什么是尾调用，使用尾调用有什么好处？" class="headerlink" title="129. 什么是尾调用，使用尾调用有什么好处？"></a>129. 什么是尾调用，使用尾调用有什么好处？</h2><p> 尾调用指的是函数的最后一步调用另一个函数，我们的代码执行是基于执行栈的，所以<strong>当我们在函数内调用另一个函数时是保留了当前的执行上下文</strong>，当在最后一步调用函数时会将新的执行上下文压入到执行栈中，因为是在最后一步调用因此我们可以<strong>不必再保留当前的执行上下文</strong>，从而优化了内存，这就是尾调用的好处。 </p>
<h2 id="130-Symbol-类型的注意点？"><a href="#130-Symbol-类型的注意点？" class="headerlink" title="130. Symbol 类型的注意点？"></a>130. Symbol 类型的注意点？</h2><p> Symbol函数不能使用new命令，否则会报错。 </p>
<p> Symbol函数可以接受字符串作为参数，表示对实例的描述。 </p>
<p> Symbol作为属性名不会出现在for..in以及for..of中。</p>
<h2 id="131-Set-和-WeakSet-结构？"><a href="#131-Set-和-WeakSet-结构？" class="headerlink" title="131. Set 和 WeakSet 结构？"></a>131. Set 和 WeakSet 结构？</h2><p> Set作为一种数据结构，类似于数组，它保证了数组元素的唯一性，没有重复的值。</p>
<p>WeakSet与Set类似，也是不重复的值的集合，<strong>但成员只能是对象</strong>，不能是其他类型的值，它代表一种<strong>弱引用不能被垃圾回收机制回收</strong>。 </p>
<h2 id="132-Map-和-WeakMap-结构？"><a href="#132-Map-和-WeakMap-结构？" class="headerlink" title="132. Map 和 WeakMap 结构？"></a>132. Map 和 WeakMap 结构？</h2><p> Map作为一种数据结构，类似于对象，是键值对形式存在，但是键的范围不仅仅可以是字符串，还可以是任何类型的值都可以当做键。</p>
<p>WeakMap是Map类似，但键只能是对象，不是是其他类型结构，同时键名所指向的对象不能计入垃圾回收机制。 </p>
<h2 id="133-什么是-Proxy-？"><a href="#133-什么是-Proxy-？" class="headerlink" title="133. 什么是 Proxy ？"></a>133. 什么是 Proxy ？</h2><p> Proxy意思是代理，可以修改默认操作的行为，它相当于在目标对象之前设置一层“拦截”，任何对目标对象的操作都要经过过滤和改写，等同于在语言层面上做出修改，即元编程。 </p>
<h2 id="134-Reflect-对象创建目的？"><a href="#134-Reflect-对象创建目的？" class="headerlink" title="134. Reflect 对象创建目的？"></a>134. Reflect 对象创建目的？</h2><p>1）Object对象的一些内部方法放在了Reflect上面，比如：Object.defineProperty。主要是优化了语言内部的方法。</p>
<p>2）修改Object方法的返回，例如：Object.definePropery（obj,name,desc）无法定义属性时报错，而Reflect.definedProperty(obj,name,desc)则会返回false。</p>
<p>3）让Object变成函数的行为，以前的：name in obj和delete obj[name]，可以让Reflect.has(name)和Reflect.deleteProperty(obj,name)替代。</p>
<p>4）Reflect方法和Proxy方法一一对应。主要就是为了实现本体和代理的接口一致性，方便用户通过代理操作本体。</p>
<h2 id="135-require-模块引入的查找方式？"><a href="#135-require-模块引入的查找方式？" class="headerlink" title="135. require 模块引入的查找方式？"></a>135. require 模块引入的查找方式？</h2><p> 当require<strong>引入路径没有引入后缀时</strong>，首先查找该路径下是否有同名JS文件，若没有同名JS文件，就去找同名文件夹下的index.js，如果文件夹中没有index.js就会去当前文件夹中的package.json中查找main选项中的入口文件，如果指定入口文件不存在就会报错。 </p>
<p> 当require<strong>没有引入路径也没有引入后缀时</strong>，首先node.js会默认它引入的是系统模块，就会去node_modules中去查找同名js文件，若没有同名js文件就查找是否有同名的文件夹，找同名文件夹的index.js文件，若没有index.js文件就查看该文件夹中的package.json中的main选项中的入口文件，若都没有的话则会报错。 </p>
<h2 id="136-什么是-Promise-对象，什么是-Promises-A-规范？"><a href="#136-什么是-Promise-对象，什么是-Promises-A-规范？" class="headerlink" title="136. 什么是 Promise 对象，什么是 Promises/A+ 规范？"></a>136. 什么是 Promise 对象，什么是 Promises/A+ 规范？</h2><p> Promise对象是异步编程的一种解决方法，Promises/A+规范是JavaScript Promise的一种准则规范，规定了Promise的一些编程标准。Promise是一个构造函数，创建promise实例对象，接收一个回调函数作为参数，返回一个promise实例，该实例有三种状态，分别是pending、resolved和rejected，状态只能由pending转变为resolved或者pending转变为rejected，状态改变之后就凝固了不会转变为其他状态。在异步任务之后通过调用resolved或rejected方法来转变状态，返回一个promise对象，通过.then链式调用的方式来定义resolved和rejected的回调函数。 </p>
<h2 id="137-手写一个-Promise"><a href="#137-手写一个-Promise" class="headerlink" title="137. 手写一个 Promise"></a>137. 手写一个 Promise</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myPromise(fn)&#123;</span><br><span class="line">    var self &#x3D; this;</span><br><span class="line">    this.state &#x3D; &#39;penging&#39;;</span><br><span class="line">    this.value &#x3D; null;</span><br><span class="line">    this.resolvedCallback &#x3D; [];</span><br><span class="line">    this.rejectedCallback &#x3D; [];</span><br><span class="line">    function resolve(value)&#123;</span><br><span class="line">        if(value instanceof myPromise)&#123;</span><br><span class="line">            return value.then(resolved, rejected);</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            if(self.state &#x3D;&#x3D; &#39;pending&#39;)&#123;</span><br><span class="line">                self.value &#x3D; value;</span><br><span class="line">                self.state &#x3D; &#39;resolved&#39;;</span><br><span class="line">                self.resolvedCallback.forEach(callback &#x3D;&gt; &#123;</span><br><span class="line">                    callback(value);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 0)</span><br><span class="line">    &#125;</span><br><span class="line">    function reject(value)&#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            if(self.state &#x3D;&#x3D; &#39;pending&#39;)&#123;</span><br><span class="line">                self.value &#x3D; value;</span><br><span class="line">                self.state &#x3D; &#39;rejected&#39;;</span><br><span class="line">                self.rejectedCallback.forEach(callback &#x3D;&gt; &#123;</span><br><span class="line">                    callback(value);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 0)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;将两个方法传入函数执行</span><br><span class="line">    try&#123;</span><br><span class="line">        fn(resolve, reject);</span><br><span class="line">    &#125; catch(e)&#123;</span><br><span class="line">        rejecte(e);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">myPromise.prototype.then &#x3D; function(onResolved, onRejected)&#123;</span><br><span class="line">    &#x2F;&#x2F;首先判断这两个状态是否为函数，因为这两个参数是可选的</span><br><span class="line">    onResolved &#x3D; </span><br><span class="line">        typeof onResolved &#x3D;&#x3D; &#39;function&#39; </span><br><span class="line">        ? onResolved </span><br><span class="line">        : function(value)&#123;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line">    onRejected &#x3D; </span><br><span class="line">        typeof onRejected &#x3D;&#x3D; &#39;function&#39;</span><br><span class="line">        ? onRejected</span><br><span class="line">        : function(error)&#123;</span><br><span class="line">        throw error;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;如果是等待状态</span><br><span class="line">    if(this.state &#x3D;&#x3D; &#39;pending&#39;)&#123;</span><br><span class="line">        this.resolvedCallback.push(onResolved);</span><br><span class="line">        this.rejectedCallback.push(onRejected);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;如果状态已经凝固 则直接进行对应的状态</span><br><span class="line">    if(this.state &#x3D;&#x3D; &#39;resolved&#39;)&#123;</span><br><span class="line">        onResolved(this.value);</span><br><span class="line">    &#125;</span><br><span class="line">    if(this.state &#x3D;&#x3D; &#39;rejected&#39;)&#123;</span><br><span class="line">        onRejected(this.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="138-如何检测浏览器所支持的最小字体大小？"><a href="#138-如何检测浏览器所支持的最小字体大小？" class="headerlink" title="138. 如何检测浏览器所支持的最小字体大小？"></a>138. 如何检测浏览器所支持的最小字体大小？</h2><p> 可以为DOM字体设置为某一个字体大小，然后再将这个字体取出来，如果能够成功，就说明支持。 </p>
<h2 id="139-怎么做-JS-代码-Error-统计？"><a href="#139-怎么做-JS-代码-Error-统计？" class="headerlink" title="139. 怎么做 JS 代码 Error 统计？"></a>139. 怎么做 JS 代码 Error 统计？</h2><p> 利用window.error事件 </p>
<h2 id="140-单例模式模式是什么？"><a href="#140-单例模式模式是什么？" class="headerlink" title="140. 单例模式模式是什么？"></a>140. 单例模式模式是什么？</h2><p><a href="https://juejin.im/post/6844904032826294286#heading-11" target="_blank" rel="noopener">https://juejin.im/post/6844904032826294286#heading-11</a></p>
<h2 id="141-策略模式是什么？"><a href="#141-策略模式是什么？" class="headerlink" title="141. 策略模式是什么？"></a>141. 策略模式是什么？</h2><p><a href="https://juejin.im/post/6844904032826294286#heading-53" target="_blank" rel="noopener">https://juejin.im/post/6844904032826294286#heading-53</a></p>
<h2 id="142-代理模式是什么？"><a href="#142-代理模式是什么？" class="headerlink" title="142. 代理模式是什么？"></a>142. 代理模式是什么？</h2><p><a href="https://juejin.im/post/6844904032826294286#heading-25" target="_blank" rel="noopener">https://juejin.im/post/6844904032826294286#heading-25</a></p>
<h2 id="143-中介者模式是什么？"><a href="#143-中介者模式是什么？" class="headerlink" title="143. 中介者模式是什么？"></a>143. 中介者模式是什么？</h2><p><a href="https://juejin.im/post/6844904032826294286#heading-76" target="_blank" rel="noopener">https://juejin.im/post/6844904032826294286#heading-76</a></p>
<h2 id="144-适配器模式是什么？"><a href="#144-适配器模式是什么？" class="headerlink" title="144. 适配器模式是什么？"></a>144. 适配器模式是什么？</h2><p> 适配器模式用来解决当两个接口不兼容情况下，对接口进行包装适配而不需要改变原有接口，一般适用于当接口被应用到太多程序之中修改原有接口很不方便，这样就可以使用适配器来对接口进行包装输出，例如我们需要获取一个格式化后的时间，但不能对原有时间接口进行修改，就可以利用适配器对时间接口进行封装。 </p>
<h2 id="145-观察者模式和发布订阅模式有什么不同？"><a href="#145-观察者模式和发布订阅模式有什么不同？" class="headerlink" title="145. 观察者模式和发布订阅模式有什么不同？"></a>145. 观察者模式和发布订阅模式有什么不同？</h2><p> 发布订阅模式属于广义上的观察者模式，观察者模式中观察者需要直接订阅事件，当目标发出内容的改变之后，就会直接通知观察者进行响应。 </p>
<p> 发布订阅模式中有一个调度中心，能够实现发布者和订阅者之间的解耦，即当发布者发布事件之后，调度中心会一方面向发布者处接收事件，然后向订阅者发布事件，订阅者需要向调度中心订阅事件，这样的解耦有利于后期代码的可维护性。 </p>
<h2 id="146-Vue-的生命周期是什么？"><a href="#146-Vue-的生命周期是什么？" class="headerlink" title="146. Vue 的生命周期是什么？"></a>146. Vue 的生命周期是什么？</h2><p> Vue的生命周期指的是<strong>组件从创建到销毁的一系列过程</strong>。通过Vue在生命周期的各个阶段提供的钩子函数，我们可以在各个阶段进行一些操作。 </p>
<h2 id="147-Vue-的各个生命阶段是什么？"><a href="#147-Vue-的各个生命阶段是什么？" class="headerlink" title="147. Vue 的各个生命阶段是什么？"></a>147. Vue 的各个生命阶段是什么？</h2><ol>
<li>beforeCreate钩子函数：在Vue组件初始化时产生，此时数据还没有得到监听，事件尚未配置，此时是无法获取数据的。 </li>
<li>created钩子函数：实例创建完成后触发，此时组件尚未挂载到页面中，但可以访问data、methods属性。一般此时我们可以用于获取页面的初始数据工作。 </li>
<li>beforeMount钩子函数：组件挂载到页面之前触发，此时会找到对应的template，编译成render函数。 </li>
<li>mounted钩子函数：组件挂载到页面之后触发，此时可通过DOM相关api获取dom元素。 </li>
<li>beforeUpdate钩子函数：当响应式数据或节点发生更新时触发，此时虚拟DOM尚未渲染完毕。 </li>
<li>updated钩子函数：虚拟DOM重新渲染完毕之后触发。 </li>
<li>beforeDestory钩子函数：在实例销毁之前调用，此时可用来销毁定时器，解绑全局事件等。 </li>
<li>destoryed钩子函数：在实例销毁之后调用，调用之后实例的所有监听事件都会解除绑定，所有子实例也会被消除。 </li>
</ol>
<h2 id="148-Vue-组件间的参数传递方式？"><a href="#148-Vue-组件间的参数传递方式？" class="headerlink" title="148. Vue 组件间的参数传递方式？"></a>148. Vue 组件间的参数传递方式？</h2><p><a href="https://juejin.im/post/6861547167358648327" target="_blank" rel="noopener">https://juejin.im/post/6861547167358648327</a></p>
<h2 id="149-computed-和-watch-的差异？"><a href="#149-computed-和-watch-的差异？" class="headerlink" title="149. computed 和 watch 的差异？"></a>149. computed 和 watch 的差异？</h2><p>computed是计算属性，当一个值需要通过一系列的变量计算得到或是通过监听某个事件得到，可以通过计算属性获得，得到的值可以用于函数中。</p>
<p>watch是监听某一个数据的值，当这个数据发生变化时，会产生对其他数据的影响，调用执行函数。总结就是computed是多个数据影响一个数据，而watch是一个数据影响多个数据。 </p>
<h2 id="150-vue-router-中的导航钩子函数"><a href="#150-vue-router-中的导航钩子函数" class="headerlink" title="150. vue-router 中的导航钩子函数"></a>150. vue-router 中的导航钩子函数</h2><p> vue-router中的导航钩子函数可以成为路由守卫。 </p>
<ol>
<li>全局的导航钩子：beforeEach和afterEach，两者分别是在每个路由前使用和路由后使用，拿beforeEach例子来说，接收三个参数，分别为to，from，next，to表示要进入的路由，from表示离开的路由，next若参数为空则表示直接执行下一个钩子函数，若参数为路径，则导航到对应的路由，若参数为false，就禁止跳转，若为error则导航终于，传入错误的监听函数。 </li>
<li>路由内导航钩子，在路由配置内定义，单独路由拥有的导航钩子。 </li>
<li>组件内导航钩子，在组件内定义，主要有beforeRouteUpdate，beforeRouteEnter, beforeRouteLeave。 </li>
</ol>
<h2 id="151-route和router-的区别？"><a href="#151-route和router-的区别？" class="headerlink" title="151. route和router 的区别？"></a>151. route和router 的区别？</h2><p>route是<strong>路由信息对象</strong>，包括路由的path, params, name, hash, query等信息</p>
<p>router是<strong>路由实例对象</strong>，包括路径的跳转方法，钩子函数等。 </p>
<h2 id="152-vue-常用的修饰符？"><a href="#152-vue-常用的修饰符？" class="headerlink" title="152. vue 常用的修饰符？"></a>152. vue 常用的修饰符？</h2><p> vue常用的修饰符有.pevent, .stop, .self等，.pevent表示取消该事件的其默认行为，例如a标签取消点击跳转默认行为，.stop表示取消冒泡事件， .self表示该事件发生在这个元素本身而不是其子元素的事件。 </p>
<h2 id="153-vue-中-key-值的作用？"><a href="#153-vue-中-key-值的作用？" class="headerlink" title="153. vue 中 key 值的作用？"></a>153. vue 中 key 值的作用？</h2><p> vue中的key值可以分为两种情况来调用： </p>
<ol>
<li>v-if中用到key值，因为vue为了更好更快速的渲染页面默认使用元素复用的原则，尽可能复用已有的元素而不是从头开始渲染，例如说一个input元素我们在更新切换时会复用同一个元素，那么用户在之前输入的内容可能会被保留下来这是不符合规范的，因此为每一个v-if添加一个key属性用来作为唯一标识，这样使用key的元素不会被复用。 </li>
<li>v-for中用到key值，是因为我们在使用v-for更新迭代渲染过的元素时，为了避免vue默认就地复用的原则，用唯一标识添加key值，当更新渲染时，如果数据列表发生改变，vue是不会采用移动DOM元素来更改位置，而是复用原先的元素，因此为每个列表项添加一个key值来追踪每个元素的身份。 </li>
<li>为虚拟DOM的diff算法提供唯一标识</li>
</ol>
<h2 id="154-computed-和-watch-区别？"><a href="#154-computed-和-watch-区别？" class="headerlink" title="154. computed 和 watch 区别？"></a>154. computed 和 watch 区别？</h2><p>看149点</p>
<h2 id="155-keep-alive-组件有什么作用？"><a href="#155-keep-alive-组件有什么作用？" class="headerlink" title="155. keep-alive 组件有什么作用？"></a>155. keep-alive 组件有什么作用？</h2><p> 如果我们在进行组件切换的时候需要保存一些组件的状态，就可以使用keep-alive组件将需要保存状态的组件包裹起来，防止多次渲染。 </p>
<h2 id="156-vue-中-mixin-和-mixins-区别？"><a href="#156-vue-中-mixin-和-mixins-区别？" class="headerlink" title="156. vue 中 mixin 和 mixins 区别？"></a>156. vue 中 mixin 和 mixins 区别？</h2><p> mixin为全局混入，也就是说若创建了一个全局混入组件，会影响到所有vue组件创建的实例。 </p>
<p> mixins提供了一个灵活的方式，可分发vue组件中的可复用功能，一个混入对象可混入任意组件内容。当组件使用混入对象时，所有混合对象的选项将被“混合”进组件内的所有选项。当组件和混入对象有相同选项时，会进行恰当的合并，例如数据对象在内部会进行递归合并，冲突时刻以组件数据优先。混入对象的钩子函数将在组件内钩子函数之前调用。值为对象的一些选项，例如methods，components等会合并为一个对象，两个对象键名冲突时会取组件对象的键值对。 </p>
<h2 id="157-开发中常用的几种-Content-Type-？"><a href="#157-开发中常用的几种-Content-Type-？" class="headerlink" title="157. 开发中常用的几种 Content-Type ？"></a>157. 开发中常用的几种 Content-Type ？</h2><ol>
<li>application/x-www-form-urlencoded：该数据格式主要存放在body中，主要是key1=val1&amp;key2=val2的格式（键值对）进行编码。 </li>
<li>application/json：该数据格式主要是以json字符串格式进行编码。 </li>
<li>text/xml：该种方式主要是用来提交xml格式的数据。 </li>
<li>multipart/form-data：该种数据格式主要用来提交表单形式的数据。 </li>
</ol>
<h2 id="158-如何封装一个-javascript-的类型判断函数？"><a href="#158-如何封装一个-javascript-的类型判断函数？" class="headerlink" title="158. 如何封装一个 javascript 的类型判断函数？"></a>158. 如何封装一个 javascript 的类型判断函数？</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typeof</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(value === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span> + <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> value === <span class="string">'object'</span>)&#123;</span><br><span class="line">        <span class="comment">//如果为引用数据类型</span></span><br><span class="line">        <span class="keyword">let</span> valueClass = <span class="built_in">Object</span>.prototype.toString.call(value).split(<span class="string">' '</span>)[<span class="number">1</span>],</span><br><span class="line">            type = valueClass.split(<span class="string">''</span>);</span><br><span class="line">        type.pop();</span><br><span class="line">        <span class="keyword">return</span> type.join(<span class="string">''</span>).toLowerCase();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="159-如何判断一个对象是否为空对象？"><a href="#159-如何判断一个对象是否为空对象？" class="headerlink" title="159. 如何判断一个对象是否为空对象？"></a>159. 如何判断一个对象是否为空对象？</h2><ol>
<li><p>使用for..in： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(var k in obj)&#123;</span><br><span class="line">    &#x2F;&#x2F;如果对象非空，则可以执行到此处</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用JSON自带的stringify方法，转化为json字符串 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(JSON.stringify(obj) &#x3D;&#x3D;&#x3D; &#39;&#123;&#125;&#39;)&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ES6新增的Object.keys()方法，可以返回对象中所有可枚举属性组成的数据 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; &#123;&#125;;</span><br><span class="line">Object.keys(a);   &#x2F;&#x2F;[]</span><br><span class="line">&#x2F;&#x2F;我们可以利用对象中可枚举数组的长度是否为0来判断是否为空对象</span><br><span class="line">if(Object.keys(obj).length &#x3D;&#x3D;&#x3D; 0)&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="160-使用闭包实现每隔一秒打印-1-2-3-4"><a href="#160-使用闭包实现每隔一秒打印-1-2-3-4" class="headerlink" title="160. 使用闭包实现每隔一秒打印 1,2,3,4"></a>160. 使用闭包实现每隔一秒打印 1,2,3,4</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;=<span class="number">4</span>; i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j)</span><br><span class="line">        &#125;, j*<span class="number">1000</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="161-手写一个-jsonp"><a href="#161-手写一个-jsonp" class="headerlink" title="161. 手写一个 jsonp"></a>161. 手写一个 jsonp</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url, params, callback</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//首先判断url本身是否带有参数 即是否带有？</span></span><br><span class="line">    queryString = url.indexOf(<span class="string">'?'</span>) === <span class="string">'-1'</span> ? <span class="string">'?'</span> : <span class="string">'&amp;'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> params)&#123;</span><br><span class="line">        <span class="keyword">if</span>(params.hanOwnProperty(k))&#123;</span><br><span class="line">            queryString += k + <span class="string">'='</span> + params[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个随机的函数名 添加到参数中</span></span><br><span class="line">    <span class="keyword">var</span> randomName = <span class="built_in">Math</span>.random().toString().replace(<span class="string">'.'</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="keyword">var</span> myFunction = <span class="string">'myFunction'</span> + randomName;</span><br><span class="line">    queryString += <span class="string">'callback'</span> + <span class="string">'='</span> + myFunction;</span><br><span class="line">    url += queryString;</span><br><span class="line">    <span class="comment">//动态创建script标签</span></span><br><span class="line">    <span class="keyword">var</span> myScript = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    myScript.src = url;</span><br><span class="line">    <span class="built_in">window</span>[myFunction] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        callback(...arguments);</span><br><span class="line">        <span class="comment">//删除这个动态脚本</span></span><br><span class="line">        doucment.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].removeChild(myScript);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将脚本插入到head中</span></span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(myScript);</span><br></pre></td></tr></table></figure>

<h2 id="162-手写一个观察者模式？"><a href="#162-手写一个观察者模式？" class="headerlink" title="162. 手写一个观察者模式？"></a>162. 手写一个观察者模式？</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> topics = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">//发布模式</span></span><br><span class="line">        publish: <span class="function"><span class="keyword">function</span>(<span class="params">topic, info</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'publish a topic:'</span> + topic);</span><br><span class="line">            <span class="keyword">if</span>(topics.hasOwnProperty(topic))&#123;</span><br><span class="line">                topics[topic].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">handler</span>)</span>&#123;</span><br><span class="line">                    handler(info ? info : &#123;&#125;);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//订阅模式</span></span><br><span class="line">        subscribe: <span class="function"><span class="keyword">function</span>(<span class="params">topic, handler</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'subscribe a topic:'</span> + topic);</span><br><span class="line">            <span class="keyword">if</span>(!topics.hasOwnProperty(topic))&#123;</span><br><span class="line">                topics[topic] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            topics[topic].push(handler);</span><br><span class="line">        &#125;,</span><br><span class="line">        remove: <span class="function"><span class="keyword">function</span>(<span class="params">topic, handler</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!topics.hasOwnProperty(topic))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> topicIndex = <span class="number">-1</span>;</span><br><span class="line">            topics[topic].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element, index</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(element === handler)&#123;</span><br><span class="line">                    topicIndex = index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            topics[topic].splice(topicIndex, <span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        removeAll: <span class="function"><span class="keyword">function</span>(<span class="params">topic</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'remove all the handler on the topic'</span>);</span><br><span class="line">            <span class="keyword">if</span>(topics.hasOwnProperty(topic))&#123;</span><br><span class="line">                topics[topic].length = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params">info</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(info);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//订阅hello主题</span></span><br><span class="line">event.subscribe(<span class="string">'hello'</span>, handler);</span><br><span class="line"><span class="comment">//发布hello主题</span></span><br><span class="line">event.publish(<span class="string">'hello'</span>, <span class="string">'hello world'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="163-EventEmitter-实现"><a href="#163-EventEmitter-实现" class="headerlink" title="163. EventEmitter 实现"></a>163. EventEmitter 实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eventEmitter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.events = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    on(event, callback)&#123;</span><br><span class="line">        <span class="keyword">let</span> callbacks = <span class="keyword">this</span>.events[event] || [];</span><br><span class="line">        callbacks.push(callback);</span><br><span class="line">        <span class="keyword">this</span>.events[event] = callbacks;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    emit(event, ...args)&#123;</span><br><span class="line">        <span class="keyword">let</span> callbacks = <span class="keyword">this</span>.events[event];</span><br><span class="line">        callbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">            fn(...args);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    off(event, callback)&#123;</span><br><span class="line">        <span class="keyword">let</span> callbacks = <span class="keyword">this</span>.events[event];</span><br><span class="line">        callbacks = callbacks.filter(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="keyword">return</span> fn !== callback);</span><br><span class="line">        <span class="keyword">this</span>.events[event] = callbacks;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    once(event, callback)&#123;</span><br><span class="line">        <span class="keyword">let</span> wrapFun = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">            callback(...args);</span><br><span class="line">            <span class="keyword">this</span>.off(wrapFun);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.on(event, wrapFun);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="164-一道常被人轻视的前端-JS-面试题"><a href="#164-一道常被人轻视的前端-JS-面试题" class="headerlink" title="164. 一道常被人轻视的前端 JS 面试题"></a>164. 一道常被人轻视的前端 JS 面试题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">3</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">4</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请写出以下输出结果：</span></span><br><span class="line">Foo.getName(); <span class="comment">// 2</span></span><br><span class="line">getName(); <span class="comment">// 4</span></span><br><span class="line">Foo().getName(); <span class="comment">// 1</span></span><br><span class="line">getName(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">new</span> Foo.getName(); <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">new</span> Foo().getName(); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h2 id="165-如何确定页面的可用性时间，什么是-Performance-API？"><a href="#165-如何确定页面的可用性时间，什么是-Performance-API？" class="headerlink" title="165. 如何确定页面的可用性时间，什么是 Performance API？"></a>165. 如何确定页面的可用性时间，什么是 Performance API？</h2><p> JavaScript为了解决浏览器时间精度不够小只能精确到毫秒级别的误差以及无法得知向服务器端请求资源的事件，添加了一个performance的api，就是一个精密时间戳，它有两个方法，一个是navigationStart，它代表前一个网页关闭时的时间戳，另一个是loadEventEnd，它是当前网页的load事件的回到函数执行结束时的高精度时间戳。用这两个属性可以计算出网页加载整个的耗时： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var t &#x3D; performance.timing;</span><br><span class="line">var pageLoadTime &#x3D; t.loadEventEnd - t.navigationStart;</span><br></pre></td></tr></table></figure>

<h2 id="166-js-中的命名规则"><a href="#166-js-中的命名规则" class="headerlink" title="166. js 中的命名规则"></a>166. js 中的命名规则</h2><p> 通常变量的命名规则为第一个字符要求是字母、下划线或者是美元符合$。其他字符可以是字母、数字、下划线和美元符号。命名规则通常要求为驼峰命名法，可以与ECMAScript的内置函数和对象配置一致。 </p>
<h2 id="167-js-语句末尾分号是否可以省略？"><a href="#167-js-语句末尾分号是否可以省略？" class="headerlink" title="167. js 语句末尾分号是否可以省略？"></a>167. js 语句末尾分号是否可以省略？</h2><p> 最好不要省略，因为语句末尾添加分号，在代码压缩优化之后不会产生错误，并且方便日后维护</p>
<h2 id="168-Object-assign"><a href="#168-Object-assign" class="headerlink" title="168. Object.assign()"></a>168. Object.assign()</h2><p> 它会将所有可枚举属性从一个或多个源对象复制到另一个目标对象上，并返回目标对象，浅拷贝。 </p>
<h2 id="169-Math-ceil-和-Math-floor"><a href="#169-Math-ceil-和-Math-floor" class="headerlink" title="169. Math.ceil 和 Math.floor"></a>169. Math.ceil 和 Math.floor</h2><p> Math.ceil()为将浮点数值向上取整，Math.floor()为将浮点数值向下取整。</p>
<h2 id="170-js-for-循环注意点"><a href="#170-js-for-循环注意点" class="headerlink" title="170. js for 循环注意点"></a>170. js for 循环注意点</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">5</span>, j &lt; <span class="number">9</span>; i++, j++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 当判断语句为多个语句时，<strong>以最后的语句为准</strong>，如上代码以j &lt; 9为准。若判断语句为空，则会一直循环下去。</p>
<h2 id="171-一个列表，假设有-100000-个数据，这个该怎么办？"><a href="#171-一个列表，假设有-100000-个数据，这个该怎么办？" class="headerlink" title="171. 一个列表，假设有 100000 个数据，这个该怎么办？"></a>171. 一个列表，假设有 100000 个数据，这个该怎么办？</h2><p> 当我们有大量数据时需要考虑几个问题，首先这些数据是否需要同步显示，其次这些数据是否需要按照顺序显示 </p>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><ol>
<li>我们可以使用分页技术，让这些数据分页显示在浏览器上，每次只显示并加载一页数据，其余数据等浏览器操作不同页数时在向服务器端请求渲染。 </li>
<li>可以使用懒加载方式，让一部分数据先显示出来，然后当浏览器需要显示某部分数据的时候再去加载那一部分数据，可以减轻服务器端压力，使性能优化。 </li>
<li>可以给数据分组显示，比如显示一个定时器，一定时间内显示一部分数据。</li>
<li>采用虚拟列表，减轻页面的DOM元素构建压力，大大提升浏览器渲染效率</li>
</ol>
<h2 id="172-js-中倒计时的纠偏实现？"><a href="#172-js-中倒计时的纠偏实现？" class="headerlink" title="172. js 中倒计时的纠偏实现？"></a>172. js 中倒计时的纠偏实现？</h2><p><a href="https://juejin.im/post/6844903685458231303" target="_blank" rel="noopener">https://juejin.im/post/6844903685458231303</a></p>
<h2 id="173-进程间通信的方式？"><a href="#173-进程间通信的方式？" class="headerlink" title="173. 进程间通信的方式？"></a>173. 进程间通信的方式？</h2><p> 管道通信、任务队列通信、信号量通信、信号通信、套接字通信、共享内存通信。 </p>
<h2 id="174-如何查找一篇英文文章中出现频率最高的单词？"><a href="#174-如何查找一篇英文文章中出现频率最高的单词？" class="headerlink" title="174. 如何查找一篇英文文章中出现频率最高的单词？"></a>174. 如何查找一篇英文文章中出现频率最高的单词？</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findWord</span>(<span class="params">article</span>)</span>&#123;   </span><br><span class="line">  <span class="keyword">if</span>(article == <span class="literal">null</span>)&#123;   </span><br><span class="line">    <span class="keyword">return</span> article  </span><br><span class="line">  &#125;   </span><br><span class="line">  article = article.trim().toLowerCase();   </span><br><span class="line">  <span class="keyword">var</span> wordList = article.match(<span class="regexp">/[a-z]+/g</span>);   </span><br><span class="line">  article = <span class="string">' '</span> + wordList.join(<span class="string">' '</span>) + <span class="string">' '</span>;   </span><br><span class="line">  <span class="keyword">var</span> max = <span class="number">0</span>;   </span><br><span class="line">  <span class="keyword">var</span> maxWord = <span class="string">''</span>;   </span><br><span class="line">  <span class="keyword">var</span> list = [];   </span><br><span class="line">  wordList.forEach(<span class="function"><span class="params">word</span> =&gt;</span> &#123;   </span><br><span class="line">    <span class="keyword">if</span>(list.indexof(word) === <span class="string">'-1'</span>)&#123;   </span><br><span class="line">      list.push(word);   </span><br><span class="line">      <span class="keyword">var</span> newWord = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">' '</span> + word + <span class="string">' '</span>);    </span><br><span class="line">      <span class="keyword">var</span> wordLength = article.match(newWord).length;   </span><br><span class="line">      <span class="keyword">if</span>(wordLength &gt; max)&#123;   </span><br><span class="line">        max = wordLength;   </span><br><span class="line">        maxWord = word;   </span><br><span class="line">      &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;)   </span><br><span class="line">  <span class="keyword">return</span> maxWord + <span class="string">' '</span> + max;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这必须提到的借鉴文章-<br><a href="https://www.nowcoder.com/discuss/412972?source_id=profile_create&channel=666" target="_blank" rel="noopener">牛客网大神</a>    </p>
]]></content>
      <tags>
        <tag>面试小屋</tag>
      </tags>
  </entry>
</search>
